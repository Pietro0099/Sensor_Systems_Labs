
Homework_5b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08008438  08008438  00018438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008830  08008830  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008838  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001e8  08008a20  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08008a20  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e691  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cf  00000000  00000000  0002e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  000309c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ada  00000000  00000000  000317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018632  00000000  00000000  0003227a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100d3  00000000  00000000  0004a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b3a1  00000000  00000000  0005a97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ef0  00000000  00000000  000f5d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008420 	.word	0x08008420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008420 	.word	0x08008420

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <HAL_ADC_ConvCpltCallback>:
float v_adc, resistance_sum, light,avg;
uint32_t adc_result[1]; // for DMA it must be necessarily an array, not a variable
char text[64];
int length, resistance_counter;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
		v_adc = adc_result[0] * 3.3 / 4095.0;
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fad4 	bl	8000514 <__aeabi_ui2d>
 8000f6c:	a32a      	add	r3, pc, #168	; (adr r3, 8001018 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb49 	bl	8000608 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a328      	add	r3, pc, #160	; (adr r3, 8001020 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc6a 	bl	800085c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fe12 	bl	8000bb8 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <HAL_ADC_ConvCpltCallback+0xd4>)
 8000f98:	6013      	str	r3, [r2, #0]
		resistance_sum = resistance_sum + (v_adc * 100000) / (3.3 - v_adc);
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fada 	bl	8000558 <__aeabi_f2d>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_ADC_ConvCpltCallback+0xd4>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001034 <HAL_ADC_ConvCpltCallback+0xdc>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	ee17 0a90 	vmov	r0, s15
 8000fba:	f7ff facd 	bl	8000558 <__aeabi_f2d>
 8000fbe:	4680      	mov	r8, r0
 8000fc0:	4689      	mov	r9, r1
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_ADC_ConvCpltCallback+0xd4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fac6 	bl	8000558 <__aeabi_f2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	a111      	add	r1, pc, #68	; (adr r1, 8001018 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fd6:	f7ff f95f 	bl	8000298 <__aeabi_dsub>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4640      	mov	r0, r8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	f7ff fc3b 	bl	800085c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f955 	bl	800029c <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fddd 	bl	8000bb8 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001002:	6013      	str	r3, [r2, #0]
		resistance_counter++;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_ADC_ConvCpltCallback+0xe0>)
 800100c:	6013      	str	r3, [r2, #0]
	}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00
 8001028:	2000038c 	.word	0x2000038c
 800102c:	20000380 	.word	0x20000380
 8001030:	20000384 	.word	0x20000384
 8001034:	47c35000 	.word	0x47c35000
 8001038:	200003d4 	.word	0x200003d4
 800103c:	00000000 	.word	0x00000000

08001040 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af04      	add	r7, sp, #16
 8001046:	6078      	str	r0, [r7, #4]

	if (htim == &htim3) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d14b      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
		avg=(resistance_sum/resistance_counter);
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001052:	edd3 6a00 	vldr	s13, [r3]
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001068:	edc3 7a00 	vstr	s15, [r3]
		length = snprintf(text, sizeof(text),"Resistance = %.3f ohm; Light = %.3f lux \r\n",avg, 10 * pow(100000 / (avg), 1.25));
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa71 	bl	8000558 <__aeabi_f2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001108 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001088:	ee16 0a90 	vmov	r0, s13
 800108c:	f7ff fa64 	bl	8000558 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80010f0 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001098:	ec43 2b10 	vmov	d0, r2, r3
 800109c:	f006 fa88 	bl	80075b0 <pow>
 80010a0:	ec51 0b10 	vmov	r0, r1, d0
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010aa:	f7ff faad 	bl	8000608 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010b6:	e9cd 4500 	strd	r4, r5, [sp]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010c0:	f004 f908 	bl	80052d4 <sniprintf>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010c8:	6013      	str	r3, [r2, #0]
		resistance_counter = 0;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		resistance_sum = 0;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)text, length, 20);
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	2314      	movs	r3, #20
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010e4:	f003 f86b 	bl	80041be <HAL_UART_Transmit>
		}
	}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	00000000 	.word	0x00000000
 80010f4:	3ff40000 	.word	0x3ff40000
 80010f8:	200002f4 	.word	0x200002f4
 80010fc:	20000384 	.word	0x20000384
 8001100:	200003d4 	.word	0x200003d4
 8001104:	20000388 	.word	0x20000388
 8001108:	47c35000 	.word	0x47c35000
 800110c:	40240000 	.word	0x40240000
 8001110:	08008438 	.word	0x08008438
 8001114:	20000390 	.word	0x20000390
 8001118:	200003d0 	.word	0x200003d0
 800111c:	2000033c 	.word	0x2000033c

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fca6 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f82a 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 f9ca 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001130:	f000 f9a8 	bl	8001484 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001134:	f000 f97c 	bl	8001430 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001138:	f000 f88e 	bl	8001258 <MX_ADC1_Init>
  MX_TIM2_Init();
 800113c:	f000 f8de 	bl	80012fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001140:	f000 f928 	bl	8001394 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <main+0x50>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0201 	mvn.w	r2, #1
 800114c:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <main+0x54>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f06f 0201 	mvn.w	r2, #1
 8001156:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <main+0x50>)
 800115a:	f002 fbed 	bl	8003938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <main+0x54>)
 8001160:	f002 fbea 	bl	8003938 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc_result, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	4904      	ldr	r1, [pc, #16]	; (8001178 <main+0x58>)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <main+0x5c>)
 800116a:	f000 fd39 	bl	8001be0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116e:	e7fe      	b.n	800116e <main+0x4e>
 8001170:	200002ac 	.word	0x200002ac
 8001174:	200002f4 	.word	0x200002f4
 8001178:	2000038c 	.word	0x2000038c
 800117c:	20000204 	.word	0x20000204

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	; 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f004 f917 	bl	80053c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <SystemClock_Config+0xd0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <SystemClock_Config+0xd0>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <SystemClock_Config+0xd0>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <SystemClock_Config+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <SystemClock_Config+0xd4>)
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <SystemClock_Config+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	2310      	movs	r3, #16
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ec:	2302      	movs	r3, #2
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011f4:	2310      	movs	r3, #16
 80011f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011fe:	2304      	movs	r3, #4
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001202:	2307      	movs	r3, #7
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4618      	mov	r0, r3
 800120c:	f001 feac 	bl	8002f68 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001216:	f000 f9c3 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2302      	movs	r3, #2
 8001220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f90e 	bl	8003458 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001242:	f000 f9ad 	bl	80015a0 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	; 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800126c:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <MX_ADC1_Init+0xa0>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_ADC1_Init+0x9c>)
 8001272:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001276:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC1_Init+0x9c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_ADC1_Init+0x9c>)
 8001286:	2200      	movs	r2, #0
 8001288:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_ADC1_Init+0x9c>)
 8001294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800129c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012be:	f000 fc4b 	bl	8001b58 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80012c8:	f000 f96a 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0x9c>)
 80012de:	f000 fd83 	bl	8001de8 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012e8:	f000 f95a 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000204 	.word	0x20000204
 80012f8:	40012000 	.word	0x40012000

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_TIM2_Init+0x94>)
 800131a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_TIM2_Init+0x94>)
 8001322:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_TIM2_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_TIM2_Init+0x94>)
 8001330:	2209      	movs	r2, #9
 8001332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_TIM2_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_TIM2_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_TIM2_Init+0x94>)
 8001342:	f002 faa9 	bl	8003898 <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800134c:	f000 f928 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_TIM2_Init+0x94>)
 800135e:	f002 fc55 	bl	8003c0c <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 f91a 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800136c:	2320      	movs	r3, #32
 800136e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_TIM2_Init+0x94>)
 800137a:	f002 fe51 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001384:	f000 f90c 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200002ac 	.word	0x200002ac

08001394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM3_Init+0x94>)
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <MX_TIM3_Init+0x98>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM3_Init+0x94>)
 80013b8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80013bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM3_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM3_Init+0x94>)
 80013c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80013ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_TIM3_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM3_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM3_Init+0x94>)
 80013da:	f002 fa5d 	bl	8003898 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013e4:	f000 f8dc 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM3_Init+0x94>)
 80013f6:	f002 fc09 	bl	8003c0c <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f8ce 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM3_Init+0x94>)
 8001412:	f002 fe05 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f8c0 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002f4 	.word	0x200002f4
 800142c:	40000400 	.word	0x40000400

08001430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART2_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001468:	f002 fe5c 	bl	8004124 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f895 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000033c 	.word	0x2000033c
 8001480:	40004400 	.word	0x40004400

08001484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_DMA_Init+0x3c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <MX_DMA_Init+0x3c>)
 8001494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_DMA_Init+0x3c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2038      	movs	r0, #56	; 0x38
 80014ac:	f001 f817 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014b0:	2038      	movs	r0, #56	; 0x38
 80014b2:	f001 f830 	bl	8002516 <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <MX_GPIO_Init+0xd0>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <MX_GPIO_Init+0xd0>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <MX_GPIO_Init+0xd4>)
 8001550:	f001 fcf0 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <MX_GPIO_Init+0xd8>)
 800156c:	f001 fb5e 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001570:	2320      	movs	r3, #32
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_GPIO_Init+0xd4>)
 8001588:	f001 fb50 	bl	8002c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020800 	.word	0x40020800

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ea:	2007      	movs	r0, #7
 80015ec:	f000 ff6c 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_ADC_MspInit+0xdc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d157      	bne.n	80016ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_ADC_MspInit+0xe0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165a:	2303      	movs	r3, #3
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	481d      	ldr	r0, [pc, #116]	; (80016e0 <HAL_ADC_MspInit+0xe4>)
 800166a:	f001 fadf 	bl	8002c2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_ADC_MspInit+0xec>)
 8001672:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001694:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 8001698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800169c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016b4:	f000 ff4a 	bl	800254c <HAL_DMA_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016be:	f7ff ff6f 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_ADC_MspInit+0xe8>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	2000024c 	.word	0x2000024c
 80016e8:	40026410 	.word	0x40026410

080016ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800171a:	e01a      	b.n	8001752 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <HAL_TIM_Base_MspInit+0x74>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d115      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201d      	movs	r0, #29
 8001748:	f000 fec9 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800174c:	201d      	movs	r0, #29
 800174e:	f000 fee2 	bl	8002516 <HAL_NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40000400 	.word	0x40000400

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017be:	230c      	movs	r3, #12
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ce:	2307      	movs	r3, #7
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_MspInit+0x8c>)
 80017da:	f001 fa27 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 f96a 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM3_IRQHandler+0x10>)
 800184e:	f002 f8d5 	bl	80039fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002f4 	.word	0x200002f4

0800185c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA2_Stream0_IRQHandler+0x10>)
 8001862:	f000 ff79 	bl	8002758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000024c 	.word	0x2000024c

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188a:	f003 fded 	bl	8005468 <__errno>
 800188e:	4603      	mov	r3, r0
 8001890:	2216      	movs	r2, #22
 8001892:	601a      	str	r2, [r3, #0]
  return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0x12>

080018b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
  }

  return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
  }
  return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f003 fd52 	bl	8005468 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200003d8 	.word	0x200003d8
 80019f8:	20000530 	.word	0x20000530

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4a:	f7ff ffd7 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f003 fd11 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fb65 	bl	8001120 <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a64:	08008838 	.word	0x08008838
  ldr r2, =_sbss
 8001a68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a6c:	2000052c 	.word	0x2000052c

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 fd13 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd80 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd2b 	bl	8002532 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 fcf3 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	200003dc 	.word	0x200003dc

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003dc 	.word	0x200003dc

08001b58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e033      	b.n	8001bd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fd40 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b9e:	f023 0302 	bic.w	r3, r3, #2
 8001ba2:	f043 0202 	orr.w	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa3e 	bl	800202c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc6:	e001      	b.n	8001bcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Start_DMA+0x1e>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e0ce      	b.n	8001d9c <HAL_ADC_Start_DMA+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d018      	beq.n	8001c46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c24:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_ADC_Start_DMA+0x1c4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5f      	ldr	r2, [pc, #380]	; (8001da8 <HAL_ADC_Start_DMA+0x1c8>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9a      	lsrs	r2, r3, #18
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c38:	e002      	b.n	8001c40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f9      	bne.n	8001c3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d107      	bne.n	8001c66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	f040 8086 	bne.w	8001d82 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f023 0206 	bic.w	r2, r3, #6
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc2:	e002      	b.n	8001cca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_ADC_Start_DMA+0x1cc>)
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	4a35      	ldr	r2, [pc, #212]	; (8001db0 <HAL_ADC_Start_DMA+0x1d0>)
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <HAL_ADC_Start_DMA+0x1d4>)
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	4a33      	ldr	r2, [pc, #204]	; (8001db8 <HAL_ADC_Start_DMA+0x1d8>)
 8001cec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	334c      	adds	r3, #76	; 0x4c
 8001d22:	4619      	mov	r1, r3
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f000 fcbe 	bl	80026a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d129      	bne.n	8001d9a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e020      	b.n	8001d9a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_ADC_Start_DMA+0x1dc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d11b      	bne.n	8001d9a <HAL_ADC_Start_DMA+0x1ba>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d114      	bne.n	8001d9a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e00b      	b.n	8001d9a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	40012300 	.word	0x40012300
 8001db0:	08002225 	.word	0x08002225
 8001db4:	080022df 	.word	0x080022df
 8001db8:	080022fb 	.word	0x080022fb
 8001dbc:	40012000 	.word	0x40012000

08001dc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1c>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e105      	b.n	8002010 <HAL_ADC_ConfigChannel+0x228>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	d925      	bls.n	8001e60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68d9      	ldr	r1, [r3, #12]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	3b1e      	subs	r3, #30
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4403      	add	r3, r0
 8001e52:	3b1e      	subs	r3, #30
 8001e54:	409a      	lsls	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	e022      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	2207      	movs	r2, #7
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4403      	add	r3, r0
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d824      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b05      	subs	r3, #5
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b05      	subs	r3, #5
 8001eea:	fa00 f203 	lsl.w	r2, r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef6:	e04c      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d824      	bhi.n	8001f4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b23      	subs	r3, #35	; 0x23
 8001f12:	221f      	movs	r2, #31
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	400a      	ands	r2, r1
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b23      	subs	r3, #35	; 0x23
 8001f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
 8001f48:	e023      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b41      	subs	r3, #65	; 0x41
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b41      	subs	r3, #65	; 0x41
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_ADC_ConfigChannel+0x234>)
 8001f94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <HAL_ADC_ConfigChannel+0x238>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_ADC_ConfigChannel+0x238>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d123      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x21e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d003      	beq.n	8001fce <HAL_ADC_ConfigChannel+0x1e6>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b11      	cmp	r3, #17
 8001fcc:	d11b      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d111      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_ADC_ConfigChannel+0x23c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_ADC_ConfigChannel+0x240>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9a      	lsrs	r2, r3, #18
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40012300 	.word	0x40012300
 8002020:	40012000 	.word	0x40012000
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83

0800202c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002034:	4b79      	ldr	r3, [pc, #484]	; (800221c <ADC_Init+0x1f0>)
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4a58      	ldr	r2, [pc, #352]	; (8002220 <ADC_Init+0x1f4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e00f      	b.n	800212a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002128:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0202 	bic.w	r2, r2, #2
 8002138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e1b      	ldrb	r3, [r3, #24]
 8002144:	005a      	lsls	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002166:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	3b01      	subs	r3, #1
 8002184:	035a      	lsls	r2, r3, #13
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e007      	b.n	80021a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051a      	lsls	r2, r3, #20
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e2:	025a      	lsls	r2, r3, #9
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	029a      	lsls	r2, r3, #10
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	0f000001 	.word	0x0f000001

08002224 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800223a:	2b00      	cmp	r3, #0
 800223c:	d13c      	bne.n	80022b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d12b      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d127      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002278:	2b00      	cmp	r3, #0
 800227a:	d119      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0220 	bic.w	r2, r2, #32
 800228a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fe51 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022b6:	e00e      	b.n	80022d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fd85 	bl	8001dd4 <HAL_ADC_ErrorCallback>
}
 80022ca:	e004      	b.n	80022d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd67 	bl	8001dc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff fd5a 	bl	8001dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff29 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff3e 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff31 	bl	800238c <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff faf2 	bl	8001b40 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e099      	b.n	800269c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002588:	e00f      	b.n	80025aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258a:	f7ff fad9 	bl	8001b40 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d908      	bls.n	80025aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e078      	b.n	800269c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e8      	bne.n	800258a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_DMA_Init+0x158>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4313      	orrs	r3, r2
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0307 	bic.w	r3, r3, #7
 800262a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b04      	cmp	r3, #4
 800263c:	d117      	bne.n	800266e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa6f 	bl	8002b34 <DMA_CheckFifoParam>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800266a:	2301      	movs	r3, #1
 800266c:	e016      	b.n	800269c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fa26 	bl	8002ac8 <DMA_CalcBaseAndBitshift>
 800267c:	4603      	mov	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	223f      	movs	r2, #63	; 0x3f
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	f010803f 	.word	0xf010803f

080026a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Start_IT+0x26>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e040      	b.n	8002750 <HAL_DMA_Start_IT+0xa8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d12f      	bne.n	8002742 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9b8 	bl	8002a6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	223f      	movs	r2, #63	; 0x3f
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0216 	orr.w	r2, r2, #22
 8002716:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0208 	orr.w	r2, r2, #8
 800272e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e005      	b.n	800274e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002764:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <HAL_DMA_IRQHandler+0x248>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a8e      	ldr	r2, [pc, #568]	; (80029a4 <HAL_DMA_IRQHandler+0x24c>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2208      	movs	r2, #8
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01a      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2208      	movs	r2, #8
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2204      	movs	r2, #4
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2204      	movs	r2, #4
 800281e:	409a      	lsls	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2210      	movs	r2, #16
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d043      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03c      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2210      	movs	r2, #16
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d018      	beq.n	800289a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d024      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
 8002886:	e01f      	b.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e016      	b.n	80028c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0208 	bic.w	r2, r2, #8
 80028b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2220      	movs	r2, #32
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 808f 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8087 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2220      	movs	r2, #32
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d136      	bne.n	8002970 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0216 	bic.w	r2, r2, #22
 8002910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002920:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_DMA_IRQHandler+0x1da>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0208 	bic.w	r2, r2, #8
 8002940:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	223f      	movs	r2, #63	; 0x3f
 8002948:	409a      	lsls	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	2b00      	cmp	r3, #0
 8002964:	d07e      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
        }
        return;
 800296e:	e079      	b.n	8002a64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	2b00      	cmp	r3, #0
 8002992:	d031      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e02c      	b.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000
 80029a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d023      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e01e      	b.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0210 	bic.w	r2, r2, #16
 80029d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d032      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d022      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2205      	movs	r2, #5
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d307      	bcc.n	8002a40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f2      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x2cc>
 8002a3e:	e000      	b.n	8002a42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e000      	b.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a64:	bf00      	nop
    }
  }
}
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d108      	bne.n	8002aac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aaa:	e007      	b.n	8002abc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3b10      	subs	r3, #16
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <DMA_CalcBaseAndBitshift+0x64>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d909      	bls.n	8002b0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	; 0x58
 8002b08:	e007      	b.n	8002b1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	aaaaaaab 	.word	0xaaaaaaab
 8002b30:	0800847c 	.word	0x0800847c

08002b34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11f      	bne.n	8002b8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d856      	bhi.n	8002c02 <DMA_CheckFifoParam+0xce>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <DMA_CheckFifoParam+0x28>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b7f 	.word	0x08002b7f
 8002b64:	08002b6d 	.word	0x08002b6d
 8002b68:	08002c03 	.word	0x08002c03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d046      	beq.n	8002c06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e043      	b.n	8002c06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b86:	d140      	bne.n	8002c0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8c:	e03d      	b.n	8002c0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	d121      	bne.n	8002bdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d837      	bhi.n	8002c0e <DMA_CheckFifoParam+0xda>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x70>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bbb 	.word	0x08002bbb
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002bcd 	.word	0x08002bcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e030      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d025      	beq.n	8002c12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bca:	e022      	b.n	8002c12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bda:	e01c      	b.n	8002c16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d903      	bls.n	8002bea <DMA_CheckFifoParam+0xb6>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d003      	beq.n	8002bf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002be8:	e018      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      break;
 8002bee:	e015      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e00b      	b.n	8002c1a <DMA_CheckFifoParam+0xe6>
      break;
 8002c02:	bf00      	nop
 8002c04:	e00a      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
 8002c08:	e008      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e006      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e004      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e159      	b.n	8002efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	f040 8148 	bne.w	8002ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d005      	beq.n	8002c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d130      	bne.n	8002ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 0201 	and.w	r2, r3, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d017      	beq.n	8002d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d123      	bne.n	8002d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a2 	beq.w	8002ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dce:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <HAL_GPIO_Init+0x2ec>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <HAL_GPIO_Init+0x2f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d019      	beq.n	8002e2e <HAL_GPIO_Init+0x202>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2f4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0x1fe>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a47      	ldr	r2, [pc, #284]	; (8002f24 <HAL_GPIO_Init+0x2f8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <HAL_GPIO_Init+0x1fa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_GPIO_Init+0x2fc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x1f6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_GPIO_Init+0x300>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_GPIO_Init+0x1f2>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e40:	4935      	ldr	r1, [pc, #212]	; (8002f18 <HAL_GPIO_Init+0x2ec>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f aea2 	bls.w	8002c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40013c00 	.word	0x40013c00

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e267      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d075      	beq.n	8003072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00c      	beq.n	8002fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f92:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4b7e      	ldr	r3, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05b      	beq.n	8003070 <HAL_RCC_OscConfig+0x108>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d157      	bne.n	8003070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e242      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x74>
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6f      	ldr	r2, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6c      	ldr	r2, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8003000:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fd8e 	bl	8001b40 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fd8a 	bl	8001b40 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e207      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xc0>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fd7a 	bl	8001b40 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fd76 	bl	8001b40 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1f3      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0xe8>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d063      	beq.n	8003146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e1c7      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4937      	ldr	r1, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e03a      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x244>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fd2f 	bl	8001b40 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe fd2b 	bl	8001b40 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1a8      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e015      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_OscConfig+0x244>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fd0e 	bl	8001b40 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe fd0a 	bl	8001b40 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e187      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d036      	beq.n	80031c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x248>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fcee 	bl	8001b40 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fcea 	bl	8001b40 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e167      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x200>
 8003186:	e01b      	b.n	80031c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_OscConfig+0x248>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fcd7 	bl	8001b40 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00e      	b.n	80031b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe fcd3 	bl	8001b40 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d907      	bls.n	80031b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e150      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ea      	bne.n	8003196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8097 	beq.w	80032fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b7d      	ldr	r3, [pc, #500]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b77      	ldr	r3, [pc, #476]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b74      	ldr	r3, [pc, #464]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a73      	ldr	r2, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe fc93 	bl	8001b40 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe fc8f 	bl	8001b40 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e10c      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x2ea>
 8003244:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a63      	ldr	r2, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0x324>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x30c>
 800325a:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x324>
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a57      	ldr	r2, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 0304 	bic.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fc54 	bl	8001b40 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe fc50 	bl	8001b40 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0cb      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ee      	beq.n	800329c <HAL_RCC_OscConfig+0x334>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c0:	f7fe fc3e 	bl	8001b40 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe fc3a 	bl	8001b40 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0b5      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ee      	bne.n	80032c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a1 	beq.w	8003448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d05c      	beq.n	80033cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d141      	bne.n	800339e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fc0e 	bl	8001b40 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fc0a 	bl	8001b40 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e087      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	491b      	ldr	r1, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fe fbe3 	bl	8001b40 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe fbdf 	bl	8001b40 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e05c      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x416>
 800339c:	e054      	b.n	8003448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fbcc 	bl	8001b40 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fbc8 	bl	8001b40 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e045      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x444>
 80033ca:	e03d      	b.n	8003448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e038      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x4ec>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d028      	beq.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d121      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d11a      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	4293      	cmp	r3, r2
 800341e:	d111      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0cc      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b68      	ldr	r3, [pc, #416]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d90c      	bls.n	8003494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b59      	ldr	r3, [pc, #356]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	494d      	ldr	r1, [pc, #308]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d044      	beq.n	8003578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d119      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d003      	beq.n	8003516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003512:	2b03      	cmp	r3, #3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e06f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e067      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4934      	ldr	r1, [pc, #208]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003548:	f7fe fafa 	bl	8001b40 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7fe faf6 	bl	8001b40 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e04f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 020c 	and.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	429a      	cmp	r2, r3
 8003576:	d1eb      	bne.n	8003550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d20c      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e032      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4916      	ldr	r1, [pc, #88]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490e      	ldr	r1, [pc, #56]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490a      	ldr	r1, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fa5a 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023c00 	.word	0x40023c00
 8003614:	40023800 	.word	0x40023800
 8003618:	08008464 	.word	0x08008464
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b094      	sub	sp, #80	; 0x50
 800362a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
 8003630:	2300      	movs	r3, #0
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003634:	2300      	movs	r3, #0
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363c:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d00d      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x40>
 8003648:	2b08      	cmp	r3, #8
 800364a:	f200 80e1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x3a>
 8003656:	e0db      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800365c:	e0db      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_GetSysClockFreq+0x208>)
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003662:	e0d8      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366e:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d063      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2200      	movs	r2, #0
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
 8003684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
 8003692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a8:	0150      	lsls	r0, r2, #5
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4621      	mov	r1, r4
 80036b0:	1a51      	subs	r1, r2, r1
 80036b2:	6139      	str	r1, [r7, #16]
 80036b4:	4629      	mov	r1, r5
 80036b6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c8:	4659      	mov	r1, fp
 80036ca:	018b      	lsls	r3, r1, #6
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036d2:	4651      	mov	r1, sl
 80036d4:	018a      	lsls	r2, r1, #6
 80036d6:	4651      	mov	r1, sl
 80036d8:	ebb2 0801 	subs.w	r8, r2, r1
 80036dc:	4659      	mov	r1, fp
 80036de:	eb63 0901 	sbc.w	r9, r3, r1
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	eb18 0303 	adds.w	r3, r8, r3
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	462b      	mov	r3, r5
 8003704:	eb49 0303 	adc.w	r3, r9, r3
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003716:	4629      	mov	r1, r5
 8003718:	024b      	lsls	r3, r1, #9
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003720:	4621      	mov	r1, r4
 8003722:	024a      	lsls	r2, r1, #9
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003734:	f7fd fa90 	bl	8000c58 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	e058      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	4618      	mov	r0, r3
 800374c:	4611      	mov	r1, r2
 800374e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0159      	lsls	r1, r3, #5
 800376a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376e:	0150      	lsls	r0, r2, #5
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4641      	mov	r1, r8
 8003776:	ebb2 0a01 	subs.w	sl, r2, r1
 800377a:	4649      	mov	r1, r9
 800377c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800378c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003794:	ebb2 040a 	subs.w	r4, r2, sl
 8003798:	eb63 050b 	sbc.w	r5, r3, fp
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	00eb      	lsls	r3, r5, #3
 80037a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037aa:	00e2      	lsls	r2, r4, #3
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	18e3      	adds	r3, r4, r3
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	464b      	mov	r3, r9
 80037b8:	eb45 0303 	adc.w	r3, r5, r3
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ca:	4629      	mov	r1, r5
 80037cc:	028b      	lsls	r3, r1, #10
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d4:	4621      	mov	r1, r4
 80037d6:	028a      	lsls	r2, r1, #10
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	2200      	movs	r2, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	61fa      	str	r2, [r7, #28]
 80037e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e8:	f7fd fa36 	bl	8000c58 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003818:	4618      	mov	r0, r3
 800381a:	3750      	adds	r7, #80	; 0x50
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	08008474 	.word	0x08008474

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003874:	f7ff ffdc 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0b5b      	lsrs	r3, r3, #13
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	08008474 	.word	0x08008474

08003898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e041      	b.n	800392e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd ff14 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fa88 	bl	8003dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e044      	b.n	80039da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d013      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d010      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	e007      	b.n	80039d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0202 	mvn.w	r2, #2
 8003a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9b5 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9a7 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f9b8 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0204 	mvn.w	r2, #4
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f98b 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f97d 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f98e 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0208 	mvn.w	r2, #8
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f961 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f953 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f964 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0210 	mvn.w	r2, #16
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f937 	bl	8003dae <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f929 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f93a 	bl	8003dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0201 	mvn.w	r2, #1
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fa60 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fab2 	bl	8004110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8ff 	bl	8003dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0220 	mvn.w	r2, #32
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa7c 	bl	80040fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIM_ConfigClockSource+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0b4      	b.n	8003d92 <HAL_TIM_ConfigClockSource+0x186>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	d03e      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	f200 8087 	bhi.w	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	f000 8086 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x172>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	d87f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b70      	cmp	r3, #112	; 0x70
 8003c7a:	d01a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c7c:	2b70      	cmp	r3, #112	; 0x70
 8003c7e:	d87b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d050      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x11a>
 8003c84:	2b60      	cmp	r3, #96	; 0x60
 8003c86:	d877      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b50      	cmp	r3, #80	; 0x50
 8003c8a:	d03c      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xfa>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	d873      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d058      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x13a>
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d86f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	d064      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d86b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d060      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d867      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05c      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d05a      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb0:	e062      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f000 f98d 	bl	8003fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	609a      	str	r2, [r3, #8]
      break;
 8003cde:	e04f      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f000 f976 	bl	8003fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d02:	609a      	str	r2, [r3, #8]
      break;
 8003d04:	e03c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 f8ea 	bl	8003eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2150      	movs	r1, #80	; 0x50
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f943 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d24:	e02c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 f909 	bl	8003f4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2160      	movs	r1, #96	; 0x60
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f933 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d44:	e01c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8ca 	bl	8003eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2140      	movs	r1, #64	; 0x40
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f923 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d64:	e00c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f91a 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 8003d76:	e003      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e000      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a34      	ldr	r2, [pc, #208]	; (8003ed0 <TIM_Base_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <TIM_Base_SetConfig+0x38>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0x38>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <TIM_Base_SetConfig+0xe8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0x38>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <TIM_Base_SetConfig+0xec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0x38>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <TIM_Base_SetConfig+0xf0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <TIM_Base_SetConfig+0xe4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01b      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d017      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <TIM_Base_SetConfig+0xe8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <TIM_Base_SetConfig+0xec>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <TIM_Base_SetConfig+0xf0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <TIM_Base_SetConfig+0xf4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <TIM_Base_SetConfig+0xf8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <TIM_Base_SetConfig+0xfc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <TIM_Base_SetConfig+0xe4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 030a 	bic.w	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	431a      	orrs	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004034:	2302      	movs	r3, #2
 8004036:	e050      	b.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d013      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10c      	bne.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000

080040fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e03f      	b.n	80041b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fb0a 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f929 	bl	80043c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800419c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08a      	sub	sp, #40	; 0x28
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d17c      	bne.n	80042d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_UART_Transmit+0x2c>
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e075      	b.n	80042da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Transmit+0x3e>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e06e      	b.n	80042da <HAL_UART_Transmit+0x11c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004212:	f7fd fc95 	bl	8001b40 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422c:	d108      	bne.n	8004240 <HAL_UART_Transmit+0x82>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e003      	b.n	8004248 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004250:	e02a      	b.n	80042a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f840 	bl	80042e2 <UART_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e036      	b.n	80042da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3302      	adds	r3, #2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e007      	b.n	800429a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1cf      	bne.n	8004252 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2140      	movs	r1, #64	; 0x40
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f810 	bl	80042e2 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e006      	b.n	80042da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b090      	sub	sp, #64	; 0x40
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	603b      	str	r3, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	e050      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d04c      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <UART_WaitOnFlagUntilTimeout+0x30>
 8004302:	f7fd fc1d 	bl	8001b40 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800430e:	429a      	cmp	r2, r3
 8004310:	d241      	bcs.n	8004396 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004332:	637a      	str	r2, [r7, #52]	; 0x34
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3314      	adds	r3, #20
 8004364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004366:	623a      	str	r2, [r7, #32]
 8004368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	61bb      	str	r3, [r7, #24]
   return(result);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e00f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d09f      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3740      	adds	r7, #64	; 0x40
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c4:	b0c0      	sub	sp, #256	; 0x100
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	68d9      	ldr	r1, [r3, #12]
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	ea40 0301 	orr.w	r3, r0, r1
 80043e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004418:	f021 010c 	bic.w	r1, r1, #12
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004426:	430b      	orrs	r3, r1
 8004428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443a:	6999      	ldr	r1, [r3, #24]
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	ea40 0301 	orr.w	r3, r0, r1
 8004446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b8f      	ldr	r3, [pc, #572]	; (800468c <UART_SetConfig+0x2cc>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d005      	beq.n	8004460 <UART_SetConfig+0xa0>
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b8d      	ldr	r3, [pc, #564]	; (8004690 <UART_SetConfig+0x2d0>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d104      	bne.n	800446a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7ff fa06 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004468:	e003      	b.n	8004472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446a:	f7ff f9ed 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800446e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447c:	f040 810c 	bne.w	8004698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800448a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800448e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	1891      	adds	r1, r2, r2
 8004498:	65b9      	str	r1, [r7, #88]	; 0x58
 800449a:	415b      	adcs	r3, r3
 800449c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800449e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044a2:	4621      	mov	r1, r4
 80044a4:	eb12 0801 	adds.w	r8, r2, r1
 80044a8:	4629      	mov	r1, r5
 80044aa:	eb43 0901 	adc.w	r9, r3, r1
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c2:	4690      	mov	r8, r2
 80044c4:	4699      	mov	r9, r3
 80044c6:	4623      	mov	r3, r4
 80044c8:	eb18 0303 	adds.w	r3, r8, r3
 80044cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044d0:	462b      	mov	r3, r5
 80044d2:	eb49 0303 	adc.w	r3, r9, r3
 80044d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ee:	460b      	mov	r3, r1
 80044f0:	18db      	adds	r3, r3, r3
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
 80044f4:	4613      	mov	r3, r2
 80044f6:	eb42 0303 	adc.w	r3, r2, r3
 80044fa:	657b      	str	r3, [r7, #84]	; 0x54
 80044fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004504:	f7fc fba8 	bl	8000c58 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4b61      	ldr	r3, [pc, #388]	; (8004694 <UART_SetConfig+0x2d4>)
 800450e:	fba3 2302 	umull	r2, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	011c      	lsls	r4, r3, #4
 8004516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004530:	415b      	adcs	r3, r3
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004538:	4641      	mov	r1, r8
 800453a:	eb12 0a01 	adds.w	sl, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb43 0b01 	adc.w	fp, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004558:	4692      	mov	sl, r2
 800455a:	469b      	mov	fp, r3
 800455c:	4643      	mov	r3, r8
 800455e:	eb1a 0303 	adds.w	r3, sl, r3
 8004562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004566:	464b      	mov	r3, r9
 8004568:	eb4b 0303 	adc.w	r3, fp, r3
 800456c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800457c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004584:	460b      	mov	r3, r1
 8004586:	18db      	adds	r3, r3, r3
 8004588:	643b      	str	r3, [r7, #64]	; 0x40
 800458a:	4613      	mov	r3, r2
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
 8004592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800459a:	f7fc fb5d 	bl	8000c58 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4611      	mov	r1, r2
 80045a4:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <UART_SetConfig+0x2d4>)
 80045a6:	fba3 2301 	umull	r2, r3, r3, r1
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2264      	movs	r2, #100	; 0x64
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	1acb      	subs	r3, r1, r3
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <UART_SetConfig+0x2d4>)
 80045bc:	fba3 2302 	umull	r2, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045c8:	441c      	add	r4, r3
 80045ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045e4:	415b      	adcs	r3, r3
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6339      	str	r1, [r7, #48]	; 0x30
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004620:	464b      	mov	r3, r9
 8004622:	460a      	mov	r2, r1
 8004624:	eb42 0303 	adc.w	r3, r2, r3
 8004628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800463c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004640:	460b      	mov	r3, r1
 8004642:	18db      	adds	r3, r3, r3
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	4613      	mov	r3, r2
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004656:	f7fc faff 	bl	8000c58 <__aeabi_uldivmod>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <UART_SetConfig+0x2d4>)
 8004660:	fba3 1302 	umull	r1, r3, r3, r2
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	2164      	movs	r1, #100	; 0x64
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	3332      	adds	r3, #50	; 0x32
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <UART_SetConfig+0x2d4>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	f003 0207 	and.w	r2, r3, #7
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4422      	add	r2, r4
 8004686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004688:	e106      	b.n	8004898 <UART_SetConfig+0x4d8>
 800468a:	bf00      	nop
 800468c:	40011000 	.word	0x40011000
 8004690:	40011400 	.word	0x40011400
 8004694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046aa:	4642      	mov	r2, r8
 80046ac:	464b      	mov	r3, r9
 80046ae:	1891      	adds	r1, r2, r2
 80046b0:	6239      	str	r1, [r7, #32]
 80046b2:	415b      	adcs	r3, r3
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
 80046b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ba:	4641      	mov	r1, r8
 80046bc:	1854      	adds	r4, r2, r1
 80046be:	4649      	mov	r1, r9
 80046c0:	eb43 0501 	adc.w	r5, r3, r1
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	00eb      	lsls	r3, r5, #3
 80046ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d2:	00e2      	lsls	r2, r4, #3
 80046d4:	4614      	mov	r4, r2
 80046d6:	461d      	mov	r5, r3
 80046d8:	4643      	mov	r3, r8
 80046da:	18e3      	adds	r3, r4, r3
 80046dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e0:	464b      	mov	r3, r9
 80046e2:	eb45 0303 	adc.w	r3, r5, r3
 80046e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004706:	4629      	mov	r1, r5
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004710:	4621      	mov	r1, r4
 8004712:	008a      	lsls	r2, r1, #2
 8004714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004718:	f7fc fa9e 	bl	8000c58 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4b60      	ldr	r3, [pc, #384]	; (80048a4 <UART_SetConfig+0x4e4>)
 8004722:	fba3 2302 	umull	r2, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	011c      	lsls	r4, r3, #4
 800472a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800472e:	2200      	movs	r2, #0
 8004730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	1891      	adds	r1, r2, r2
 8004742:	61b9      	str	r1, [r7, #24]
 8004744:	415b      	adcs	r3, r3
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474c:	4641      	mov	r1, r8
 800474e:	1851      	adds	r1, r2, r1
 8004750:	6139      	str	r1, [r7, #16]
 8004752:	4649      	mov	r1, r9
 8004754:	414b      	adcs	r3, r1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004764:	4659      	mov	r1, fp
 8004766:	00cb      	lsls	r3, r1, #3
 8004768:	4651      	mov	r1, sl
 800476a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476e:	4651      	mov	r1, sl
 8004770:	00ca      	lsls	r2, r1, #3
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	4603      	mov	r3, r0
 8004778:	4642      	mov	r2, r8
 800477a:	189b      	adds	r3, r3, r2
 800477c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004780:	464b      	mov	r3, r9
 8004782:	460a      	mov	r2, r1
 8004784:	eb42 0303 	adc.w	r3, r2, r3
 8004788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	67bb      	str	r3, [r7, #120]	; 0x78
 8004796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047a4:	4649      	mov	r1, r9
 80047a6:	008b      	lsls	r3, r1, #2
 80047a8:	4641      	mov	r1, r8
 80047aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ae:	4641      	mov	r1, r8
 80047b0:	008a      	lsls	r2, r1, #2
 80047b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047b6:	f7fc fa4f 	bl	8000c58 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <UART_SetConfig+0x4e4>)
 80047c2:	fba3 2301 	umull	r2, r3, r3, r1
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2264      	movs	r2, #100	; 0x64
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	1acb      	subs	r3, r1, r3
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <UART_SetConfig+0x4e4>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e0:	441c      	add	r4, r3
 80047e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e6:	2200      	movs	r2, #0
 80047e8:	673b      	str	r3, [r7, #112]	; 0x70
 80047ea:	677a      	str	r2, [r7, #116]	; 0x74
 80047ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	415b      	adcs	r3, r3
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004800:	4641      	mov	r1, r8
 8004802:	1851      	adds	r1, r2, r1
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	4649      	mov	r1, r9
 8004808:	414b      	adcs	r3, r1
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004818:	4659      	mov	r1, fp
 800481a:	00cb      	lsls	r3, r1, #3
 800481c:	4651      	mov	r1, sl
 800481e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004822:	4651      	mov	r1, sl
 8004824:	00ca      	lsls	r2, r1, #3
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	4603      	mov	r3, r0
 800482c:	4642      	mov	r2, r8
 800482e:	189b      	adds	r3, r3, r2
 8004830:	66bb      	str	r3, [r7, #104]	; 0x68
 8004832:	464b      	mov	r3, r9
 8004834:	460a      	mov	r2, r1
 8004836:	eb42 0303 	adc.w	r3, r2, r3
 800483a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
 8004846:	667a      	str	r2, [r7, #100]	; 0x64
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004854:	4649      	mov	r1, r9
 8004856:	008b      	lsls	r3, r1, #2
 8004858:	4641      	mov	r1, r8
 800485a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485e:	4641      	mov	r1, r8
 8004860:	008a      	lsls	r2, r1, #2
 8004862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004866:	f7fc f9f7 	bl	8000c58 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <UART_SetConfig+0x4e4>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	2164      	movs	r1, #100	; 0x64
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	3332      	adds	r3, #50	; 0x32
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <UART_SetConfig+0x4e4>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	f003 020f 	and.w	r2, r3, #15
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4422      	add	r2, r4
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800489e:	46bd      	mov	sp, r7
 80048a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <__cvt>:
 80048a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	ec55 4b10 	vmov	r4, r5, d0
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	460e      	mov	r6, r1
 80048b4:	4619      	mov	r1, r3
 80048b6:	462b      	mov	r3, r5
 80048b8:	bfbb      	ittet	lt
 80048ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048be:	461d      	movlt	r5, r3
 80048c0:	2300      	movge	r3, #0
 80048c2:	232d      	movlt	r3, #45	; 0x2d
 80048c4:	700b      	strb	r3, [r1, #0]
 80048c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048cc:	4691      	mov	r9, r2
 80048ce:	f023 0820 	bic.w	r8, r3, #32
 80048d2:	bfbc      	itt	lt
 80048d4:	4622      	movlt	r2, r4
 80048d6:	4614      	movlt	r4, r2
 80048d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048dc:	d005      	beq.n	80048ea <__cvt+0x42>
 80048de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048e2:	d100      	bne.n	80048e6 <__cvt+0x3e>
 80048e4:	3601      	adds	r6, #1
 80048e6:	2102      	movs	r1, #2
 80048e8:	e000      	b.n	80048ec <__cvt+0x44>
 80048ea:	2103      	movs	r1, #3
 80048ec:	ab03      	add	r3, sp, #12
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	ab02      	add	r3, sp, #8
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	ec45 4b10 	vmov	d0, r4, r5
 80048f8:	4653      	mov	r3, sl
 80048fa:	4632      	mov	r2, r6
 80048fc:	f000 fe68 	bl	80055d0 <_dtoa_r>
 8004900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004904:	4607      	mov	r7, r0
 8004906:	d102      	bne.n	800490e <__cvt+0x66>
 8004908:	f019 0f01 	tst.w	r9, #1
 800490c:	d022      	beq.n	8004954 <__cvt+0xac>
 800490e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004912:	eb07 0906 	add.w	r9, r7, r6
 8004916:	d110      	bne.n	800493a <__cvt+0x92>
 8004918:	783b      	ldrb	r3, [r7, #0]
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d10a      	bne.n	8004934 <__cvt+0x8c>
 800491e:	2200      	movs	r2, #0
 8004920:	2300      	movs	r3, #0
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fc f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800492a:	b918      	cbnz	r0, 8004934 <__cvt+0x8c>
 800492c:	f1c6 0601 	rsb	r6, r6, #1
 8004930:	f8ca 6000 	str.w	r6, [sl]
 8004934:	f8da 3000 	ldr.w	r3, [sl]
 8004938:	4499      	add	r9, r3
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	f7fc f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004946:	b108      	cbz	r0, 800494c <__cvt+0xa4>
 8004948:	f8cd 900c 	str.w	r9, [sp, #12]
 800494c:	2230      	movs	r2, #48	; 0x30
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	454b      	cmp	r3, r9
 8004952:	d307      	bcc.n	8004964 <__cvt+0xbc>
 8004954:	9b03      	ldr	r3, [sp, #12]
 8004956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004958:	1bdb      	subs	r3, r3, r7
 800495a:	4638      	mov	r0, r7
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	b004      	add	sp, #16
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	9103      	str	r1, [sp, #12]
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e7f0      	b.n	800494e <__cvt+0xa6>

0800496c <__exponent>:
 800496c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496e:	4603      	mov	r3, r0
 8004970:	2900      	cmp	r1, #0
 8004972:	bfb8      	it	lt
 8004974:	4249      	neglt	r1, r1
 8004976:	f803 2b02 	strb.w	r2, [r3], #2
 800497a:	bfb4      	ite	lt
 800497c:	222d      	movlt	r2, #45	; 0x2d
 800497e:	222b      	movge	r2, #43	; 0x2b
 8004980:	2909      	cmp	r1, #9
 8004982:	7042      	strb	r2, [r0, #1]
 8004984:	dd2a      	ble.n	80049dc <__exponent+0x70>
 8004986:	f10d 0207 	add.w	r2, sp, #7
 800498a:	4617      	mov	r7, r2
 800498c:	260a      	movs	r6, #10
 800498e:	4694      	mov	ip, r2
 8004990:	fb91 f5f6 	sdiv	r5, r1, r6
 8004994:	fb06 1415 	mls	r4, r6, r5, r1
 8004998:	3430      	adds	r4, #48	; 0x30
 800499a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800499e:	460c      	mov	r4, r1
 80049a0:	2c63      	cmp	r4, #99	; 0x63
 80049a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80049a6:	4629      	mov	r1, r5
 80049a8:	dcf1      	bgt.n	800498e <__exponent+0x22>
 80049aa:	3130      	adds	r1, #48	; 0x30
 80049ac:	f1ac 0402 	sub.w	r4, ip, #2
 80049b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049b4:	1c41      	adds	r1, r0, #1
 80049b6:	4622      	mov	r2, r4
 80049b8:	42ba      	cmp	r2, r7
 80049ba:	d30a      	bcc.n	80049d2 <__exponent+0x66>
 80049bc:	f10d 0209 	add.w	r2, sp, #9
 80049c0:	eba2 020c 	sub.w	r2, r2, ip
 80049c4:	42bc      	cmp	r4, r7
 80049c6:	bf88      	it	hi
 80049c8:	2200      	movhi	r2, #0
 80049ca:	4413      	add	r3, r2
 80049cc:	1a18      	subs	r0, r3, r0
 80049ce:	b003      	add	sp, #12
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049da:	e7ed      	b.n	80049b8 <__exponent+0x4c>
 80049dc:	2330      	movs	r3, #48	; 0x30
 80049de:	3130      	adds	r1, #48	; 0x30
 80049e0:	7083      	strb	r3, [r0, #2]
 80049e2:	70c1      	strb	r1, [r0, #3]
 80049e4:	1d03      	adds	r3, r0, #4
 80049e6:	e7f1      	b.n	80049cc <__exponent+0x60>

080049e8 <_printf_float>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	ed2d 8b02 	vpush	{d8}
 80049f0:	b08d      	sub	sp, #52	; 0x34
 80049f2:	460c      	mov	r4, r1
 80049f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049f8:	4616      	mov	r6, r2
 80049fa:	461f      	mov	r7, r3
 80049fc:	4605      	mov	r5, r0
 80049fe:	f000 fce9 	bl	80053d4 <_localeconv_r>
 8004a02:	f8d0 a000 	ldr.w	sl, [r0]
 8004a06:	4650      	mov	r0, sl
 8004a08:	f7fb fc3a 	bl	8000280 <strlen>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	9305      	str	r3, [sp, #20]
 8004a14:	f8d8 3000 	ldr.w	r3, [r8]
 8004a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	f103 0208 	add.w	r2, r3, #8
 8004a26:	f8c8 2000 	str.w	r2, [r8]
 8004a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a38:	ee08 0a10 	vmov	s16, r0
 8004a3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a44:	4b9e      	ldr	r3, [pc, #632]	; (8004cc0 <_printf_float+0x2d8>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	f7fc f877 	bl	8000b3c <__aeabi_dcmpun>
 8004a4e:	bb88      	cbnz	r0, 8004ab4 <_printf_float+0xcc>
 8004a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a54:	4b9a      	ldr	r3, [pc, #616]	; (8004cc0 <_printf_float+0x2d8>)
 8004a56:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5a:	f7fc f851 	bl	8000b00 <__aeabi_dcmple>
 8004a5e:	bb48      	cbnz	r0, 8004ab4 <_printf_float+0xcc>
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fc f840 	bl	8000aec <__aeabi_dcmplt>
 8004a6c:	b110      	cbz	r0, 8004a74 <_printf_float+0x8c>
 8004a6e:	232d      	movs	r3, #45	; 0x2d
 8004a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a74:	4a93      	ldr	r2, [pc, #588]	; (8004cc4 <_printf_float+0x2dc>)
 8004a76:	4b94      	ldr	r3, [pc, #592]	; (8004cc8 <_printf_float+0x2e0>)
 8004a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a7c:	bf94      	ite	ls
 8004a7e:	4690      	movls	r8, r2
 8004a80:	4698      	movhi	r8, r3
 8004a82:	2303      	movs	r3, #3
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	9b05      	ldr	r3, [sp, #20]
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	f04f 0900 	mov.w	r9, #0
 8004a92:	9700      	str	r7, [sp, #0]
 8004a94:	4633      	mov	r3, r6
 8004a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f9da 	bl	8004e54 <_printf_common>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f040 8090 	bne.w	8004bc6 <_printf_float+0x1de>
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	b00d      	add	sp, #52	; 0x34
 8004aac:	ecbd 8b02 	vpop	{d8}
 8004ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	4649      	mov	r1, r9
 8004abc:	f7fc f83e 	bl	8000b3c <__aeabi_dcmpun>
 8004ac0:	b140      	cbz	r0, 8004ad4 <_printf_float+0xec>
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bfbc      	itt	lt
 8004ac8:	232d      	movlt	r3, #45	; 0x2d
 8004aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ace:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <_printf_float+0x2e4>)
 8004ad0:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <_printf_float+0x2e8>)
 8004ad2:	e7d1      	b.n	8004a78 <_printf_float+0x90>
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ada:	9206      	str	r2, [sp, #24]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	d13f      	bne.n	8004b60 <_printf_float+0x178>
 8004ae0:	2306      	movs	r3, #6
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	9b05      	ldr	r3, [sp, #20]
 8004ae6:	6861      	ldr	r1, [r4, #4]
 8004ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004aec:	2300      	movs	r3, #0
 8004aee:	9303      	str	r3, [sp, #12]
 8004af0:	ab0a      	add	r3, sp, #40	; 0x28
 8004af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004af6:	ab09      	add	r3, sp, #36	; 0x24
 8004af8:	ec49 8b10 	vmov	d0, r8, r9
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6022      	str	r2, [r4, #0]
 8004b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b04:	4628      	mov	r0, r5
 8004b06:	f7ff fecf 	bl	80048a8 <__cvt>
 8004b0a:	9b06      	ldr	r3, [sp, #24]
 8004b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b0e:	2b47      	cmp	r3, #71	; 0x47
 8004b10:	4680      	mov	r8, r0
 8004b12:	d108      	bne.n	8004b26 <_printf_float+0x13e>
 8004b14:	1cc8      	adds	r0, r1, #3
 8004b16:	db02      	blt.n	8004b1e <_printf_float+0x136>
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	dd41      	ble.n	8004ba2 <_printf_float+0x1ba>
 8004b1e:	f1ab 0302 	sub.w	r3, fp, #2
 8004b22:	fa5f fb83 	uxtb.w	fp, r3
 8004b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b2a:	d820      	bhi.n	8004b6e <_printf_float+0x186>
 8004b2c:	3901      	subs	r1, #1
 8004b2e:	465a      	mov	r2, fp
 8004b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b34:	9109      	str	r1, [sp, #36]	; 0x24
 8004b36:	f7ff ff19 	bl	800496c <__exponent>
 8004b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b3c:	1813      	adds	r3, r2, r0
 8004b3e:	2a01      	cmp	r2, #1
 8004b40:	4681      	mov	r9, r0
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	dc02      	bgt.n	8004b4c <_printf_float+0x164>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	07d2      	lsls	r2, r2, #31
 8004b4a:	d501      	bpl.n	8004b50 <_printf_float+0x168>
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	6123      	str	r3, [r4, #16]
 8004b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d09c      	beq.n	8004a92 <_printf_float+0xaa>
 8004b58:	232d      	movs	r3, #45	; 0x2d
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	e798      	b.n	8004a92 <_printf_float+0xaa>
 8004b60:	9a06      	ldr	r2, [sp, #24]
 8004b62:	2a47      	cmp	r2, #71	; 0x47
 8004b64:	d1be      	bne.n	8004ae4 <_printf_float+0xfc>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1bc      	bne.n	8004ae4 <_printf_float+0xfc>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e7b9      	b.n	8004ae2 <_printf_float+0xfa>
 8004b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b72:	d118      	bne.n	8004ba6 <_printf_float+0x1be>
 8004b74:	2900      	cmp	r1, #0
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	dd0b      	ble.n	8004b92 <_printf_float+0x1aa>
 8004b7a:	6121      	str	r1, [r4, #16]
 8004b7c:	b913      	cbnz	r3, 8004b84 <_printf_float+0x19c>
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	07d0      	lsls	r0, r2, #31
 8004b82:	d502      	bpl.n	8004b8a <_printf_float+0x1a2>
 8004b84:	3301      	adds	r3, #1
 8004b86:	440b      	add	r3, r1
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b8c:	f04f 0900 	mov.w	r9, #0
 8004b90:	e7de      	b.n	8004b50 <_printf_float+0x168>
 8004b92:	b913      	cbnz	r3, 8004b9a <_printf_float+0x1b2>
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	07d2      	lsls	r2, r2, #31
 8004b98:	d501      	bpl.n	8004b9e <_printf_float+0x1b6>
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	e7f4      	b.n	8004b88 <_printf_float+0x1a0>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e7f2      	b.n	8004b88 <_printf_float+0x1a0>
 8004ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	db05      	blt.n	8004bb8 <_printf_float+0x1d0>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	6121      	str	r1, [r4, #16]
 8004bb0:	07d8      	lsls	r0, r3, #31
 8004bb2:	d5ea      	bpl.n	8004b8a <_printf_float+0x1a2>
 8004bb4:	1c4b      	adds	r3, r1, #1
 8004bb6:	e7e7      	b.n	8004b88 <_printf_float+0x1a0>
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	bfd4      	ite	le
 8004bbc:	f1c1 0202 	rsble	r2, r1, #2
 8004bc0:	2201      	movgt	r2, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	e7e0      	b.n	8004b88 <_printf_float+0x1a0>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	055a      	lsls	r2, r3, #21
 8004bca:	d407      	bmi.n	8004bdc <_printf_float+0x1f4>
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	4642      	mov	r2, r8
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d12c      	bne.n	8004c34 <_printf_float+0x24c>
 8004bda:	e764      	b.n	8004aa6 <_printf_float+0xbe>
 8004bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004be0:	f240 80e0 	bls.w	8004da4 <_printf_float+0x3bc>
 8004be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	f7fb ff74 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d034      	beq.n	8004c5e <_printf_float+0x276>
 8004bf4:	4a37      	ldr	r2, [pc, #220]	; (8004cd4 <_printf_float+0x2ec>)
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f43f af51 	beq.w	8004aa6 <_printf_float+0xbe>
 8004c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	db02      	blt.n	8004c12 <_printf_float+0x22a>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	07d8      	lsls	r0, r3, #31
 8004c10:	d510      	bpl.n	8004c34 <_printf_float+0x24c>
 8004c12:	ee18 3a10 	vmov	r3, s16
 8004c16:	4652      	mov	r2, sl
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b8      	blx	r7
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f43f af41 	beq.w	8004aa6 <_printf_float+0xbe>
 8004c24:	f04f 0800 	mov.w	r8, #0
 8004c28:	f104 091a 	add.w	r9, r4, #26
 8004c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	4543      	cmp	r3, r8
 8004c32:	dc09      	bgt.n	8004c48 <_printf_float+0x260>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	079b      	lsls	r3, r3, #30
 8004c38:	f100 8107 	bmi.w	8004e4a <_printf_float+0x462>
 8004c3c:	68e0      	ldr	r0, [r4, #12]
 8004c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c40:	4298      	cmp	r0, r3
 8004c42:	bfb8      	it	lt
 8004c44:	4618      	movlt	r0, r3
 8004c46:	e730      	b.n	8004aaa <_printf_float+0xc2>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	464a      	mov	r2, r9
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af27 	beq.w	8004aa6 <_printf_float+0xbe>
 8004c58:	f108 0801 	add.w	r8, r8, #1
 8004c5c:	e7e6      	b.n	8004c2c <_printf_float+0x244>
 8004c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	dc39      	bgt.n	8004cd8 <_printf_float+0x2f0>
 8004c64:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <_printf_float+0x2ec>)
 8004c66:	2301      	movs	r3, #1
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f af19 	beq.w	8004aa6 <_printf_float+0xbe>
 8004c74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d102      	bne.n	8004c82 <_printf_float+0x29a>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	d5d8      	bpl.n	8004c34 <_printf_float+0x24c>
 8004c82:	ee18 3a10 	vmov	r3, s16
 8004c86:	4652      	mov	r2, sl
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	f43f af09 	beq.w	8004aa6 <_printf_float+0xbe>
 8004c94:	f04f 0900 	mov.w	r9, #0
 8004c98:	f104 0a1a 	add.w	sl, r4, #26
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	425b      	negs	r3, r3
 8004ca0:	454b      	cmp	r3, r9
 8004ca2:	dc01      	bgt.n	8004ca8 <_printf_float+0x2c0>
 8004ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca6:	e792      	b.n	8004bce <_printf_float+0x1e6>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4652      	mov	r2, sl
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f aef7 	beq.w	8004aa6 <_printf_float+0xbe>
 8004cb8:	f109 0901 	add.w	r9, r9, #1
 8004cbc:	e7ee      	b.n	8004c9c <_printf_float+0x2b4>
 8004cbe:	bf00      	nop
 8004cc0:	7fefffff 	.word	0x7fefffff
 8004cc4:	08008484 	.word	0x08008484
 8004cc8:	08008488 	.word	0x08008488
 8004ccc:	0800848c 	.word	0x0800848c
 8004cd0:	08008490 	.word	0x08008490
 8004cd4:	08008494 	.word	0x08008494
 8004cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bfa8      	it	ge
 8004ce0:	461a      	movge	r2, r3
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	4691      	mov	r9, r2
 8004ce6:	dc37      	bgt.n	8004d58 <_printf_float+0x370>
 8004ce8:	f04f 0b00 	mov.w	fp, #0
 8004cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cf0:	f104 021a 	add.w	r2, r4, #26
 8004cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	eba3 0309 	sub.w	r3, r3, r9
 8004cfc:	455b      	cmp	r3, fp
 8004cfe:	dc33      	bgt.n	8004d68 <_printf_float+0x380>
 8004d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d04:	429a      	cmp	r2, r3
 8004d06:	db3b      	blt.n	8004d80 <_printf_float+0x398>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	07da      	lsls	r2, r3, #31
 8004d0c:	d438      	bmi.n	8004d80 <_printf_float+0x398>
 8004d0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d12:	eba2 0903 	sub.w	r9, r2, r3
 8004d16:	9b05      	ldr	r3, [sp, #20]
 8004d18:	1ad2      	subs	r2, r2, r3
 8004d1a:	4591      	cmp	r9, r2
 8004d1c:	bfa8      	it	ge
 8004d1e:	4691      	movge	r9, r2
 8004d20:	f1b9 0f00 	cmp.w	r9, #0
 8004d24:	dc35      	bgt.n	8004d92 <_printf_float+0x3aa>
 8004d26:	f04f 0800 	mov.w	r8, #0
 8004d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d2e:	f104 0a1a 	add.w	sl, r4, #26
 8004d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	eba3 0309 	sub.w	r3, r3, r9
 8004d3c:	4543      	cmp	r3, r8
 8004d3e:	f77f af79 	ble.w	8004c34 <_printf_float+0x24c>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4652      	mov	r2, sl
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f aeaa 	beq.w	8004aa6 <_printf_float+0xbe>
 8004d52:	f108 0801 	add.w	r8, r8, #1
 8004d56:	e7ec      	b.n	8004d32 <_printf_float+0x34a>
 8004d58:	4613      	mov	r3, r2
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	d1c0      	bne.n	8004ce8 <_printf_float+0x300>
 8004d66:	e69e      	b.n	8004aa6 <_printf_float+0xbe>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	9205      	str	r2, [sp, #20]
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f ae97 	beq.w	8004aa6 <_printf_float+0xbe>
 8004d78:	9a05      	ldr	r2, [sp, #20]
 8004d7a:	f10b 0b01 	add.w	fp, fp, #1
 8004d7e:	e7b9      	b.n	8004cf4 <_printf_float+0x30c>
 8004d80:	ee18 3a10 	vmov	r3, s16
 8004d84:	4652      	mov	r2, sl
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d1be      	bne.n	8004d0e <_printf_float+0x326>
 8004d90:	e689      	b.n	8004aa6 <_printf_float+0xbe>
 8004d92:	9a05      	ldr	r2, [sp, #20]
 8004d94:	464b      	mov	r3, r9
 8004d96:	4442      	add	r2, r8
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d1c1      	bne.n	8004d26 <_printf_float+0x33e>
 8004da2:	e680      	b.n	8004aa6 <_printf_float+0xbe>
 8004da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004da6:	2a01      	cmp	r2, #1
 8004da8:	dc01      	bgt.n	8004dae <_printf_float+0x3c6>
 8004daa:	07db      	lsls	r3, r3, #31
 8004dac:	d53a      	bpl.n	8004e24 <_printf_float+0x43c>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4642      	mov	r2, r8
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f ae74 	beq.w	8004aa6 <_printf_float+0xbe>
 8004dbe:	ee18 3a10 	vmov	r3, s16
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f ae6b 	beq.w	8004aa6 <_printf_float+0xbe>
 8004dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ddc:	f7fb fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004de0:	b9d8      	cbnz	r0, 8004e1a <_printf_float+0x432>
 8004de2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004de6:	f108 0201 	add.w	r2, r8, #1
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d10e      	bne.n	8004e12 <_printf_float+0x42a>
 8004df4:	e657      	b.n	8004aa6 <_printf_float+0xbe>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae50 	beq.w	8004aa6 <_printf_float+0xbe>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4543      	cmp	r3, r8
 8004e10:	dcf1      	bgt.n	8004df6 <_printf_float+0x40e>
 8004e12:	464b      	mov	r3, r9
 8004e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e18:	e6da      	b.n	8004bd0 <_printf_float+0x1e8>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0a1a 	add.w	sl, r4, #26
 8004e22:	e7f2      	b.n	8004e0a <_printf_float+0x422>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4642      	mov	r2, r8
 8004e28:	e7df      	b.n	8004dea <_printf_float+0x402>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	464a      	mov	r2, r9
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f ae36 	beq.w	8004aa6 <_printf_float+0xbe>
 8004e3a:	f108 0801 	add.w	r8, r8, #1
 8004e3e:	68e3      	ldr	r3, [r4, #12]
 8004e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e42:	1a5b      	subs	r3, r3, r1
 8004e44:	4543      	cmp	r3, r8
 8004e46:	dcf0      	bgt.n	8004e2a <_printf_float+0x442>
 8004e48:	e6f8      	b.n	8004c3c <_printf_float+0x254>
 8004e4a:	f04f 0800 	mov.w	r8, #0
 8004e4e:	f104 0919 	add.w	r9, r4, #25
 8004e52:	e7f4      	b.n	8004e3e <_printf_float+0x456>

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfb8      	it	lt
 8004e68:	4613      	movlt	r3, r2
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e70:	4607      	mov	r7, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc26      	bgt.n	8004eea <_printf_common+0x96>
 8004e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea0:	1e13      	subs	r3, r2, #0
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42b      	bmi.n	8004f04 <_printf_common+0xb0>
 8004eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d01e      	beq.n	8004ef8 <_printf_common+0xa4>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf02      	ittt	eq
 8004ec6:	68e5      	ldreq	r5, [r4, #12]
 8004ec8:	6833      	ldreq	r3, [r6, #0]
 8004eca:	1aed      	subeq	r5, r5, r3
 8004ecc:	68a3      	ldr	r3, [r4, #8]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	2600      	movs	r6, #0
 8004ee0:	341a      	adds	r4, #26
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	d11a      	bne.n	8004f1c <_printf_common+0xc8>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e008      	b.n	8004efc <_printf_common+0xa8>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4652      	mov	r2, sl
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d103      	bne.n	8004f00 <_printf_common+0xac>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7c6      	b.n	8004e92 <_printf_common+0x3e>
 8004f04:	18e1      	adds	r1, r4, r3
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	2030      	movs	r0, #48	; 0x30
 8004f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f0e:	4422      	add	r2, r4
 8004f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f18:	3302      	adds	r3, #2
 8004f1a:	e7c7      	b.n	8004eac <_printf_common+0x58>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4649      	mov	r1, r9
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	3001      	adds	r0, #1
 8004f28:	d0e6      	beq.n	8004ef8 <_printf_common+0xa4>
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7d9      	b.n	8004ee2 <_printf_common+0x8e>
	...

08004f30 <_printf_i>:
 8004f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	7e0f      	ldrb	r7, [r1, #24]
 8004f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f38:	2f78      	cmp	r7, #120	; 0x78
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	469a      	mov	sl, r3
 8004f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f46:	d807      	bhi.n	8004f58 <_printf_i+0x28>
 8004f48:	2f62      	cmp	r7, #98	; 0x62
 8004f4a:	d80a      	bhi.n	8004f62 <_printf_i+0x32>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	f000 80d4 	beq.w	80050fa <_printf_i+0x1ca>
 8004f52:	2f58      	cmp	r7, #88	; 0x58
 8004f54:	f000 80c0 	beq.w	80050d8 <_printf_i+0x1a8>
 8004f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f60:	e03a      	b.n	8004fd8 <_printf_i+0xa8>
 8004f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f66:	2b15      	cmp	r3, #21
 8004f68:	d8f6      	bhi.n	8004f58 <_printf_i+0x28>
 8004f6a:	a101      	add	r1, pc, #4	; (adr r1, 8004f70 <_printf_i+0x40>)
 8004f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004f59 	.word	0x08004f59
 8004f7c:	08004f59 	.word	0x08004f59
 8004f80:	08004f59 	.word	0x08004f59
 8004f84:	08004f59 	.word	0x08004f59
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f59 	.word	0x08004f59
 8004f90:	08004f59 	.word	0x08004f59
 8004f94:	08004f59 	.word	0x08004f59
 8004f98:	08004f59 	.word	0x08004f59
 8004f9c:	080050e1 	.word	0x080050e1
 8004fa0:	08005009 	.word	0x08005009
 8004fa4:	0800509b 	.word	0x0800509b
 8004fa8:	08004f59 	.word	0x08004f59
 8004fac:	08004f59 	.word	0x08004f59
 8004fb0:	08005103 	.word	0x08005103
 8004fb4:	08004f59 	.word	0x08004f59
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	08004f59 	.word	0x08004f59
 8004fc0:	08004f59 	.word	0x08004f59
 8004fc4:	080050a3 	.word	0x080050a3
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	602a      	str	r2, [r5, #0]
 8004fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09f      	b.n	800511c <_printf_i+0x1ec>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	0607      	lsls	r7, r0, #24
 8004fe2:	f103 0104 	add.w	r1, r3, #4
 8004fe6:	6029      	str	r1, [r5, #0]
 8004fe8:	d501      	bpl.n	8004fee <_printf_i+0xbe>
 8004fea:	681e      	ldr	r6, [r3, #0]
 8004fec:	e003      	b.n	8004ff6 <_printf_i+0xc6>
 8004fee:	0646      	lsls	r6, r0, #25
 8004ff0:	d5fb      	bpl.n	8004fea <_printf_i+0xba>
 8004ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	da03      	bge.n	8005002 <_printf_i+0xd2>
 8004ffa:	232d      	movs	r3, #45	; 0x2d
 8004ffc:	4276      	negs	r6, r6
 8004ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005002:	485a      	ldr	r0, [pc, #360]	; (800516c <_printf_i+0x23c>)
 8005004:	230a      	movs	r3, #10
 8005006:	e012      	b.n	800502e <_printf_i+0xfe>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	1d19      	adds	r1, r3, #4
 800500e:	6029      	str	r1, [r5, #0]
 8005010:	0605      	lsls	r5, r0, #24
 8005012:	d501      	bpl.n	8005018 <_printf_i+0xe8>
 8005014:	681e      	ldr	r6, [r3, #0]
 8005016:	e002      	b.n	800501e <_printf_i+0xee>
 8005018:	0641      	lsls	r1, r0, #25
 800501a:	d5fb      	bpl.n	8005014 <_printf_i+0xe4>
 800501c:	881e      	ldrh	r6, [r3, #0]
 800501e:	4853      	ldr	r0, [pc, #332]	; (800516c <_printf_i+0x23c>)
 8005020:	2f6f      	cmp	r7, #111	; 0x6f
 8005022:	bf0c      	ite	eq
 8005024:	2308      	moveq	r3, #8
 8005026:	230a      	movne	r3, #10
 8005028:	2100      	movs	r1, #0
 800502a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800502e:	6865      	ldr	r5, [r4, #4]
 8005030:	60a5      	str	r5, [r4, #8]
 8005032:	2d00      	cmp	r5, #0
 8005034:	bfa2      	ittt	ge
 8005036:	6821      	ldrge	r1, [r4, #0]
 8005038:	f021 0104 	bicge.w	r1, r1, #4
 800503c:	6021      	strge	r1, [r4, #0]
 800503e:	b90e      	cbnz	r6, 8005044 <_printf_i+0x114>
 8005040:	2d00      	cmp	r5, #0
 8005042:	d04b      	beq.n	80050dc <_printf_i+0x1ac>
 8005044:	4615      	mov	r5, r2
 8005046:	fbb6 f1f3 	udiv	r1, r6, r3
 800504a:	fb03 6711 	mls	r7, r3, r1, r6
 800504e:	5dc7      	ldrb	r7, [r0, r7]
 8005050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005054:	4637      	mov	r7, r6
 8005056:	42bb      	cmp	r3, r7
 8005058:	460e      	mov	r6, r1
 800505a:	d9f4      	bls.n	8005046 <_printf_i+0x116>
 800505c:	2b08      	cmp	r3, #8
 800505e:	d10b      	bne.n	8005078 <_printf_i+0x148>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	07de      	lsls	r6, r3, #31
 8005064:	d508      	bpl.n	8005078 <_printf_i+0x148>
 8005066:	6923      	ldr	r3, [r4, #16]
 8005068:	6861      	ldr	r1, [r4, #4]
 800506a:	4299      	cmp	r1, r3
 800506c:	bfde      	ittt	le
 800506e:	2330      	movle	r3, #48	; 0x30
 8005070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005078:	1b52      	subs	r2, r2, r5
 800507a:	6122      	str	r2, [r4, #16]
 800507c:	f8cd a000 	str.w	sl, [sp]
 8005080:	464b      	mov	r3, r9
 8005082:	aa03      	add	r2, sp, #12
 8005084:	4621      	mov	r1, r4
 8005086:	4640      	mov	r0, r8
 8005088:	f7ff fee4 	bl	8004e54 <_printf_common>
 800508c:	3001      	adds	r0, #1
 800508e:	d14a      	bne.n	8005126 <_printf_i+0x1f6>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	b004      	add	sp, #16
 8005096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	f043 0320 	orr.w	r3, r3, #32
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	4833      	ldr	r0, [pc, #204]	; (8005170 <_printf_i+0x240>)
 80050a4:	2778      	movs	r7, #120	; 0x78
 80050a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6829      	ldr	r1, [r5, #0]
 80050ae:	061f      	lsls	r7, r3, #24
 80050b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050b4:	d402      	bmi.n	80050bc <_printf_i+0x18c>
 80050b6:	065f      	lsls	r7, r3, #25
 80050b8:	bf48      	it	mi
 80050ba:	b2b6      	uxthmi	r6, r6
 80050bc:	07df      	lsls	r7, r3, #31
 80050be:	bf48      	it	mi
 80050c0:	f043 0320 	orrmi.w	r3, r3, #32
 80050c4:	6029      	str	r1, [r5, #0]
 80050c6:	bf48      	it	mi
 80050c8:	6023      	strmi	r3, [r4, #0]
 80050ca:	b91e      	cbnz	r6, 80050d4 <_printf_i+0x1a4>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f023 0320 	bic.w	r3, r3, #32
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	2310      	movs	r3, #16
 80050d6:	e7a7      	b.n	8005028 <_printf_i+0xf8>
 80050d8:	4824      	ldr	r0, [pc, #144]	; (800516c <_printf_i+0x23c>)
 80050da:	e7e4      	b.n	80050a6 <_printf_i+0x176>
 80050dc:	4615      	mov	r5, r2
 80050de:	e7bd      	b.n	800505c <_printf_i+0x12c>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	6826      	ldr	r6, [r4, #0]
 80050e4:	6961      	ldr	r1, [r4, #20]
 80050e6:	1d18      	adds	r0, r3, #4
 80050e8:	6028      	str	r0, [r5, #0]
 80050ea:	0635      	lsls	r5, r6, #24
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0x1c4>
 80050f0:	6019      	str	r1, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0x1ca>
 80050f4:	0670      	lsls	r0, r6, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0x1c0>
 80050f8:	8019      	strh	r1, [r3, #0]
 80050fa:	2300      	movs	r3, #0
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	4615      	mov	r5, r2
 8005100:	e7bc      	b.n	800507c <_printf_i+0x14c>
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	602a      	str	r2, [r5, #0]
 8005108:	681d      	ldr	r5, [r3, #0]
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	2100      	movs	r1, #0
 800510e:	4628      	mov	r0, r5
 8005110:	f7fb f866 	bl	80001e0 <memchr>
 8005114:	b108      	cbz	r0, 800511a <_printf_i+0x1ea>
 8005116:	1b40      	subs	r0, r0, r5
 8005118:	6060      	str	r0, [r4, #4]
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	2300      	movs	r3, #0
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	e7aa      	b.n	800507c <_printf_i+0x14c>
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	462a      	mov	r2, r5
 800512a:	4649      	mov	r1, r9
 800512c:	4640      	mov	r0, r8
 800512e:	47d0      	blx	sl
 8005130:	3001      	adds	r0, #1
 8005132:	d0ad      	beq.n	8005090 <_printf_i+0x160>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	079b      	lsls	r3, r3, #30
 8005138:	d413      	bmi.n	8005162 <_printf_i+0x232>
 800513a:	68e0      	ldr	r0, [r4, #12]
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	4298      	cmp	r0, r3
 8005140:	bfb8      	it	lt
 8005142:	4618      	movlt	r0, r3
 8005144:	e7a6      	b.n	8005094 <_printf_i+0x164>
 8005146:	2301      	movs	r3, #1
 8005148:	4632      	mov	r2, r6
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	47d0      	blx	sl
 8005150:	3001      	adds	r0, #1
 8005152:	d09d      	beq.n	8005090 <_printf_i+0x160>
 8005154:	3501      	adds	r5, #1
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	9903      	ldr	r1, [sp, #12]
 800515a:	1a5b      	subs	r3, r3, r1
 800515c:	42ab      	cmp	r3, r5
 800515e:	dcf2      	bgt.n	8005146 <_printf_i+0x216>
 8005160:	e7eb      	b.n	800513a <_printf_i+0x20a>
 8005162:	2500      	movs	r5, #0
 8005164:	f104 0619 	add.w	r6, r4, #25
 8005168:	e7f5      	b.n	8005156 <_printf_i+0x226>
 800516a:	bf00      	nop
 800516c:	08008496 	.word	0x08008496
 8005170:	080084a7 	.word	0x080084a7

08005174 <std>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	e9c0 3300 	strd	r3, r3, [r0]
 800517e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005182:	6083      	str	r3, [r0, #8]
 8005184:	8181      	strh	r1, [r0, #12]
 8005186:	6643      	str	r3, [r0, #100]	; 0x64
 8005188:	81c2      	strh	r2, [r0, #14]
 800518a:	6183      	str	r3, [r0, #24]
 800518c:	4619      	mov	r1, r3
 800518e:	2208      	movs	r2, #8
 8005190:	305c      	adds	r0, #92	; 0x5c
 8005192:	f000 f916 	bl	80053c2 <memset>
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x38>)
 8005198:	6263      	str	r3, [r4, #36]	; 0x24
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x3c>)
 800519c:	62a3      	str	r3, [r4, #40]	; 0x28
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x40>)
 80051a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x44>)
 80051a4:	6224      	str	r4, [r4, #32]
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	0800533d 	.word	0x0800533d
 80051b0:	0800535f 	.word	0x0800535f
 80051b4:	08005397 	.word	0x08005397
 80051b8:	080053bb 	.word	0x080053bb

080051bc <stdio_exit_handler>:
 80051bc:	4a02      	ldr	r2, [pc, #8]	; (80051c8 <stdio_exit_handler+0xc>)
 80051be:	4903      	ldr	r1, [pc, #12]	; (80051cc <stdio_exit_handler+0x10>)
 80051c0:	4803      	ldr	r0, [pc, #12]	; (80051d0 <stdio_exit_handler+0x14>)
 80051c2:	f000 b869 	b.w	8005298 <_fwalk_sglue>
 80051c6:	bf00      	nop
 80051c8:	2000000c 	.word	0x2000000c
 80051cc:	08006e69 	.word	0x08006e69
 80051d0:	20000018 	.word	0x20000018

080051d4 <cleanup_stdio>:
 80051d4:	6841      	ldr	r1, [r0, #4]
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <cleanup_stdio+0x34>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	d001      	beq.n	80051e4 <cleanup_stdio+0x10>
 80051e0:	f001 fe42 	bl	8006e68 <_fflush_r>
 80051e4:	68a1      	ldr	r1, [r4, #8]
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <cleanup_stdio+0x38>)
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <cleanup_stdio+0x1e>
 80051ec:	4620      	mov	r0, r4
 80051ee:	f001 fe3b 	bl	8006e68 <_fflush_r>
 80051f2:	68e1      	ldr	r1, [r4, #12]
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <cleanup_stdio+0x3c>)
 80051f6:	4299      	cmp	r1, r3
 80051f8:	d004      	beq.n	8005204 <cleanup_stdio+0x30>
 80051fa:	4620      	mov	r0, r4
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f001 be32 	b.w	8006e68 <_fflush_r>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	200003e0 	.word	0x200003e0
 800520c:	20000448 	.word	0x20000448
 8005210:	200004b0 	.word	0x200004b0

08005214 <global_stdio_init.part.0>:
 8005214:	b510      	push	{r4, lr}
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <global_stdio_init.part.0+0x30>)
 8005218:	4c0b      	ldr	r4, [pc, #44]	; (8005248 <global_stdio_init.part.0+0x34>)
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <global_stdio_init.part.0+0x38>)
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	4620      	mov	r0, r4
 8005220:	2200      	movs	r2, #0
 8005222:	2104      	movs	r1, #4
 8005224:	f7ff ffa6 	bl	8005174 <std>
 8005228:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800522c:	2201      	movs	r2, #1
 800522e:	2109      	movs	r1, #9
 8005230:	f7ff ffa0 	bl	8005174 <std>
 8005234:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005238:	2202      	movs	r2, #2
 800523a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800523e:	2112      	movs	r1, #18
 8005240:	f7ff bf98 	b.w	8005174 <std>
 8005244:	20000518 	.word	0x20000518
 8005248:	200003e0 	.word	0x200003e0
 800524c:	080051bd 	.word	0x080051bd

08005250 <__sfp_lock_acquire>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__sfp_lock_acquire+0x8>)
 8005252:	f000 b933 	b.w	80054bc <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	20000521 	.word	0x20000521

0800525c <__sfp_lock_release>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__sfp_lock_release+0x8>)
 800525e:	f000 b92e 	b.w	80054be <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	20000521 	.word	0x20000521

08005268 <__sinit>:
 8005268:	b510      	push	{r4, lr}
 800526a:	4604      	mov	r4, r0
 800526c:	f7ff fff0 	bl	8005250 <__sfp_lock_acquire>
 8005270:	6a23      	ldr	r3, [r4, #32]
 8005272:	b11b      	cbz	r3, 800527c <__sinit+0x14>
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f7ff bff0 	b.w	800525c <__sfp_lock_release>
 800527c:	4b04      	ldr	r3, [pc, #16]	; (8005290 <__sinit+0x28>)
 800527e:	6223      	str	r3, [r4, #32]
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <__sinit+0x2c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f5      	bne.n	8005274 <__sinit+0xc>
 8005288:	f7ff ffc4 	bl	8005214 <global_stdio_init.part.0>
 800528c:	e7f2      	b.n	8005274 <__sinit+0xc>
 800528e:	bf00      	nop
 8005290:	080051d5 	.word	0x080051d5
 8005294:	20000518 	.word	0x20000518

08005298 <_fwalk_sglue>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	4607      	mov	r7, r0
 800529e:	4688      	mov	r8, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	2600      	movs	r6, #0
 80052a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a8:	f1b9 0901 	subs.w	r9, r9, #1
 80052ac:	d505      	bpl.n	80052ba <_fwalk_sglue+0x22>
 80052ae:	6824      	ldr	r4, [r4, #0]
 80052b0:	2c00      	cmp	r4, #0
 80052b2:	d1f7      	bne.n	80052a4 <_fwalk_sglue+0xc>
 80052b4:	4630      	mov	r0, r6
 80052b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d907      	bls.n	80052d0 <_fwalk_sglue+0x38>
 80052c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052c4:	3301      	adds	r3, #1
 80052c6:	d003      	beq.n	80052d0 <_fwalk_sglue+0x38>
 80052c8:	4629      	mov	r1, r5
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	4306      	orrs	r6, r0
 80052d0:	3568      	adds	r5, #104	; 0x68
 80052d2:	e7e9      	b.n	80052a8 <_fwalk_sglue+0x10>

080052d4 <sniprintf>:
 80052d4:	b40c      	push	{r2, r3}
 80052d6:	b530      	push	{r4, r5, lr}
 80052d8:	4b17      	ldr	r3, [pc, #92]	; (8005338 <sniprintf+0x64>)
 80052da:	1e0c      	subs	r4, r1, #0
 80052dc:	681d      	ldr	r5, [r3, #0]
 80052de:	b09d      	sub	sp, #116	; 0x74
 80052e0:	da08      	bge.n	80052f4 <sniprintf+0x20>
 80052e2:	238b      	movs	r3, #139	; 0x8b
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	b01d      	add	sp, #116	; 0x74
 80052ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052f0:	b002      	add	sp, #8
 80052f2:	4770      	bx	lr
 80052f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052fc:	bf14      	ite	ne
 80052fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005302:	4623      	moveq	r3, r4
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	9307      	str	r3, [sp, #28]
 8005308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	9006      	str	r0, [sp, #24]
 8005310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005314:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005316:	ab21      	add	r3, sp, #132	; 0x84
 8005318:	a902      	add	r1, sp, #8
 800531a:	4628      	mov	r0, r5
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	f001 fc1f 	bl	8006b60 <_svfiprintf_r>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	bfbc      	itt	lt
 8005326:	238b      	movlt	r3, #139	; 0x8b
 8005328:	602b      	strlt	r3, [r5, #0]
 800532a:	2c00      	cmp	r4, #0
 800532c:	d0dd      	beq.n	80052ea <sniprintf+0x16>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e7d9      	b.n	80052ea <sniprintf+0x16>
 8005336:	bf00      	nop
 8005338:	20000064 	.word	0x20000064

0800533c <__sread>:
 800533c:	b510      	push	{r4, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	f000 f86c 	bl	8005420 <_read_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	bfab      	itete	ge
 800534c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800534e:	89a3      	ldrhlt	r3, [r4, #12]
 8005350:	181b      	addge	r3, r3, r0
 8005352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005356:	bfac      	ite	ge
 8005358:	6563      	strge	r3, [r4, #84]	; 0x54
 800535a:	81a3      	strhlt	r3, [r4, #12]
 800535c:	bd10      	pop	{r4, pc}

0800535e <__swrite>:
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	461f      	mov	r7, r3
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	4616      	mov	r6, r2
 800536e:	d505      	bpl.n	800537c <__swrite+0x1e>
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	2302      	movs	r3, #2
 8005376:	2200      	movs	r2, #0
 8005378:	f000 f840 	bl	80053fc <_lseek_r>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	4632      	mov	r2, r6
 800538a:	463b      	mov	r3, r7
 800538c:	4628      	mov	r0, r5
 800538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	f000 b857 	b.w	8005444 <_write_r>

08005396 <__sseek>:
 8005396:	b510      	push	{r4, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 f82d 	bl	80053fc <_lseek_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	bf15      	itete	ne
 80053a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80053aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strheq	r3, [r4, #12]
 80053b4:	bf18      	it	ne
 80053b6:	81a3      	strhne	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__sclose>:
 80053ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053be:	f000 b80d 	b.w	80053dc <_close_r>

080053c2 <memset>:
 80053c2:	4402      	add	r2, r0
 80053c4:	4603      	mov	r3, r0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d100      	bne.n	80053cc <memset+0xa>
 80053ca:	4770      	bx	lr
 80053cc:	f803 1b01 	strb.w	r1, [r3], #1
 80053d0:	e7f9      	b.n	80053c6 <memset+0x4>
	...

080053d4 <_localeconv_r>:
 80053d4:	4800      	ldr	r0, [pc, #0]	; (80053d8 <_localeconv_r+0x4>)
 80053d6:	4770      	bx	lr
 80053d8:	20000158 	.word	0x20000158

080053dc <_close_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d06      	ldr	r5, [pc, #24]	; (80053f8 <_close_r+0x1c>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	f7fc fa9d 	bl	8001926 <_close>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_close_r+0x1a>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_close_r+0x1a>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	2000051c 	.word	0x2000051c

080053fc <_lseek_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	; (800541c <_lseek_r+0x20>)
 8005400:	4604      	mov	r4, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fc fab2 	bl	8001974 <_lseek>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_lseek_r+0x1e>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_lseek_r+0x1e>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	2000051c 	.word	0x2000051c

08005420 <_read_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	; (8005440 <_read_r+0x20>)
 8005424:	4604      	mov	r4, r0
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	2200      	movs	r2, #0
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fc fa40 	bl	80018b4 <_read>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_read_r+0x1e>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_read_r+0x1e>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	2000051c 	.word	0x2000051c

08005444 <_write_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_write_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fc fa4b 	bl	80018ee <_write>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_write_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_write_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	2000051c 	.word	0x2000051c

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	; (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000064 	.word	0x20000064

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f002 ffca 	bl	8008420 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	08008830 	.word	0x08008830
 80054b0:	08008830 	.word	0x08008830
 80054b4:	08008830 	.word	0x08008830
 80054b8:	08008834 	.word	0x08008834

080054bc <__retarget_lock_acquire_recursive>:
 80054bc:	4770      	bx	lr

080054be <__retarget_lock_release_recursive>:
 80054be:	4770      	bx	lr

080054c0 <quorem>:
 80054c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	6903      	ldr	r3, [r0, #16]
 80054c6:	690c      	ldr	r4, [r1, #16]
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	4607      	mov	r7, r0
 80054cc:	db7e      	blt.n	80055cc <quorem+0x10c>
 80054ce:	3c01      	subs	r4, #1
 80054d0:	f101 0814 	add.w	r8, r1, #20
 80054d4:	f100 0514 	add.w	r5, r0, #20
 80054d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e6:	3301      	adds	r3, #1
 80054e8:	429a      	cmp	r2, r3
 80054ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80054f6:	d331      	bcc.n	800555c <quorem+0x9c>
 80054f8:	f04f 0e00 	mov.w	lr, #0
 80054fc:	4640      	mov	r0, r8
 80054fe:	46ac      	mov	ip, r5
 8005500:	46f2      	mov	sl, lr
 8005502:	f850 2b04 	ldr.w	r2, [r0], #4
 8005506:	b293      	uxth	r3, r2
 8005508:	fb06 e303 	mla	r3, r6, r3, lr
 800550c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005510:	0c1a      	lsrs	r2, r3, #16
 8005512:	b29b      	uxth	r3, r3
 8005514:	ebaa 0303 	sub.w	r3, sl, r3
 8005518:	f8dc a000 	ldr.w	sl, [ip]
 800551c:	fa13 f38a 	uxtah	r3, r3, sl
 8005520:	fb06 220e 	mla	r2, r6, lr, r2
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	9b00      	ldr	r3, [sp, #0]
 8005528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800552c:	b292      	uxth	r2, r2
 800552e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005536:	f8bd 3000 	ldrh.w	r3, [sp]
 800553a:	4581      	cmp	r9, r0
 800553c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005540:	f84c 3b04 	str.w	r3, [ip], #4
 8005544:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005548:	d2db      	bcs.n	8005502 <quorem+0x42>
 800554a:	f855 300b 	ldr.w	r3, [r5, fp]
 800554e:	b92b      	cbnz	r3, 800555c <quorem+0x9c>
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	3b04      	subs	r3, #4
 8005554:	429d      	cmp	r5, r3
 8005556:	461a      	mov	r2, r3
 8005558:	d32c      	bcc.n	80055b4 <quorem+0xf4>
 800555a:	613c      	str	r4, [r7, #16]
 800555c:	4638      	mov	r0, r7
 800555e:	f001 f9a5 	bl	80068ac <__mcmp>
 8005562:	2800      	cmp	r0, #0
 8005564:	db22      	blt.n	80055ac <quorem+0xec>
 8005566:	3601      	adds	r6, #1
 8005568:	4629      	mov	r1, r5
 800556a:	2000      	movs	r0, #0
 800556c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005570:	f8d1 c000 	ldr.w	ip, [r1]
 8005574:	b293      	uxth	r3, r2
 8005576:	1ac3      	subs	r3, r0, r3
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	fa13 f38c 	uxtah	r3, r3, ip
 800557e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558c:	45c1      	cmp	r9, r8
 800558e:	f841 3b04 	str.w	r3, [r1], #4
 8005592:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005596:	d2e9      	bcs.n	800556c <quorem+0xac>
 8005598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a0:	b922      	cbnz	r2, 80055ac <quorem+0xec>
 80055a2:	3b04      	subs	r3, #4
 80055a4:	429d      	cmp	r5, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	d30a      	bcc.n	80055c0 <quorem+0x100>
 80055aa:	613c      	str	r4, [r7, #16]
 80055ac:	4630      	mov	r0, r6
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	3b04      	subs	r3, #4
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d1ce      	bne.n	800555a <quorem+0x9a>
 80055bc:	3c01      	subs	r4, #1
 80055be:	e7c9      	b.n	8005554 <quorem+0x94>
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	3b04      	subs	r3, #4
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	d1f0      	bne.n	80055aa <quorem+0xea>
 80055c8:	3c01      	subs	r4, #1
 80055ca:	e7eb      	b.n	80055a4 <quorem+0xe4>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7ee      	b.n	80055ae <quorem+0xee>

080055d0 <_dtoa_r>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ed2d 8b04 	vpush	{d8-d9}
 80055d8:	69c5      	ldr	r5, [r0, #28]
 80055da:	b093      	sub	sp, #76	; 0x4c
 80055dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80055e0:	ec57 6b10 	vmov	r6, r7, d0
 80055e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055e8:	9107      	str	r1, [sp, #28]
 80055ea:	4604      	mov	r4, r0
 80055ec:	920a      	str	r2, [sp, #40]	; 0x28
 80055ee:	930d      	str	r3, [sp, #52]	; 0x34
 80055f0:	b975      	cbnz	r5, 8005610 <_dtoa_r+0x40>
 80055f2:	2010      	movs	r0, #16
 80055f4:	f000 fe2a 	bl	800624c <malloc>
 80055f8:	4602      	mov	r2, r0
 80055fa:	61e0      	str	r0, [r4, #28]
 80055fc:	b920      	cbnz	r0, 8005608 <_dtoa_r+0x38>
 80055fe:	4bae      	ldr	r3, [pc, #696]	; (80058b8 <_dtoa_r+0x2e8>)
 8005600:	21ef      	movs	r1, #239	; 0xef
 8005602:	48ae      	ldr	r0, [pc, #696]	; (80058bc <_dtoa_r+0x2ec>)
 8005604:	f001 fc90 	bl	8006f28 <__assert_func>
 8005608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800560c:	6005      	str	r5, [r0, #0]
 800560e:	60c5      	str	r5, [r0, #12]
 8005610:	69e3      	ldr	r3, [r4, #28]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	b151      	cbz	r1, 800562c <_dtoa_r+0x5c>
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	604a      	str	r2, [r1, #4]
 800561a:	2301      	movs	r3, #1
 800561c:	4093      	lsls	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	4620      	mov	r0, r4
 8005622:	f000 ff07 	bl	8006434 <_Bfree>
 8005626:	69e3      	ldr	r3, [r4, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	1e3b      	subs	r3, r7, #0
 800562e:	bfbb      	ittet	lt
 8005630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005634:	9303      	strlt	r3, [sp, #12]
 8005636:	2300      	movge	r3, #0
 8005638:	2201      	movlt	r2, #1
 800563a:	bfac      	ite	ge
 800563c:	f8c8 3000 	strge.w	r3, [r8]
 8005640:	f8c8 2000 	strlt.w	r2, [r8]
 8005644:	4b9e      	ldr	r3, [pc, #632]	; (80058c0 <_dtoa_r+0x2f0>)
 8005646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800564a:	ea33 0308 	bics.w	r3, r3, r8
 800564e:	d11b      	bne.n	8005688 <_dtoa_r+0xb8>
 8005650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005652:	f242 730f 	movw	r3, #9999	; 0x270f
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800565c:	4333      	orrs	r3, r6
 800565e:	f000 8593 	beq.w	8006188 <_dtoa_r+0xbb8>
 8005662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005664:	b963      	cbnz	r3, 8005680 <_dtoa_r+0xb0>
 8005666:	4b97      	ldr	r3, [pc, #604]	; (80058c4 <_dtoa_r+0x2f4>)
 8005668:	e027      	b.n	80056ba <_dtoa_r+0xea>
 800566a:	4b97      	ldr	r3, [pc, #604]	; (80058c8 <_dtoa_r+0x2f8>)
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	9800      	ldr	r0, [sp, #0]
 8005676:	b013      	add	sp, #76	; 0x4c
 8005678:	ecbd 8b04 	vpop	{d8-d9}
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	4b90      	ldr	r3, [pc, #576]	; (80058c4 <_dtoa_r+0x2f4>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	3303      	adds	r3, #3
 8005686:	e7f3      	b.n	8005670 <_dtoa_r+0xa0>
 8005688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	ec51 0b17 	vmov	r0, r1, d7
 8005692:	eeb0 8a47 	vmov.f32	s16, s14
 8005696:	eef0 8a67 	vmov.f32	s17, s15
 800569a:	2300      	movs	r3, #0
 800569c:	f7fb fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a0:	4681      	mov	r9, r0
 80056a2:	b160      	cbz	r0, 80056be <_dtoa_r+0xee>
 80056a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a6:	2301      	movs	r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8568 	beq.w	8006182 <_dtoa_r+0xbb2>
 80056b2:	4b86      	ldr	r3, [pc, #536]	; (80058cc <_dtoa_r+0x2fc>)
 80056b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	e7da      	b.n	8005674 <_dtoa_r+0xa4>
 80056be:	aa10      	add	r2, sp, #64	; 0x40
 80056c0:	a911      	add	r1, sp, #68	; 0x44
 80056c2:	4620      	mov	r0, r4
 80056c4:	eeb0 0a48 	vmov.f32	s0, s16
 80056c8:	eef0 0a68 	vmov.f32	s1, s17
 80056cc:	f001 f994 	bl	80069f8 <__d2b>
 80056d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80056d4:	4682      	mov	sl, r0
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d07f      	beq.n	80057da <_dtoa_r+0x20a>
 80056da:	ee18 3a90 	vmov	r3, s17
 80056de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80056e6:	ec51 0b18 	vmov	r0, r1, d8
 80056ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80056f6:	4619      	mov	r1, r3
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b75      	ldr	r3, [pc, #468]	; (80058d0 <_dtoa_r+0x300>)
 80056fc:	f7fa fdcc 	bl	8000298 <__aeabi_dsub>
 8005700:	a367      	add	r3, pc, #412	; (adr r3, 80058a0 <_dtoa_r+0x2d0>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa ff7f 	bl	8000608 <__aeabi_dmul>
 800570a:	a367      	add	r3, pc, #412	; (adr r3, 80058a8 <_dtoa_r+0x2d8>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fdc4 	bl	800029c <__adddf3>
 8005714:	4606      	mov	r6, r0
 8005716:	4628      	mov	r0, r5
 8005718:	460f      	mov	r7, r1
 800571a:	f7fa ff0b 	bl	8000534 <__aeabi_i2d>
 800571e:	a364      	add	r3, pc, #400	; (adr r3, 80058b0 <_dtoa_r+0x2e0>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa ff70 	bl	8000608 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fdb4 	bl	800029c <__adddf3>
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	f7fb fa16 	bl	8000b68 <__aeabi_d2iz>
 800573c:	2200      	movs	r2, #0
 800573e:	4683      	mov	fp, r0
 8005740:	2300      	movs	r3, #0
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fb f9d1 	bl	8000aec <__aeabi_dcmplt>
 800574a:	b148      	cbz	r0, 8005760 <_dtoa_r+0x190>
 800574c:	4658      	mov	r0, fp
 800574e:	f7fa fef1 	bl	8000534 <__aeabi_i2d>
 8005752:	4632      	mov	r2, r6
 8005754:	463b      	mov	r3, r7
 8005756:	f7fb f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800575a:	b908      	cbnz	r0, 8005760 <_dtoa_r+0x190>
 800575c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005760:	f1bb 0f16 	cmp.w	fp, #22
 8005764:	d857      	bhi.n	8005816 <_dtoa_r+0x246>
 8005766:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <_dtoa_r+0x304>)
 8005768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	ec51 0b18 	vmov	r0, r1, d8
 8005774:	f7fb f9ba 	bl	8000aec <__aeabi_dcmplt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d04e      	beq.n	800581a <_dtoa_r+0x24a>
 800577c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005780:	2300      	movs	r3, #0
 8005782:	930c      	str	r3, [sp, #48]	; 0x30
 8005784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005786:	1b5b      	subs	r3, r3, r5
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	bf45      	ittet	mi
 800578c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005790:	9305      	strmi	r3, [sp, #20]
 8005792:	2300      	movpl	r3, #0
 8005794:	2300      	movmi	r3, #0
 8005796:	9206      	str	r2, [sp, #24]
 8005798:	bf54      	ite	pl
 800579a:	9305      	strpl	r3, [sp, #20]
 800579c:	9306      	strmi	r3, [sp, #24]
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	db3c      	blt.n	800581e <_dtoa_r+0x24e>
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80057aa:	445b      	add	r3, fp
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	2b09      	cmp	r3, #9
 80057b6:	d868      	bhi.n	800588a <_dtoa_r+0x2ba>
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	bfc4      	itt	gt
 80057bc:	3b04      	subgt	r3, #4
 80057be:	9307      	strgt	r3, [sp, #28]
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	f1a3 0302 	sub.w	r3, r3, #2
 80057c6:	bfcc      	ite	gt
 80057c8:	2500      	movgt	r5, #0
 80057ca:	2501      	movle	r5, #1
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	f200 8085 	bhi.w	80058dc <_dtoa_r+0x30c>
 80057d2:	e8df f003 	tbb	[pc, r3]
 80057d6:	3b2e      	.short	0x3b2e
 80057d8:	5839      	.short	0x5839
 80057da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80057de:	441d      	add	r5, r3
 80057e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	bfc1      	itttt	gt
 80057e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80057f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80057f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80057f8:	bfd6      	itet	le
 80057fa:	f1c3 0320 	rsble	r3, r3, #32
 80057fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005802:	fa06 f003 	lslle.w	r0, r6, r3
 8005806:	f7fa fe85 	bl	8000514 <__aeabi_ui2d>
 800580a:	2201      	movs	r2, #1
 800580c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005810:	3d01      	subs	r5, #1
 8005812:	920e      	str	r2, [sp, #56]	; 0x38
 8005814:	e76f      	b.n	80056f6 <_dtoa_r+0x126>
 8005816:	2301      	movs	r3, #1
 8005818:	e7b3      	b.n	8005782 <_dtoa_r+0x1b2>
 800581a:	900c      	str	r0, [sp, #48]	; 0x30
 800581c:	e7b2      	b.n	8005784 <_dtoa_r+0x1b4>
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	eba3 030b 	sub.w	r3, r3, fp
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	f1cb 0300 	rsb	r3, fp, #0
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	2300      	movs	r3, #0
 800582e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005830:	e7bf      	b.n	80057b2 <_dtoa_r+0x1e2>
 8005832:	2300      	movs	r3, #0
 8005834:	9309      	str	r3, [sp, #36]	; 0x24
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	2b00      	cmp	r3, #0
 800583a:	dc52      	bgt.n	80058e2 <_dtoa_r+0x312>
 800583c:	2301      	movs	r3, #1
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	461a      	mov	r2, r3
 8005844:	920a      	str	r2, [sp, #40]	; 0x28
 8005846:	e00b      	b.n	8005860 <_dtoa_r+0x290>
 8005848:	2301      	movs	r3, #1
 800584a:	e7f3      	b.n	8005834 <_dtoa_r+0x264>
 800584c:	2300      	movs	r3, #0
 800584e:	9309      	str	r3, [sp, #36]	; 0x24
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	445b      	add	r3, fp
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	3301      	adds	r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	bfb8      	it	lt
 800585e:	2301      	movlt	r3, #1
 8005860:	69e0      	ldr	r0, [r4, #28]
 8005862:	2100      	movs	r1, #0
 8005864:	2204      	movs	r2, #4
 8005866:	f102 0614 	add.w	r6, r2, #20
 800586a:	429e      	cmp	r6, r3
 800586c:	d93d      	bls.n	80058ea <_dtoa_r+0x31a>
 800586e:	6041      	str	r1, [r0, #4]
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fd9f 	bl	80063b4 <_Balloc>
 8005876:	9000      	str	r0, [sp, #0]
 8005878:	2800      	cmp	r0, #0
 800587a:	d139      	bne.n	80058f0 <_dtoa_r+0x320>
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <_dtoa_r+0x308>)
 800587e:	4602      	mov	r2, r0
 8005880:	f240 11af 	movw	r1, #431	; 0x1af
 8005884:	e6bd      	b.n	8005602 <_dtoa_r+0x32>
 8005886:	2301      	movs	r3, #1
 8005888:	e7e1      	b.n	800584e <_dtoa_r+0x27e>
 800588a:	2501      	movs	r5, #1
 800588c:	2300      	movs	r3, #0
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	9509      	str	r5, [sp, #36]	; 0x24
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	2200      	movs	r2, #0
 800589c:	2312      	movs	r3, #18
 800589e:	e7d1      	b.n	8005844 <_dtoa_r+0x274>
 80058a0:	636f4361 	.word	0x636f4361
 80058a4:	3fd287a7 	.word	0x3fd287a7
 80058a8:	8b60c8b3 	.word	0x8b60c8b3
 80058ac:	3fc68a28 	.word	0x3fc68a28
 80058b0:	509f79fb 	.word	0x509f79fb
 80058b4:	3fd34413 	.word	0x3fd34413
 80058b8:	080084c5 	.word	0x080084c5
 80058bc:	080084dc 	.word	0x080084dc
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	080084c1 	.word	0x080084c1
 80058c8:	080084b8 	.word	0x080084b8
 80058cc:	08008495 	.word	0x08008495
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	080085c8 	.word	0x080085c8
 80058d8:	08008534 	.word	0x08008534
 80058dc:	2301      	movs	r3, #1
 80058de:	9309      	str	r3, [sp, #36]	; 0x24
 80058e0:	e7d7      	b.n	8005892 <_dtoa_r+0x2c2>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	e7ba      	b.n	8005860 <_dtoa_r+0x290>
 80058ea:	3101      	adds	r1, #1
 80058ec:	0052      	lsls	r2, r2, #1
 80058ee:	e7ba      	b.n	8005866 <_dtoa_r+0x296>
 80058f0:	69e3      	ldr	r3, [r4, #28]
 80058f2:	9a00      	ldr	r2, [sp, #0]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	2b0e      	cmp	r3, #14
 80058fa:	f200 80a8 	bhi.w	8005a4e <_dtoa_r+0x47e>
 80058fe:	2d00      	cmp	r5, #0
 8005900:	f000 80a5 	beq.w	8005a4e <_dtoa_r+0x47e>
 8005904:	f1bb 0f00 	cmp.w	fp, #0
 8005908:	dd38      	ble.n	800597c <_dtoa_r+0x3ac>
 800590a:	4bc0      	ldr	r3, [pc, #768]	; (8005c0c <_dtoa_r+0x63c>)
 800590c:	f00b 020f 	and.w	r2, fp, #15
 8005910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800591c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005920:	d019      	beq.n	8005956 <_dtoa_r+0x386>
 8005922:	4bbb      	ldr	r3, [pc, #748]	; (8005c10 <_dtoa_r+0x640>)
 8005924:	ec51 0b18 	vmov	r0, r1, d8
 8005928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800592c:	f7fa ff96 	bl	800085c <__aeabi_ddiv>
 8005930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005934:	f008 080f 	and.w	r8, r8, #15
 8005938:	2503      	movs	r5, #3
 800593a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c10 <_dtoa_r+0x640>
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	d10a      	bne.n	800595a <_dtoa_r+0x38a>
 8005944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005948:	4632      	mov	r2, r6
 800594a:	463b      	mov	r3, r7
 800594c:	f7fa ff86 	bl	800085c <__aeabi_ddiv>
 8005950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005954:	e02b      	b.n	80059ae <_dtoa_r+0x3de>
 8005956:	2502      	movs	r5, #2
 8005958:	e7ef      	b.n	800593a <_dtoa_r+0x36a>
 800595a:	f018 0f01 	tst.w	r8, #1
 800595e:	d008      	beq.n	8005972 <_dtoa_r+0x3a2>
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005968:	f7fa fe4e 	bl	8000608 <__aeabi_dmul>
 800596c:	3501      	adds	r5, #1
 800596e:	4606      	mov	r6, r0
 8005970:	460f      	mov	r7, r1
 8005972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005976:	f109 0908 	add.w	r9, r9, #8
 800597a:	e7e0      	b.n	800593e <_dtoa_r+0x36e>
 800597c:	f000 809f 	beq.w	8005abe <_dtoa_r+0x4ee>
 8005980:	f1cb 0600 	rsb	r6, fp, #0
 8005984:	4ba1      	ldr	r3, [pc, #644]	; (8005c0c <_dtoa_r+0x63c>)
 8005986:	4fa2      	ldr	r7, [pc, #648]	; (8005c10 <_dtoa_r+0x640>)
 8005988:	f006 020f 	and.w	r2, r6, #15
 800598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	ec51 0b18 	vmov	r0, r1, d8
 8005998:	f7fa fe36 	bl	8000608 <__aeabi_dmul>
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	1136      	asrs	r6, r6, #4
 80059a2:	2300      	movs	r3, #0
 80059a4:	2502      	movs	r5, #2
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d17e      	bne.n	8005aa8 <_dtoa_r+0x4d8>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d0      	bne.n	8005950 <_dtoa_r+0x380>
 80059ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8084 	beq.w	8005ac2 <_dtoa_r+0x4f2>
 80059ba:	4b96      	ldr	r3, [pc, #600]	; (8005c14 <_dtoa_r+0x644>)
 80059bc:	2200      	movs	r2, #0
 80059be:	4640      	mov	r0, r8
 80059c0:	4649      	mov	r1, r9
 80059c2:	f7fb f893 	bl	8000aec <__aeabi_dcmplt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d07b      	beq.n	8005ac2 <_dtoa_r+0x4f2>
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d078      	beq.n	8005ac2 <_dtoa_r+0x4f2>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd39      	ble.n	8005a4a <_dtoa_r+0x47a>
 80059d6:	4b90      	ldr	r3, [pc, #576]	; (8005c18 <_dtoa_r+0x648>)
 80059d8:	2200      	movs	r2, #0
 80059da:	4640      	mov	r0, r8
 80059dc:	4649      	mov	r1, r9
 80059de:	f7fa fe13 	bl	8000608 <__aeabi_dmul>
 80059e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e6:	9e01      	ldr	r6, [sp, #4]
 80059e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80059ec:	3501      	adds	r5, #1
 80059ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7fa fd9e 	bl	8000534 <__aeabi_i2d>
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	f7fa fe04 	bl	8000608 <__aeabi_dmul>
 8005a00:	4b86      	ldr	r3, [pc, #536]	; (8005c1c <_dtoa_r+0x64c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fa fc4a 	bl	800029c <__adddf3>
 8005a08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d158      	bne.n	8005ac8 <_dtoa_r+0x4f8>
 8005a16:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <_dtoa_r+0x650>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fc3b 	bl	8000298 <__aeabi_dsub>
 8005a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a26:	4680      	mov	r8, r0
 8005a28:	4689      	mov	r9, r1
 8005a2a:	f7fb f87d 	bl	8000b28 <__aeabi_dcmpgt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8296 	bne.w	8005f60 <_dtoa_r+0x990>
 8005a34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fb f854 	bl	8000aec <__aeabi_dcmplt>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f040 8289 	bne.w	8005f5c <_dtoa_r+0x98c>
 8005a4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f2c0 814e 	blt.w	8005cf2 <_dtoa_r+0x722>
 8005a56:	f1bb 0f0e 	cmp.w	fp, #14
 8005a5a:	f300 814a 	bgt.w	8005cf2 <_dtoa_r+0x722>
 8005a5e:	4b6b      	ldr	r3, [pc, #428]	; (8005c0c <_dtoa_r+0x63c>)
 8005a60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f280 80dc 	bge.w	8005c28 <_dtoa_r+0x658>
 8005a70:	9b04      	ldr	r3, [sp, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f300 80d8 	bgt.w	8005c28 <_dtoa_r+0x658>
 8005a78:	f040 826f 	bne.w	8005f5a <_dtoa_r+0x98a>
 8005a7c:	4b68      	ldr	r3, [pc, #416]	; (8005c20 <_dtoa_r+0x650>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fa fdc0 	bl	8000608 <__aeabi_dmul>
 8005a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a8c:	f7fb f842 	bl	8000b14 <__aeabi_dcmpge>
 8005a90:	9e04      	ldr	r6, [sp, #16]
 8005a92:	4637      	mov	r7, r6
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f040 8245 	bne.w	8005f24 <_dtoa_r+0x954>
 8005a9a:	9d00      	ldr	r5, [sp, #0]
 8005a9c:	2331      	movs	r3, #49	; 0x31
 8005a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8005aa2:	f10b 0b01 	add.w	fp, fp, #1
 8005aa6:	e241      	b.n	8005f2c <_dtoa_r+0x95c>
 8005aa8:	07f2      	lsls	r2, r6, #31
 8005aaa:	d505      	bpl.n	8005ab8 <_dtoa_r+0x4e8>
 8005aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab0:	f7fa fdaa 	bl	8000608 <__aeabi_dmul>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	1076      	asrs	r6, r6, #1
 8005aba:	3708      	adds	r7, #8
 8005abc:	e773      	b.n	80059a6 <_dtoa_r+0x3d6>
 8005abe:	2502      	movs	r5, #2
 8005ac0:	e775      	b.n	80059ae <_dtoa_r+0x3de>
 8005ac2:	9e04      	ldr	r6, [sp, #16]
 8005ac4:	465f      	mov	r7, fp
 8005ac6:	e792      	b.n	80059ee <_dtoa_r+0x41e>
 8005ac8:	9900      	ldr	r1, [sp, #0]
 8005aca:	4b50      	ldr	r3, [pc, #320]	; (8005c0c <_dtoa_r+0x63c>)
 8005acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad0:	4431      	add	r1, r6
 8005ad2:	9102      	str	r1, [sp, #8]
 8005ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad6:	eeb0 9a47 	vmov.f32	s18, s14
 8005ada:	eef0 9a67 	vmov.f32	s19, s15
 8005ade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d044      	beq.n	8005b74 <_dtoa_r+0x5a4>
 8005aea:	494e      	ldr	r1, [pc, #312]	; (8005c24 <_dtoa_r+0x654>)
 8005aec:	2000      	movs	r0, #0
 8005aee:	f7fa feb5 	bl	800085c <__aeabi_ddiv>
 8005af2:	ec53 2b19 	vmov	r2, r3, d9
 8005af6:	f7fa fbcf 	bl	8000298 <__aeabi_dsub>
 8005afa:	9d00      	ldr	r5, [sp, #0]
 8005afc:	ec41 0b19 	vmov	d9, r0, r1
 8005b00:	4649      	mov	r1, r9
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7fb f830 	bl	8000b68 <__aeabi_d2iz>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	f7fa fd13 	bl	8000534 <__aeabi_i2d>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fa fbbf 	bl	8000298 <__aeabi_dsub>
 8005b1a:	3630      	adds	r6, #48	; 0x30
 8005b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b20:	ec53 2b19 	vmov	r2, r3, d9
 8005b24:	4680      	mov	r8, r0
 8005b26:	4689      	mov	r9, r1
 8005b28:	f7fa ffe0 	bl	8000aec <__aeabi_dcmplt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d164      	bne.n	8005bfa <_dtoa_r+0x62a>
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	4937      	ldr	r1, [pc, #220]	; (8005c14 <_dtoa_r+0x644>)
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fa fbae 	bl	8000298 <__aeabi_dsub>
 8005b3c:	ec53 2b19 	vmov	r2, r3, d9
 8005b40:	f7fa ffd4 	bl	8000aec <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 80b6 	bne.w	8005cb6 <_dtoa_r+0x6e6>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	429d      	cmp	r5, r3
 8005b4e:	f43f af7c 	beq.w	8005a4a <_dtoa_r+0x47a>
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <_dtoa_r+0x648>)
 8005b54:	ec51 0b19 	vmov	r0, r1, d9
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7fa fd55 	bl	8000608 <__aeabi_dmul>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <_dtoa_r+0x648>)
 8005b60:	ec41 0b19 	vmov	d9, r0, r1
 8005b64:	2200      	movs	r2, #0
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fd4d 	bl	8000608 <__aeabi_dmul>
 8005b6e:	4680      	mov	r8, r0
 8005b70:	4689      	mov	r9, r1
 8005b72:	e7c5      	b.n	8005b00 <_dtoa_r+0x530>
 8005b74:	ec51 0b17 	vmov	r0, r1, d7
 8005b78:	f7fa fd46 	bl	8000608 <__aeabi_dmul>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	9d00      	ldr	r5, [sp, #0]
 8005b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b82:	ec41 0b19 	vmov	d9, r0, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	f7fa ffed 	bl	8000b68 <__aeabi_d2iz>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	f7fa fcd0 	bl	8000534 <__aeabi_i2d>
 8005b94:	3630      	adds	r6, #48	; 0x30
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa fb7b 	bl	8000298 <__aeabi_dsub>
 8005ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	4680      	mov	r8, r0
 8005bac:	4689      	mov	r9, r1
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	d124      	bne.n	8005bfe <_dtoa_r+0x62e>
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <_dtoa_r+0x654>)
 8005bb6:	ec51 0b19 	vmov	r0, r1, d9
 8005bba:	f7fa fb6f 	bl	800029c <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d173      	bne.n	8005cb6 <_dtoa_r+0x6e6>
 8005bce:	ec53 2b19 	vmov	r2, r3, d9
 8005bd2:	4914      	ldr	r1, [pc, #80]	; (8005c24 <_dtoa_r+0x654>)
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa ff83 	bl	8000aec <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f af2f 	beq.w	8005a4a <_dtoa_r+0x47a>
 8005bec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005bee:	1e6b      	subs	r3, r5, #1
 8005bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	d0f8      	beq.n	8005bec <_dtoa_r+0x61c>
 8005bfa:	46bb      	mov	fp, r7
 8005bfc:	e04a      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <_dtoa_r+0x648>)
 8005c00:	f7fa fd02 	bl	8000608 <__aeabi_dmul>
 8005c04:	4680      	mov	r8, r0
 8005c06:	4689      	mov	r9, r1
 8005c08:	e7bd      	b.n	8005b86 <_dtoa_r+0x5b6>
 8005c0a:	bf00      	nop
 8005c0c:	080085c8 	.word	0x080085c8
 8005c10:	080085a0 	.word	0x080085a0
 8005c14:	3ff00000 	.word	0x3ff00000
 8005c18:	40240000 	.word	0x40240000
 8005c1c:	401c0000 	.word	0x401c0000
 8005c20:	40140000 	.word	0x40140000
 8005c24:	3fe00000 	.word	0x3fe00000
 8005c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c2c:	9d00      	ldr	r5, [sp, #0]
 8005c2e:	4642      	mov	r2, r8
 8005c30:	464b      	mov	r3, r9
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa fe11 	bl	800085c <__aeabi_ddiv>
 8005c3a:	f7fa ff95 	bl	8000b68 <__aeabi_d2iz>
 8005c3e:	9001      	str	r0, [sp, #4]
 8005c40:	f7fa fc78 	bl	8000534 <__aeabi_i2d>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f7fa fcde 	bl	8000608 <__aeabi_dmul>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4630      	mov	r0, r6
 8005c52:	4639      	mov	r1, r7
 8005c54:	f7fa fb20 	bl	8000298 <__aeabi_dsub>
 8005c58:	9e01      	ldr	r6, [sp, #4]
 8005c5a:	9f04      	ldr	r7, [sp, #16]
 8005c5c:	3630      	adds	r6, #48	; 0x30
 8005c5e:	f805 6b01 	strb.w	r6, [r5], #1
 8005c62:	9e00      	ldr	r6, [sp, #0]
 8005c64:	1bae      	subs	r6, r5, r6
 8005c66:	42b7      	cmp	r7, r6
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	d134      	bne.n	8005cd8 <_dtoa_r+0x708>
 8005c6e:	f7fa fb15 	bl	800029c <__adddf3>
 8005c72:	4642      	mov	r2, r8
 8005c74:	464b      	mov	r3, r9
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	f7fa ff55 	bl	8000b28 <__aeabi_dcmpgt>
 8005c7e:	b9c8      	cbnz	r0, 8005cb4 <_dtoa_r+0x6e4>
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c8c:	b110      	cbz	r0, 8005c94 <_dtoa_r+0x6c4>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	07db      	lsls	r3, r3, #31
 8005c92:	d40f      	bmi.n	8005cb4 <_dtoa_r+0x6e4>
 8005c94:	4651      	mov	r1, sl
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fbcc 	bl	8006434 <_Bfree>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ca0:	702b      	strb	r3, [r5, #0]
 8005ca2:	f10b 0301 	add.w	r3, fp, #1
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f43f ace2 	beq.w	8005674 <_dtoa_r+0xa4>
 8005cb0:	601d      	str	r5, [r3, #0]
 8005cb2:	e4df      	b.n	8005674 <_dtoa_r+0xa4>
 8005cb4:	465f      	mov	r7, fp
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	461d      	mov	r5, r3
 8005cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cbe:	2a39      	cmp	r2, #57	; 0x39
 8005cc0:	d106      	bne.n	8005cd0 <_dtoa_r+0x700>
 8005cc2:	9a00      	ldr	r2, [sp, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1f7      	bne.n	8005cb8 <_dtoa_r+0x6e8>
 8005cc8:	9900      	ldr	r1, [sp, #0]
 8005cca:	2230      	movs	r2, #48	; 0x30
 8005ccc:	3701      	adds	r7, #1
 8005cce:	700a      	strb	r2, [r1, #0]
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e790      	b.n	8005bfa <_dtoa_r+0x62a>
 8005cd8:	4ba3      	ldr	r3, [pc, #652]	; (8005f68 <_dtoa_r+0x998>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f7fa fc94 	bl	8000608 <__aeabi_dmul>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	f7fa fef6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d09e      	beq.n	8005c2e <_dtoa_r+0x65e>
 8005cf0:	e7d0      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	f000 80ca 	beq.w	8005e8e <_dtoa_r+0x8be>
 8005cfa:	9a07      	ldr	r2, [sp, #28]
 8005cfc:	2a01      	cmp	r2, #1
 8005cfe:	f300 80ad 	bgt.w	8005e5c <_dtoa_r+0x88c>
 8005d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	f000 80a5 	beq.w	8005e54 <_dtoa_r+0x884>
 8005d0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d0e:	9e08      	ldr	r6, [sp, #32]
 8005d10:	9d05      	ldr	r5, [sp, #20]
 8005d12:	9a05      	ldr	r2, [sp, #20]
 8005d14:	441a      	add	r2, r3
 8005d16:	9205      	str	r2, [sp, #20]
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	4620      	mov	r0, r4
 8005d20:	9206      	str	r2, [sp, #24]
 8005d22:	f000 fc3d 	bl	80065a0 <__i2b>
 8005d26:	4607      	mov	r7, r0
 8005d28:	b165      	cbz	r5, 8005d44 <_dtoa_r+0x774>
 8005d2a:	9b06      	ldr	r3, [sp, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dd09      	ble.n	8005d44 <_dtoa_r+0x774>
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	9a05      	ldr	r2, [sp, #20]
 8005d34:	bfa8      	it	ge
 8005d36:	462b      	movge	r3, r5
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	9205      	str	r2, [sp, #20]
 8005d3c:	9a06      	ldr	r2, [sp, #24]
 8005d3e:	1aed      	subs	r5, r5, r3
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	9306      	str	r3, [sp, #24]
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	b1f3      	cbz	r3, 8005d86 <_dtoa_r+0x7b6>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a3 	beq.w	8005e96 <_dtoa_r+0x8c6>
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	dd10      	ble.n	8005d76 <_dtoa_r+0x7a6>
 8005d54:	4639      	mov	r1, r7
 8005d56:	4632      	mov	r2, r6
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fce1 	bl	8006720 <__pow5mult>
 8005d5e:	4652      	mov	r2, sl
 8005d60:	4601      	mov	r1, r0
 8005d62:	4607      	mov	r7, r0
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fc31 	bl	80065cc <__multiply>
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb60 	bl	8006434 <_Bfree>
 8005d74:	46c2      	mov	sl, r8
 8005d76:	9b08      	ldr	r3, [sp, #32]
 8005d78:	1b9a      	subs	r2, r3, r6
 8005d7a:	d004      	beq.n	8005d86 <_dtoa_r+0x7b6>
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fcce 	bl	8006720 <__pow5mult>
 8005d84:	4682      	mov	sl, r0
 8005d86:	2101      	movs	r1, #1
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fc09 	bl	80065a0 <__i2b>
 8005d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	4606      	mov	r6, r0
 8005d94:	f340 8081 	ble.w	8005e9a <_dtoa_r+0x8ca>
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fcbf 	bl	8006720 <__pow5mult>
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	4606      	mov	r6, r0
 8005da8:	dd7a      	ble.n	8005ea0 <_dtoa_r+0x8d0>
 8005daa:	f04f 0800 	mov.w	r8, #0
 8005dae:	6933      	ldr	r3, [r6, #16]
 8005db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005db4:	6918      	ldr	r0, [r3, #16]
 8005db6:	f000 fba5 	bl	8006504 <__hi0bits>
 8005dba:	f1c0 0020 	rsb	r0, r0, #32
 8005dbe:	9b06      	ldr	r3, [sp, #24]
 8005dc0:	4418      	add	r0, r3
 8005dc2:	f010 001f 	ands.w	r0, r0, #31
 8005dc6:	f000 8094 	beq.w	8005ef2 <_dtoa_r+0x922>
 8005dca:	f1c0 0320 	rsb	r3, r0, #32
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	f340 8085 	ble.w	8005ede <_dtoa_r+0x90e>
 8005dd4:	9b05      	ldr	r3, [sp, #20]
 8005dd6:	f1c0 001c 	rsb	r0, r0, #28
 8005dda:	4403      	add	r3, r0
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	4403      	add	r3, r0
 8005de2:	4405      	add	r5, r0
 8005de4:	9306      	str	r3, [sp, #24]
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd05      	ble.n	8005df8 <_dtoa_r+0x828>
 8005dec:	4651      	mov	r1, sl
 8005dee:	461a      	mov	r2, r3
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fcef 	bl	80067d4 <__lshift>
 8005df6:	4682      	mov	sl, r0
 8005df8:	9b06      	ldr	r3, [sp, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dd05      	ble.n	8005e0a <_dtoa_r+0x83a>
 8005dfe:	4631      	mov	r1, r6
 8005e00:	461a      	mov	r2, r3
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fce6 	bl	80067d4 <__lshift>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d072      	beq.n	8005ef6 <_dtoa_r+0x926>
 8005e10:	4631      	mov	r1, r6
 8005e12:	4650      	mov	r0, sl
 8005e14:	f000 fd4a 	bl	80068ac <__mcmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	da6c      	bge.n	8005ef6 <_dtoa_r+0x926>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4651      	mov	r1, sl
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fb28 	bl	8006478 <__multadd>
 8005e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e2e:	4682      	mov	sl, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 81b0 	beq.w	8006196 <_dtoa_r+0xbc6>
 8005e36:	2300      	movs	r3, #0
 8005e38:	4639      	mov	r1, r7
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fb1b 	bl	8006478 <__multadd>
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	4607      	mov	r7, r0
 8005e48:	f300 8096 	bgt.w	8005f78 <_dtoa_r+0x9a8>
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dc59      	bgt.n	8005f06 <_dtoa_r+0x936>
 8005e52:	e091      	b.n	8005f78 <_dtoa_r+0x9a8>
 8005e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e5a:	e758      	b.n	8005d0e <_dtoa_r+0x73e>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	1e5e      	subs	r6, r3, #1
 8005e60:	9b08      	ldr	r3, [sp, #32]
 8005e62:	42b3      	cmp	r3, r6
 8005e64:	bfbf      	itttt	lt
 8005e66:	9b08      	ldrlt	r3, [sp, #32]
 8005e68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005e6a:	9608      	strlt	r6, [sp, #32]
 8005e6c:	1af3      	sublt	r3, r6, r3
 8005e6e:	bfb4      	ite	lt
 8005e70:	18d2      	addlt	r2, r2, r3
 8005e72:	1b9e      	subge	r6, r3, r6
 8005e74:	9b04      	ldr	r3, [sp, #16]
 8005e76:	bfbc      	itt	lt
 8005e78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005e7a:	2600      	movlt	r6, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bfb7      	itett	lt
 8005e80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005e84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005e88:	1a9d      	sublt	r5, r3, r2
 8005e8a:	2300      	movlt	r3, #0
 8005e8c:	e741      	b.n	8005d12 <_dtoa_r+0x742>
 8005e8e:	9e08      	ldr	r6, [sp, #32]
 8005e90:	9d05      	ldr	r5, [sp, #20]
 8005e92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e94:	e748      	b.n	8005d28 <_dtoa_r+0x758>
 8005e96:	9a08      	ldr	r2, [sp, #32]
 8005e98:	e770      	b.n	8005d7c <_dtoa_r+0x7ac>
 8005e9a:	9b07      	ldr	r3, [sp, #28]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	dc19      	bgt.n	8005ed4 <_dtoa_r+0x904>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	b9bb      	cbnz	r3, 8005ed4 <_dtoa_r+0x904>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eaa:	b99b      	cbnz	r3, 8005ed4 <_dtoa_r+0x904>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	0d1b      	lsrs	r3, r3, #20
 8005eb4:	051b      	lsls	r3, r3, #20
 8005eb6:	b183      	cbz	r3, 8005eda <_dtoa_r+0x90a>
 8005eb8:	9b05      	ldr	r3, [sp, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	f04f 0801 	mov.w	r8, #1
 8005ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f af6f 	bne.w	8005dae <_dtoa_r+0x7de>
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e774      	b.n	8005dbe <_dtoa_r+0x7ee>
 8005ed4:	f04f 0800 	mov.w	r8, #0
 8005ed8:	e7f6      	b.n	8005ec8 <_dtoa_r+0x8f8>
 8005eda:	4698      	mov	r8, r3
 8005edc:	e7f4      	b.n	8005ec8 <_dtoa_r+0x8f8>
 8005ede:	d082      	beq.n	8005de6 <_dtoa_r+0x816>
 8005ee0:	9a05      	ldr	r2, [sp, #20]
 8005ee2:	331c      	adds	r3, #28
 8005ee4:	441a      	add	r2, r3
 8005ee6:	9205      	str	r2, [sp, #20]
 8005ee8:	9a06      	ldr	r2, [sp, #24]
 8005eea:	441a      	add	r2, r3
 8005eec:	441d      	add	r5, r3
 8005eee:	9206      	str	r2, [sp, #24]
 8005ef0:	e779      	b.n	8005de6 <_dtoa_r+0x816>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	e7f4      	b.n	8005ee0 <_dtoa_r+0x910>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc37      	bgt.n	8005f6c <_dtoa_r+0x99c>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	dd34      	ble.n	8005f6c <_dtoa_r+0x99c>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	b963      	cbnz	r3, 8005f24 <_dtoa_r+0x954>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fab2 	bl	8006478 <__multadd>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4606      	mov	r6, r0
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f000 fcc7 	bl	80068ac <__mcmp>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f73f adbb 	bgt.w	8005a9a <_dtoa_r+0x4ca>
 8005f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f26:	9d00      	ldr	r5, [sp, #0]
 8005f28:	ea6f 0b03 	mvn.w	fp, r3
 8005f2c:	f04f 0800 	mov.w	r8, #0
 8005f30:	4631      	mov	r1, r6
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fa7e 	bl	8006434 <_Bfree>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	f43f aeab 	beq.w	8005c94 <_dtoa_r+0x6c4>
 8005f3e:	f1b8 0f00 	cmp.w	r8, #0
 8005f42:	d005      	beq.n	8005f50 <_dtoa_r+0x980>
 8005f44:	45b8      	cmp	r8, r7
 8005f46:	d003      	beq.n	8005f50 <_dtoa_r+0x980>
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fa72 	bl	8006434 <_Bfree>
 8005f50:	4639      	mov	r1, r7
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fa6e 	bl	8006434 <_Bfree>
 8005f58:	e69c      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	4637      	mov	r7, r6
 8005f5e:	e7e1      	b.n	8005f24 <_dtoa_r+0x954>
 8005f60:	46bb      	mov	fp, r7
 8005f62:	4637      	mov	r7, r6
 8005f64:	e599      	b.n	8005a9a <_dtoa_r+0x4ca>
 8005f66:	bf00      	nop
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80c8 	beq.w	8006104 <_dtoa_r+0xb34>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	dd05      	ble.n	8005f88 <_dtoa_r+0x9b8>
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fc27 	bl	80067d4 <__lshift>
 8005f86:	4607      	mov	r7, r0
 8005f88:	f1b8 0f00 	cmp.w	r8, #0
 8005f8c:	d05b      	beq.n	8006046 <_dtoa_r+0xa76>
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fa0f 	bl	80063b4 <_Balloc>
 8005f96:	4605      	mov	r5, r0
 8005f98:	b928      	cbnz	r0, 8005fa6 <_dtoa_r+0x9d6>
 8005f9a:	4b83      	ldr	r3, [pc, #524]	; (80061a8 <_dtoa_r+0xbd8>)
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005fa2:	f7ff bb2e 	b.w	8005602 <_dtoa_r+0x32>
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	3202      	adds	r2, #2
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	f107 010c 	add.w	r1, r7, #12
 8005fb0:	300c      	adds	r0, #12
 8005fb2:	f000 ffab 	bl	8006f0c <memcpy>
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fc0a 	bl	80067d4 <__lshift>
 8005fc0:	9b00      	ldr	r3, [sp, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fca:	4413      	add	r3, r2
 8005fcc:	9308      	str	r3, [sp, #32]
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	46b8      	mov	r8, r7
 8005fd6:	9306      	str	r3, [sp, #24]
 8005fd8:	4607      	mov	r7, r0
 8005fda:	9b04      	ldr	r3, [sp, #16]
 8005fdc:	4631      	mov	r1, r6
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	f7ff fa6c 	bl	80054c0 <quorem>
 8005fe8:	4641      	mov	r1, r8
 8005fea:	9002      	str	r0, [sp, #8]
 8005fec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	f000 fc5b 	bl	80068ac <__mcmp>
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	9005      	str	r0, [sp, #20]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fc71 	bl	80068e4 <__mdiff>
 8006002:	68c2      	ldr	r2, [r0, #12]
 8006004:	4605      	mov	r5, r0
 8006006:	bb02      	cbnz	r2, 800604a <_dtoa_r+0xa7a>
 8006008:	4601      	mov	r1, r0
 800600a:	4650      	mov	r0, sl
 800600c:	f000 fc4e 	bl	80068ac <__mcmp>
 8006010:	4602      	mov	r2, r0
 8006012:	4629      	mov	r1, r5
 8006014:	4620      	mov	r0, r4
 8006016:	9209      	str	r2, [sp, #36]	; 0x24
 8006018:	f000 fa0c 	bl	8006434 <_Bfree>
 800601c:	9b07      	ldr	r3, [sp, #28]
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	9d04      	ldr	r5, [sp, #16]
 8006022:	ea43 0102 	orr.w	r1, r3, r2
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	4319      	orrs	r1, r3
 800602a:	d110      	bne.n	800604e <_dtoa_r+0xa7e>
 800602c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006030:	d029      	beq.n	8006086 <_dtoa_r+0xab6>
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd02      	ble.n	800603e <_dtoa_r+0xa6e>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	f883 9000 	strb.w	r9, [r3]
 8006044:	e774      	b.n	8005f30 <_dtoa_r+0x960>
 8006046:	4638      	mov	r0, r7
 8006048:	e7ba      	b.n	8005fc0 <_dtoa_r+0x9f0>
 800604a:	2201      	movs	r2, #1
 800604c:	e7e1      	b.n	8006012 <_dtoa_r+0xa42>
 800604e:	9b05      	ldr	r3, [sp, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	db04      	blt.n	800605e <_dtoa_r+0xa8e>
 8006054:	9907      	ldr	r1, [sp, #28]
 8006056:	430b      	orrs	r3, r1
 8006058:	9906      	ldr	r1, [sp, #24]
 800605a:	430b      	orrs	r3, r1
 800605c:	d120      	bne.n	80060a0 <_dtoa_r+0xad0>
 800605e:	2a00      	cmp	r2, #0
 8006060:	dded      	ble.n	800603e <_dtoa_r+0xa6e>
 8006062:	4651      	mov	r1, sl
 8006064:	2201      	movs	r2, #1
 8006066:	4620      	mov	r0, r4
 8006068:	f000 fbb4 	bl	80067d4 <__lshift>
 800606c:	4631      	mov	r1, r6
 800606e:	4682      	mov	sl, r0
 8006070:	f000 fc1c 	bl	80068ac <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	dc03      	bgt.n	8006080 <_dtoa_r+0xab0>
 8006078:	d1e1      	bne.n	800603e <_dtoa_r+0xa6e>
 800607a:	f019 0f01 	tst.w	r9, #1
 800607e:	d0de      	beq.n	800603e <_dtoa_r+0xa6e>
 8006080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006084:	d1d8      	bne.n	8006038 <_dtoa_r+0xa68>
 8006086:	9a01      	ldr	r2, [sp, #4]
 8006088:	2339      	movs	r3, #57	; 0x39
 800608a:	7013      	strb	r3, [r2, #0]
 800608c:	462b      	mov	r3, r5
 800608e:	461d      	mov	r5, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006096:	2a39      	cmp	r2, #57	; 0x39
 8006098:	d06c      	beq.n	8006174 <_dtoa_r+0xba4>
 800609a:	3201      	adds	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e747      	b.n	8005f30 <_dtoa_r+0x960>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	dd07      	ble.n	80060b4 <_dtoa_r+0xae4>
 80060a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060a8:	d0ed      	beq.n	8006086 <_dtoa_r+0xab6>
 80060aa:	9a01      	ldr	r2, [sp, #4]
 80060ac:	f109 0301 	add.w	r3, r9, #1
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	e73d      	b.n	8005f30 <_dtoa_r+0x960>
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	9a08      	ldr	r2, [sp, #32]
 80060b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80060bc:	4293      	cmp	r3, r2
 80060be:	d043      	beq.n	8006148 <_dtoa_r+0xb78>
 80060c0:	4651      	mov	r1, sl
 80060c2:	2300      	movs	r3, #0
 80060c4:	220a      	movs	r2, #10
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f9d6 	bl	8006478 <__multadd>
 80060cc:	45b8      	cmp	r8, r7
 80060ce:	4682      	mov	sl, r0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	f04f 020a 	mov.w	r2, #10
 80060d8:	4641      	mov	r1, r8
 80060da:	4620      	mov	r0, r4
 80060dc:	d107      	bne.n	80060ee <_dtoa_r+0xb1e>
 80060de:	f000 f9cb 	bl	8006478 <__multadd>
 80060e2:	4680      	mov	r8, r0
 80060e4:	4607      	mov	r7, r0
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	3301      	adds	r3, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	e775      	b.n	8005fda <_dtoa_r+0xa0a>
 80060ee:	f000 f9c3 	bl	8006478 <__multadd>
 80060f2:	4639      	mov	r1, r7
 80060f4:	4680      	mov	r8, r0
 80060f6:	2300      	movs	r3, #0
 80060f8:	220a      	movs	r2, #10
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f9bc 	bl	8006478 <__multadd>
 8006100:	4607      	mov	r7, r0
 8006102:	e7f0      	b.n	80060e6 <_dtoa_r+0xb16>
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	9d00      	ldr	r5, [sp, #0]
 800610a:	4631      	mov	r1, r6
 800610c:	4650      	mov	r0, sl
 800610e:	f7ff f9d7 	bl	80054c0 <quorem>
 8006112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	f805 9b01 	strb.w	r9, [r5], #1
 800611c:	1aea      	subs	r2, r5, r3
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	4293      	cmp	r3, r2
 8006122:	dd07      	ble.n	8006134 <_dtoa_r+0xb64>
 8006124:	4651      	mov	r1, sl
 8006126:	2300      	movs	r3, #0
 8006128:	220a      	movs	r2, #10
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f9a4 	bl	8006478 <__multadd>
 8006130:	4682      	mov	sl, r0
 8006132:	e7ea      	b.n	800610a <_dtoa_r+0xb3a>
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	bfc8      	it	gt
 800613a:	461d      	movgt	r5, r3
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	bfd8      	it	le
 8006140:	2501      	movle	r5, #1
 8006142:	441d      	add	r5, r3
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	4651      	mov	r1, sl
 800614a:	2201      	movs	r2, #1
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fb41 	bl	80067d4 <__lshift>
 8006152:	4631      	mov	r1, r6
 8006154:	4682      	mov	sl, r0
 8006156:	f000 fba9 	bl	80068ac <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	dc96      	bgt.n	800608c <_dtoa_r+0xabc>
 800615e:	d102      	bne.n	8006166 <_dtoa_r+0xb96>
 8006160:	f019 0f01 	tst.w	r9, #1
 8006164:	d192      	bne.n	800608c <_dtoa_r+0xabc>
 8006166:	462b      	mov	r3, r5
 8006168:	461d      	mov	r5, r3
 800616a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616e:	2a30      	cmp	r2, #48	; 0x30
 8006170:	d0fa      	beq.n	8006168 <_dtoa_r+0xb98>
 8006172:	e6dd      	b.n	8005f30 <_dtoa_r+0x960>
 8006174:	9a00      	ldr	r2, [sp, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d189      	bne.n	800608e <_dtoa_r+0xabe>
 800617a:	f10b 0b01 	add.w	fp, fp, #1
 800617e:	2331      	movs	r3, #49	; 0x31
 8006180:	e796      	b.n	80060b0 <_dtoa_r+0xae0>
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <_dtoa_r+0xbdc>)
 8006184:	f7ff ba99 	b.w	80056ba <_dtoa_r+0xea>
 8006188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618a:	2b00      	cmp	r3, #0
 800618c:	f47f aa6d 	bne.w	800566a <_dtoa_r+0x9a>
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <_dtoa_r+0xbe0>)
 8006192:	f7ff ba92 	b.w	80056ba <_dtoa_r+0xea>
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dcb5      	bgt.n	8006108 <_dtoa_r+0xb38>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f73f aeb1 	bgt.w	8005f06 <_dtoa_r+0x936>
 80061a4:	e7b0      	b.n	8006108 <_dtoa_r+0xb38>
 80061a6:	bf00      	nop
 80061a8:	08008534 	.word	0x08008534
 80061ac:	08008494 	.word	0x08008494
 80061b0:	080084b8 	.word	0x080084b8

080061b4 <_free_r>:
 80061b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061b6:	2900      	cmp	r1, #0
 80061b8:	d044      	beq.n	8006244 <_free_r+0x90>
 80061ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061be:	9001      	str	r0, [sp, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f1a1 0404 	sub.w	r4, r1, #4
 80061c6:	bfb8      	it	lt
 80061c8:	18e4      	addlt	r4, r4, r3
 80061ca:	f000 f8e7 	bl	800639c <__malloc_lock>
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <_free_r+0x94>)
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x30>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	b003      	add	sp, #12
 80061dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e0:	f000 b8e2 	b.w	80063a8 <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x46>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1949      	addeq	r1, r1, r5
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x22>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x50>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x46>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1855      	adds	r5, r2, r1
 8006208:	42a5      	cmp	r5, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x70>
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	4421      	add	r1, r4
 8006210:	1854      	adds	r4, r2, r1
 8006212:	42a3      	cmp	r3, r4
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x26>
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	440c      	add	r4, r1
 8006220:	6014      	str	r4, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x26>
 8006224:	d902      	bls.n	800622c <_free_r+0x78>
 8006226:	230c      	movs	r3, #12
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x26>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1949      	addeq	r1, r1, r5
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x26>
 8006244:	b003      	add	sp, #12
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	20000524 	.word	0x20000524

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b823 	b.w	800629c <_malloc_r>
 8006256:	bf00      	nop
 8006258:	20000064 	.word	0x20000064

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0e      	ldr	r6, [pc, #56]	; (8006298 <sbrk_aligned+0x3c>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 fe40 	bl	8006eec <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fe3b 	bl	8006eec <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d00a      	beq.n	8006290 <sbrk_aligned+0x34>
 800627a:	1cc4      	adds	r4, r0, #3
 800627c:	f024 0403 	bic.w	r4, r4, #3
 8006280:	42a0      	cmp	r0, r4
 8006282:	d007      	beq.n	8006294 <sbrk_aligned+0x38>
 8006284:	1a21      	subs	r1, r4, r0
 8006286:	4628      	mov	r0, r5
 8006288:	f000 fe30 	bl	8006eec <_sbrk_r>
 800628c:	3001      	adds	r0, #1
 800628e:	d101      	bne.n	8006294 <sbrk_aligned+0x38>
 8006290:	f04f 34ff 	mov.w	r4, #4294967295
 8006294:	4620      	mov	r0, r4
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	20000528 	.word	0x20000528

0800629c <_malloc_r>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	1ccd      	adds	r5, r1, #3
 80062a2:	f025 0503 	bic.w	r5, r5, #3
 80062a6:	3508      	adds	r5, #8
 80062a8:	2d0c      	cmp	r5, #12
 80062aa:	bf38      	it	cc
 80062ac:	250c      	movcc	r5, #12
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	4607      	mov	r7, r0
 80062b2:	db01      	blt.n	80062b8 <_malloc_r+0x1c>
 80062b4:	42a9      	cmp	r1, r5
 80062b6:	d905      	bls.n	80062c4 <_malloc_r+0x28>
 80062b8:	230c      	movs	r3, #12
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	2600      	movs	r6, #0
 80062be:	4630      	mov	r0, r6
 80062c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006398 <_malloc_r+0xfc>
 80062c8:	f000 f868 	bl	800639c <__malloc_lock>
 80062cc:	f8d8 3000 	ldr.w	r3, [r8]
 80062d0:	461c      	mov	r4, r3
 80062d2:	bb5c      	cbnz	r4, 800632c <_malloc_r+0x90>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ffc0 	bl	800625c <sbrk_aligned>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	4604      	mov	r4, r0
 80062e0:	d155      	bne.n	800638e <_malloc_r+0xf2>
 80062e2:	f8d8 4000 	ldr.w	r4, [r8]
 80062e6:	4626      	mov	r6, r4
 80062e8:	2e00      	cmp	r6, #0
 80062ea:	d145      	bne.n	8006378 <_malloc_r+0xdc>
 80062ec:	2c00      	cmp	r4, #0
 80062ee:	d048      	beq.n	8006382 <_malloc_r+0xe6>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	4631      	mov	r1, r6
 80062f4:	4638      	mov	r0, r7
 80062f6:	eb04 0903 	add.w	r9, r4, r3
 80062fa:	f000 fdf7 	bl	8006eec <_sbrk_r>
 80062fe:	4581      	cmp	r9, r0
 8006300:	d13f      	bne.n	8006382 <_malloc_r+0xe6>
 8006302:	6821      	ldr	r1, [r4, #0]
 8006304:	1a6d      	subs	r5, r5, r1
 8006306:	4629      	mov	r1, r5
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff ffa7 	bl	800625c <sbrk_aligned>
 800630e:	3001      	adds	r0, #1
 8006310:	d037      	beq.n	8006382 <_malloc_r+0xe6>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	442b      	add	r3, r5
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	f8d8 3000 	ldr.w	r3, [r8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d038      	beq.n	8006392 <_malloc_r+0xf6>
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	42a2      	cmp	r2, r4
 8006324:	d12b      	bne.n	800637e <_malloc_r+0xe2>
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	e00f      	b.n	800634c <_malloc_r+0xb0>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	1b52      	subs	r2, r2, r5
 8006330:	d41f      	bmi.n	8006372 <_malloc_r+0xd6>
 8006332:	2a0b      	cmp	r2, #11
 8006334:	d917      	bls.n	8006366 <_malloc_r+0xca>
 8006336:	1961      	adds	r1, r4, r5
 8006338:	42a3      	cmp	r3, r4
 800633a:	6025      	str	r5, [r4, #0]
 800633c:	bf18      	it	ne
 800633e:	6059      	strne	r1, [r3, #4]
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	bf08      	it	eq
 8006344:	f8c8 1000 	streq.w	r1, [r8]
 8006348:	5162      	str	r2, [r4, r5]
 800634a:	604b      	str	r3, [r1, #4]
 800634c:	4638      	mov	r0, r7
 800634e:	f104 060b 	add.w	r6, r4, #11
 8006352:	f000 f829 	bl	80063a8 <__malloc_unlock>
 8006356:	f026 0607 	bic.w	r6, r6, #7
 800635a:	1d23      	adds	r3, r4, #4
 800635c:	1af2      	subs	r2, r6, r3
 800635e:	d0ae      	beq.n	80062be <_malloc_r+0x22>
 8006360:	1b9b      	subs	r3, r3, r6
 8006362:	50a3      	str	r3, [r4, r2]
 8006364:	e7ab      	b.n	80062be <_malloc_r+0x22>
 8006366:	42a3      	cmp	r3, r4
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	d1dd      	bne.n	8006328 <_malloc_r+0x8c>
 800636c:	f8c8 2000 	str.w	r2, [r8]
 8006370:	e7ec      	b.n	800634c <_malloc_r+0xb0>
 8006372:	4623      	mov	r3, r4
 8006374:	6864      	ldr	r4, [r4, #4]
 8006376:	e7ac      	b.n	80062d2 <_malloc_r+0x36>
 8006378:	4634      	mov	r4, r6
 800637a:	6876      	ldr	r6, [r6, #4]
 800637c:	e7b4      	b.n	80062e8 <_malloc_r+0x4c>
 800637e:	4613      	mov	r3, r2
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x80>
 8006382:	230c      	movs	r3, #12
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4638      	mov	r0, r7
 8006388:	f000 f80e 	bl	80063a8 <__malloc_unlock>
 800638c:	e797      	b.n	80062be <_malloc_r+0x22>
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	e7dc      	b.n	800634c <_malloc_r+0xb0>
 8006392:	605b      	str	r3, [r3, #4]
 8006394:	deff      	udf	#255	; 0xff
 8006396:	bf00      	nop
 8006398:	20000524 	.word	0x20000524

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_lock+0x8>)
 800639e:	f7ff b88d 	b.w	80054bc <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000520 	.word	0x20000520

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f7ff b888 	b.w	80054be <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000520 	.word	0x20000520

080063b4 <_Balloc>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	69c6      	ldr	r6, [r0, #28]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	b976      	cbnz	r6, 80063dc <_Balloc+0x28>
 80063be:	2010      	movs	r0, #16
 80063c0:	f7ff ff44 	bl	800624c <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	61e0      	str	r0, [r4, #28]
 80063c8:	b920      	cbnz	r0, 80063d4 <_Balloc+0x20>
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <_Balloc+0x78>)
 80063cc:	4818      	ldr	r0, [pc, #96]	; (8006430 <_Balloc+0x7c>)
 80063ce:	216b      	movs	r1, #107	; 0x6b
 80063d0:	f000 fdaa 	bl	8006f28 <__assert_func>
 80063d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d8:	6006      	str	r6, [r0, #0]
 80063da:	60c6      	str	r6, [r0, #12]
 80063dc:	69e6      	ldr	r6, [r4, #28]
 80063de:	68f3      	ldr	r3, [r6, #12]
 80063e0:	b183      	cbz	r3, 8006404 <_Balloc+0x50>
 80063e2:	69e3      	ldr	r3, [r4, #28]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ea:	b9b8      	cbnz	r0, 800641c <_Balloc+0x68>
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f605 	lsl.w	r6, r1, r5
 80063f2:	1d72      	adds	r2, r6, #5
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fdb4 	bl	8006f64 <_calloc_r>
 80063fc:	b160      	cbz	r0, 8006418 <_Balloc+0x64>
 80063fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006402:	e00e      	b.n	8006422 <_Balloc+0x6e>
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	2104      	movs	r1, #4
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fdab 	bl	8006f64 <_calloc_r>
 800640e:	69e3      	ldr	r3, [r4, #28]
 8006410:	60f0      	str	r0, [r6, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <_Balloc+0x2e>
 8006418:	2000      	movs	r0, #0
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	6802      	ldr	r2, [r0, #0]
 800641e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006422:	2300      	movs	r3, #0
 8006424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006428:	e7f7      	b.n	800641a <_Balloc+0x66>
 800642a:	bf00      	nop
 800642c:	080084c5 	.word	0x080084c5
 8006430:	08008545 	.word	0x08008545

08006434 <_Bfree>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	69c6      	ldr	r6, [r0, #28]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b976      	cbnz	r6, 800645c <_Bfree+0x28>
 800643e:	2010      	movs	r0, #16
 8006440:	f7ff ff04 	bl	800624c <malloc>
 8006444:	4602      	mov	r2, r0
 8006446:	61e8      	str	r0, [r5, #28]
 8006448:	b920      	cbnz	r0, 8006454 <_Bfree+0x20>
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <_Bfree+0x3c>)
 800644c:	4809      	ldr	r0, [pc, #36]	; (8006474 <_Bfree+0x40>)
 800644e:	218f      	movs	r1, #143	; 0x8f
 8006450:	f000 fd6a 	bl	8006f28 <__assert_func>
 8006454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006458:	6006      	str	r6, [r0, #0]
 800645a:	60c6      	str	r6, [r0, #12]
 800645c:	b13c      	cbz	r4, 800646e <_Bfree+0x3a>
 800645e:	69eb      	ldr	r3, [r5, #28]
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	080084c5 	.word	0x080084c5
 8006474:	08008545 	.word	0x08008545

08006478 <__multadd>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	690d      	ldr	r5, [r1, #16]
 800647e:	4607      	mov	r7, r0
 8006480:	460c      	mov	r4, r1
 8006482:	461e      	mov	r6, r3
 8006484:	f101 0c14 	add.w	ip, r1, #20
 8006488:	2000      	movs	r0, #0
 800648a:	f8dc 3000 	ldr.w	r3, [ip]
 800648e:	b299      	uxth	r1, r3
 8006490:	fb02 6101 	mla	r1, r2, r1, r6
 8006494:	0c1e      	lsrs	r6, r3, #16
 8006496:	0c0b      	lsrs	r3, r1, #16
 8006498:	fb02 3306 	mla	r3, r2, r6, r3
 800649c:	b289      	uxth	r1, r1
 800649e:	3001      	adds	r0, #1
 80064a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a4:	4285      	cmp	r5, r0
 80064a6:	f84c 1b04 	str.w	r1, [ip], #4
 80064aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064ae:	dcec      	bgt.n	800648a <__multadd+0x12>
 80064b0:	b30e      	cbz	r6, 80064f6 <__multadd+0x7e>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc19      	bgt.n	80064ec <__multadd+0x74>
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	3101      	adds	r1, #1
 80064be:	f7ff ff79 	bl	80063b4 <_Balloc>
 80064c2:	4680      	mov	r8, r0
 80064c4:	b928      	cbnz	r0, 80064d2 <__multadd+0x5a>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <__multadd+0x84>)
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <__multadd+0x88>)
 80064cc:	21ba      	movs	r1, #186	; 0xba
 80064ce:	f000 fd2b 	bl	8006f28 <__assert_func>
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	3202      	adds	r2, #2
 80064d6:	f104 010c 	add.w	r1, r4, #12
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	300c      	adds	r0, #12
 80064de:	f000 fd15 	bl	8006f0c <memcpy>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa5 	bl	8006434 <_Bfree>
 80064ea:	4644      	mov	r4, r8
 80064ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f0:	3501      	adds	r5, #1
 80064f2:	615e      	str	r6, [r3, #20]
 80064f4:	6125      	str	r5, [r4, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	08008534 	.word	0x08008534
 8006500:	08008545 	.word	0x08008545

08006504 <__hi0bits>:
 8006504:	0c03      	lsrs	r3, r0, #16
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	b9d3      	cbnz	r3, 8006540 <__hi0bits+0x3c>
 800650a:	0400      	lsls	r0, r0, #16
 800650c:	2310      	movs	r3, #16
 800650e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006512:	bf04      	itt	eq
 8006514:	0200      	lsleq	r0, r0, #8
 8006516:	3308      	addeq	r3, #8
 8006518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800651c:	bf04      	itt	eq
 800651e:	0100      	lsleq	r0, r0, #4
 8006520:	3304      	addeq	r3, #4
 8006522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006526:	bf04      	itt	eq
 8006528:	0080      	lsleq	r0, r0, #2
 800652a:	3302      	addeq	r3, #2
 800652c:	2800      	cmp	r0, #0
 800652e:	db05      	blt.n	800653c <__hi0bits+0x38>
 8006530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006534:	f103 0301 	add.w	r3, r3, #1
 8006538:	bf08      	it	eq
 800653a:	2320      	moveq	r3, #32
 800653c:	4618      	mov	r0, r3
 800653e:	4770      	bx	lr
 8006540:	2300      	movs	r3, #0
 8006542:	e7e4      	b.n	800650e <__hi0bits+0xa>

08006544 <__lo0bits>:
 8006544:	6803      	ldr	r3, [r0, #0]
 8006546:	f013 0207 	ands.w	r2, r3, #7
 800654a:	d00c      	beq.n	8006566 <__lo0bits+0x22>
 800654c:	07d9      	lsls	r1, r3, #31
 800654e:	d422      	bmi.n	8006596 <__lo0bits+0x52>
 8006550:	079a      	lsls	r2, r3, #30
 8006552:	bf49      	itett	mi
 8006554:	085b      	lsrmi	r3, r3, #1
 8006556:	089b      	lsrpl	r3, r3, #2
 8006558:	6003      	strmi	r3, [r0, #0]
 800655a:	2201      	movmi	r2, #1
 800655c:	bf5c      	itt	pl
 800655e:	6003      	strpl	r3, [r0, #0]
 8006560:	2202      	movpl	r2, #2
 8006562:	4610      	mov	r0, r2
 8006564:	4770      	bx	lr
 8006566:	b299      	uxth	r1, r3
 8006568:	b909      	cbnz	r1, 800656e <__lo0bits+0x2a>
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	2210      	movs	r2, #16
 800656e:	b2d9      	uxtb	r1, r3
 8006570:	b909      	cbnz	r1, 8006576 <__lo0bits+0x32>
 8006572:	3208      	adds	r2, #8
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	0719      	lsls	r1, r3, #28
 8006578:	bf04      	itt	eq
 800657a:	091b      	lsreq	r3, r3, #4
 800657c:	3204      	addeq	r2, #4
 800657e:	0799      	lsls	r1, r3, #30
 8006580:	bf04      	itt	eq
 8006582:	089b      	lsreq	r3, r3, #2
 8006584:	3202      	addeq	r2, #2
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d403      	bmi.n	8006592 <__lo0bits+0x4e>
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	f102 0201 	add.w	r2, r2, #1
 8006590:	d003      	beq.n	800659a <__lo0bits+0x56>
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	e7e5      	b.n	8006562 <__lo0bits+0x1e>
 8006596:	2200      	movs	r2, #0
 8006598:	e7e3      	b.n	8006562 <__lo0bits+0x1e>
 800659a:	2220      	movs	r2, #32
 800659c:	e7e1      	b.n	8006562 <__lo0bits+0x1e>
	...

080065a0 <__i2b>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	2101      	movs	r1, #1
 80065a6:	f7ff ff05 	bl	80063b4 <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__i2b+0x1a>
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <__i2b+0x24>)
 80065b0:	4805      	ldr	r0, [pc, #20]	; (80065c8 <__i2b+0x28>)
 80065b2:	f240 1145 	movw	r1, #325	; 0x145
 80065b6:	f000 fcb7 	bl	8006f28 <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	6144      	str	r4, [r0, #20]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	08008534 	.word	0x08008534
 80065c8:	08008545 	.word	0x08008545

080065cc <__multiply>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4691      	mov	r9, r2
 80065d2:	690a      	ldr	r2, [r1, #16]
 80065d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	bfb8      	it	lt
 80065dc:	460b      	movlt	r3, r1
 80065de:	460c      	mov	r4, r1
 80065e0:	bfbc      	itt	lt
 80065e2:	464c      	movlt	r4, r9
 80065e4:	4699      	movlt	r9, r3
 80065e6:	6927      	ldr	r7, [r4, #16]
 80065e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065ec:	68a3      	ldr	r3, [r4, #8]
 80065ee:	6861      	ldr	r1, [r4, #4]
 80065f0:	eb07 060a 	add.w	r6, r7, sl
 80065f4:	42b3      	cmp	r3, r6
 80065f6:	b085      	sub	sp, #20
 80065f8:	bfb8      	it	lt
 80065fa:	3101      	addlt	r1, #1
 80065fc:	f7ff feda 	bl	80063b4 <_Balloc>
 8006600:	b930      	cbnz	r0, 8006610 <__multiply+0x44>
 8006602:	4602      	mov	r2, r0
 8006604:	4b44      	ldr	r3, [pc, #272]	; (8006718 <__multiply+0x14c>)
 8006606:	4845      	ldr	r0, [pc, #276]	; (800671c <__multiply+0x150>)
 8006608:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800660c:	f000 fc8c 	bl	8006f28 <__assert_func>
 8006610:	f100 0514 	add.w	r5, r0, #20
 8006614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006618:	462b      	mov	r3, r5
 800661a:	2200      	movs	r2, #0
 800661c:	4543      	cmp	r3, r8
 800661e:	d321      	bcc.n	8006664 <__multiply+0x98>
 8006620:	f104 0314 	add.w	r3, r4, #20
 8006624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006628:	f109 0314 	add.w	r3, r9, #20
 800662c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006630:	9202      	str	r2, [sp, #8]
 8006632:	1b3a      	subs	r2, r7, r4
 8006634:	3a15      	subs	r2, #21
 8006636:	f022 0203 	bic.w	r2, r2, #3
 800663a:	3204      	adds	r2, #4
 800663c:	f104 0115 	add.w	r1, r4, #21
 8006640:	428f      	cmp	r7, r1
 8006642:	bf38      	it	cc
 8006644:	2204      	movcc	r2, #4
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9a02      	ldr	r2, [sp, #8]
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d80c      	bhi.n	800666a <__multiply+0x9e>
 8006650:	2e00      	cmp	r6, #0
 8006652:	dd03      	ble.n	800665c <__multiply+0x90>
 8006654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05b      	beq.n	8006714 <__multiply+0x148>
 800665c:	6106      	str	r6, [r0, #16]
 800665e:	b005      	add	sp, #20
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	f843 2b04 	str.w	r2, [r3], #4
 8006668:	e7d8      	b.n	800661c <__multiply+0x50>
 800666a:	f8b3 a000 	ldrh.w	sl, [r3]
 800666e:	f1ba 0f00 	cmp.w	sl, #0
 8006672:	d024      	beq.n	80066be <__multiply+0xf2>
 8006674:	f104 0e14 	add.w	lr, r4, #20
 8006678:	46a9      	mov	r9, r5
 800667a:	f04f 0c00 	mov.w	ip, #0
 800667e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006682:	f8d9 1000 	ldr.w	r1, [r9]
 8006686:	fa1f fb82 	uxth.w	fp, r2
 800668a:	b289      	uxth	r1, r1
 800668c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006694:	f8d9 2000 	ldr.w	r2, [r9]
 8006698:	4461      	add	r1, ip
 800669a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800669e:	fb0a c20b 	mla	r2, sl, fp, ip
 80066a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066a6:	b289      	uxth	r1, r1
 80066a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ac:	4577      	cmp	r7, lr
 80066ae:	f849 1b04 	str.w	r1, [r9], #4
 80066b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066b6:	d8e2      	bhi.n	800667e <__multiply+0xb2>
 80066b8:	9a01      	ldr	r2, [sp, #4]
 80066ba:	f845 c002 	str.w	ip, [r5, r2]
 80066be:	9a03      	ldr	r2, [sp, #12]
 80066c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066c4:	3304      	adds	r3, #4
 80066c6:	f1b9 0f00 	cmp.w	r9, #0
 80066ca:	d021      	beq.n	8006710 <__multiply+0x144>
 80066cc:	6829      	ldr	r1, [r5, #0]
 80066ce:	f104 0c14 	add.w	ip, r4, #20
 80066d2:	46ae      	mov	lr, r5
 80066d4:	f04f 0a00 	mov.w	sl, #0
 80066d8:	f8bc b000 	ldrh.w	fp, [ip]
 80066dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066e0:	fb09 220b 	mla	r2, r9, fp, r2
 80066e4:	4452      	add	r2, sl
 80066e6:	b289      	uxth	r1, r1
 80066e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ec:	f84e 1b04 	str.w	r1, [lr], #4
 80066f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066f8:	f8be 1000 	ldrh.w	r1, [lr]
 80066fc:	fb09 110a 	mla	r1, r9, sl, r1
 8006700:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006704:	4567      	cmp	r7, ip
 8006706:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800670a:	d8e5      	bhi.n	80066d8 <__multiply+0x10c>
 800670c:	9a01      	ldr	r2, [sp, #4]
 800670e:	50a9      	str	r1, [r5, r2]
 8006710:	3504      	adds	r5, #4
 8006712:	e799      	b.n	8006648 <__multiply+0x7c>
 8006714:	3e01      	subs	r6, #1
 8006716:	e79b      	b.n	8006650 <__multiply+0x84>
 8006718:	08008534 	.word	0x08008534
 800671c:	08008545 	.word	0x08008545

08006720 <__pow5mult>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	f012 0203 	ands.w	r2, r2, #3
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	d007      	beq.n	8006740 <__pow5mult+0x20>
 8006730:	4c25      	ldr	r4, [pc, #148]	; (80067c8 <__pow5mult+0xa8>)
 8006732:	3a01      	subs	r2, #1
 8006734:	2300      	movs	r3, #0
 8006736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800673a:	f7ff fe9d 	bl	8006478 <__multadd>
 800673e:	4607      	mov	r7, r0
 8006740:	10ad      	asrs	r5, r5, #2
 8006742:	d03d      	beq.n	80067c0 <__pow5mult+0xa0>
 8006744:	69f4      	ldr	r4, [r6, #28]
 8006746:	b97c      	cbnz	r4, 8006768 <__pow5mult+0x48>
 8006748:	2010      	movs	r0, #16
 800674a:	f7ff fd7f 	bl	800624c <malloc>
 800674e:	4602      	mov	r2, r0
 8006750:	61f0      	str	r0, [r6, #28]
 8006752:	b928      	cbnz	r0, 8006760 <__pow5mult+0x40>
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <__pow5mult+0xac>)
 8006756:	481e      	ldr	r0, [pc, #120]	; (80067d0 <__pow5mult+0xb0>)
 8006758:	f240 11b3 	movw	r1, #435	; 0x1b3
 800675c:	f000 fbe4 	bl	8006f28 <__assert_func>
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800676c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006770:	b94c      	cbnz	r4, 8006786 <__pow5mult+0x66>
 8006772:	f240 2171 	movw	r1, #625	; 0x271
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff12 	bl	80065a0 <__i2b>
 800677c:	2300      	movs	r3, #0
 800677e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006782:	4604      	mov	r4, r0
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	f04f 0900 	mov.w	r9, #0
 800678a:	07eb      	lsls	r3, r5, #31
 800678c:	d50a      	bpl.n	80067a4 <__pow5mult+0x84>
 800678e:	4639      	mov	r1, r7
 8006790:	4622      	mov	r2, r4
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ff1a 	bl	80065cc <__multiply>
 8006798:	4639      	mov	r1, r7
 800679a:	4680      	mov	r8, r0
 800679c:	4630      	mov	r0, r6
 800679e:	f7ff fe49 	bl	8006434 <_Bfree>
 80067a2:	4647      	mov	r7, r8
 80067a4:	106d      	asrs	r5, r5, #1
 80067a6:	d00b      	beq.n	80067c0 <__pow5mult+0xa0>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	b938      	cbnz	r0, 80067bc <__pow5mult+0x9c>
 80067ac:	4622      	mov	r2, r4
 80067ae:	4621      	mov	r1, r4
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff ff0b 	bl	80065cc <__multiply>
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	f8c0 9000 	str.w	r9, [r0]
 80067bc:	4604      	mov	r4, r0
 80067be:	e7e4      	b.n	800678a <__pow5mult+0x6a>
 80067c0:	4638      	mov	r0, r7
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	bf00      	nop
 80067c8:	08008690 	.word	0x08008690
 80067cc:	080084c5 	.word	0x080084c5
 80067d0:	08008545 	.word	0x08008545

080067d4 <__lshift>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	6849      	ldr	r1, [r1, #4]
 80067dc:	6923      	ldr	r3, [r4, #16]
 80067de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	4607      	mov	r7, r0
 80067e6:	4691      	mov	r9, r2
 80067e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067ec:	f108 0601 	add.w	r6, r8, #1
 80067f0:	42b3      	cmp	r3, r6
 80067f2:	db0b      	blt.n	800680c <__lshift+0x38>
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fddd 	bl	80063b4 <_Balloc>
 80067fa:	4605      	mov	r5, r0
 80067fc:	b948      	cbnz	r0, 8006812 <__lshift+0x3e>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <__lshift+0xd0>)
 8006802:	4829      	ldr	r0, [pc, #164]	; (80068a8 <__lshift+0xd4>)
 8006804:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006808:	f000 fb8e 	bl	8006f28 <__assert_func>
 800680c:	3101      	adds	r1, #1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	e7ee      	b.n	80067f0 <__lshift+0x1c>
 8006812:	2300      	movs	r3, #0
 8006814:	f100 0114 	add.w	r1, r0, #20
 8006818:	f100 0210 	add.w	r2, r0, #16
 800681c:	4618      	mov	r0, r3
 800681e:	4553      	cmp	r3, sl
 8006820:	db33      	blt.n	800688a <__lshift+0xb6>
 8006822:	6920      	ldr	r0, [r4, #16]
 8006824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	f019 091f 	ands.w	r9, r9, #31
 8006830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006838:	d02b      	beq.n	8006892 <__lshift+0xbe>
 800683a:	f1c9 0e20 	rsb	lr, r9, #32
 800683e:	468a      	mov	sl, r1
 8006840:	2200      	movs	r2, #0
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	fa00 f009 	lsl.w	r0, r0, r9
 8006848:	4310      	orrs	r0, r2
 800684a:	f84a 0b04 	str.w	r0, [sl], #4
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	459c      	cmp	ip, r3
 8006854:	fa22 f20e 	lsr.w	r2, r2, lr
 8006858:	d8f3      	bhi.n	8006842 <__lshift+0x6e>
 800685a:	ebac 0304 	sub.w	r3, ip, r4
 800685e:	3b15      	subs	r3, #21
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	3304      	adds	r3, #4
 8006866:	f104 0015 	add.w	r0, r4, #21
 800686a:	4584      	cmp	ip, r0
 800686c:	bf38      	it	cc
 800686e:	2304      	movcc	r3, #4
 8006870:	50ca      	str	r2, [r1, r3]
 8006872:	b10a      	cbz	r2, 8006878 <__lshift+0xa4>
 8006874:	f108 0602 	add.w	r6, r8, #2
 8006878:	3e01      	subs	r6, #1
 800687a:	4638      	mov	r0, r7
 800687c:	612e      	str	r6, [r5, #16]
 800687e:	4621      	mov	r1, r4
 8006880:	f7ff fdd8 	bl	8006434 <_Bfree>
 8006884:	4628      	mov	r0, r5
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	f842 0f04 	str.w	r0, [r2, #4]!
 800688e:	3301      	adds	r3, #1
 8006890:	e7c5      	b.n	800681e <__lshift+0x4a>
 8006892:	3904      	subs	r1, #4
 8006894:	f853 2b04 	ldr.w	r2, [r3], #4
 8006898:	f841 2f04 	str.w	r2, [r1, #4]!
 800689c:	459c      	cmp	ip, r3
 800689e:	d8f9      	bhi.n	8006894 <__lshift+0xc0>
 80068a0:	e7ea      	b.n	8006878 <__lshift+0xa4>
 80068a2:	bf00      	nop
 80068a4:	08008534 	.word	0x08008534
 80068a8:	08008545 	.word	0x08008545

080068ac <__mcmp>:
 80068ac:	b530      	push	{r4, r5, lr}
 80068ae:	6902      	ldr	r2, [r0, #16]
 80068b0:	690c      	ldr	r4, [r1, #16]
 80068b2:	1b12      	subs	r2, r2, r4
 80068b4:	d10e      	bne.n	80068d4 <__mcmp+0x28>
 80068b6:	f100 0314 	add.w	r3, r0, #20
 80068ba:	3114      	adds	r1, #20
 80068bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068cc:	42a5      	cmp	r5, r4
 80068ce:	d003      	beq.n	80068d8 <__mcmp+0x2c>
 80068d0:	d305      	bcc.n	80068de <__mcmp+0x32>
 80068d2:	2201      	movs	r2, #1
 80068d4:	4610      	mov	r0, r2
 80068d6:	bd30      	pop	{r4, r5, pc}
 80068d8:	4283      	cmp	r3, r0
 80068da:	d3f3      	bcc.n	80068c4 <__mcmp+0x18>
 80068dc:	e7fa      	b.n	80068d4 <__mcmp+0x28>
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	e7f7      	b.n	80068d4 <__mcmp+0x28>

080068e4 <__mdiff>:
 80068e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	460c      	mov	r4, r1
 80068ea:	4606      	mov	r6, r0
 80068ec:	4611      	mov	r1, r2
 80068ee:	4620      	mov	r0, r4
 80068f0:	4690      	mov	r8, r2
 80068f2:	f7ff ffdb 	bl	80068ac <__mcmp>
 80068f6:	1e05      	subs	r5, r0, #0
 80068f8:	d110      	bne.n	800691c <__mdiff+0x38>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff fd59 	bl	80063b4 <_Balloc>
 8006902:	b930      	cbnz	r0, 8006912 <__mdiff+0x2e>
 8006904:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <__mdiff+0x10c>)
 8006906:	4602      	mov	r2, r0
 8006908:	f240 2137 	movw	r1, #567	; 0x237
 800690c:	4839      	ldr	r0, [pc, #228]	; (80069f4 <__mdiff+0x110>)
 800690e:	f000 fb0b 	bl	8006f28 <__assert_func>
 8006912:	2301      	movs	r3, #1
 8006914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	bfa4      	itt	ge
 800691e:	4643      	movge	r3, r8
 8006920:	46a0      	movge	r8, r4
 8006922:	4630      	mov	r0, r6
 8006924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006928:	bfa6      	itte	ge
 800692a:	461c      	movge	r4, r3
 800692c:	2500      	movge	r5, #0
 800692e:	2501      	movlt	r5, #1
 8006930:	f7ff fd40 	bl	80063b4 <_Balloc>
 8006934:	b920      	cbnz	r0, 8006940 <__mdiff+0x5c>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__mdiff+0x10c>)
 8006938:	4602      	mov	r2, r0
 800693a:	f240 2145 	movw	r1, #581	; 0x245
 800693e:	e7e5      	b.n	800690c <__mdiff+0x28>
 8006940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006944:	6926      	ldr	r6, [r4, #16]
 8006946:	60c5      	str	r5, [r0, #12]
 8006948:	f104 0914 	add.w	r9, r4, #20
 800694c:	f108 0514 	add.w	r5, r8, #20
 8006950:	f100 0e14 	add.w	lr, r0, #20
 8006954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800695c:	f108 0210 	add.w	r2, r8, #16
 8006960:	46f2      	mov	sl, lr
 8006962:	2100      	movs	r1, #0
 8006964:	f859 3b04 	ldr.w	r3, [r9], #4
 8006968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800696c:	fa11 f88b 	uxtah	r8, r1, fp
 8006970:	b299      	uxth	r1, r3
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	eba8 0801 	sub.w	r8, r8, r1
 8006978:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800697c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006980:	fa1f f888 	uxth.w	r8, r8
 8006984:	1419      	asrs	r1, r3, #16
 8006986:	454e      	cmp	r6, r9
 8006988:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800698c:	f84a 3b04 	str.w	r3, [sl], #4
 8006990:	d8e8      	bhi.n	8006964 <__mdiff+0x80>
 8006992:	1b33      	subs	r3, r6, r4
 8006994:	3b15      	subs	r3, #21
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	3304      	adds	r3, #4
 800699c:	3415      	adds	r4, #21
 800699e:	42a6      	cmp	r6, r4
 80069a0:	bf38      	it	cc
 80069a2:	2304      	movcc	r3, #4
 80069a4:	441d      	add	r5, r3
 80069a6:	4473      	add	r3, lr
 80069a8:	469e      	mov	lr, r3
 80069aa:	462e      	mov	r6, r5
 80069ac:	4566      	cmp	r6, ip
 80069ae:	d30e      	bcc.n	80069ce <__mdiff+0xea>
 80069b0:	f10c 0203 	add.w	r2, ip, #3
 80069b4:	1b52      	subs	r2, r2, r5
 80069b6:	f022 0203 	bic.w	r2, r2, #3
 80069ba:	3d03      	subs	r5, #3
 80069bc:	45ac      	cmp	ip, r5
 80069be:	bf38      	it	cc
 80069c0:	2200      	movcc	r2, #0
 80069c2:	4413      	add	r3, r2
 80069c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069c8:	b17a      	cbz	r2, 80069ea <__mdiff+0x106>
 80069ca:	6107      	str	r7, [r0, #16]
 80069cc:	e7a4      	b.n	8006918 <__mdiff+0x34>
 80069ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80069d2:	fa11 f288 	uxtah	r2, r1, r8
 80069d6:	1414      	asrs	r4, r2, #16
 80069d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069dc:	b292      	uxth	r2, r2
 80069de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80069e2:	f84e 2b04 	str.w	r2, [lr], #4
 80069e6:	1421      	asrs	r1, r4, #16
 80069e8:	e7e0      	b.n	80069ac <__mdiff+0xc8>
 80069ea:	3f01      	subs	r7, #1
 80069ec:	e7ea      	b.n	80069c4 <__mdiff+0xe0>
 80069ee:	bf00      	nop
 80069f0:	08008534 	.word	0x08008534
 80069f4:	08008545 	.word	0x08008545

080069f8 <__d2b>:
 80069f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	460f      	mov	r7, r1
 80069fe:	2101      	movs	r1, #1
 8006a00:	ec59 8b10 	vmov	r8, r9, d0
 8006a04:	4616      	mov	r6, r2
 8006a06:	f7ff fcd5 	bl	80063b4 <_Balloc>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	b930      	cbnz	r0, 8006a1c <__d2b+0x24>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <__d2b+0xac>)
 8006a12:	4825      	ldr	r0, [pc, #148]	; (8006aa8 <__d2b+0xb0>)
 8006a14:	f240 310f 	movw	r1, #783	; 0x30f
 8006a18:	f000 fa86 	bl	8006f28 <__assert_func>
 8006a1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a24:	bb2d      	cbnz	r5, 8006a72 <__d2b+0x7a>
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f1b8 0300 	subs.w	r3, r8, #0
 8006a2c:	d026      	beq.n	8006a7c <__d2b+0x84>
 8006a2e:	4668      	mov	r0, sp
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	f7ff fd87 	bl	8006544 <__lo0bits>
 8006a36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a3a:	b1e8      	cbz	r0, 8006a78 <__d2b+0x80>
 8006a3c:	f1c0 0320 	rsb	r3, r0, #32
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	430b      	orrs	r3, r1
 8006a46:	40c2      	lsrs	r2, r0
 8006a48:	6163      	str	r3, [r4, #20]
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	61a3      	str	r3, [r4, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2202      	movne	r2, #2
 8006a56:	2201      	moveq	r2, #1
 8006a58:	6122      	str	r2, [r4, #16]
 8006a5a:	b1bd      	cbz	r5, 8006a8c <__d2b+0x94>
 8006a5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a60:	4405      	add	r5, r0
 8006a62:	603d      	str	r5, [r7, #0]
 8006a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a76:	e7d6      	b.n	8006a26 <__d2b+0x2e>
 8006a78:	6161      	str	r1, [r4, #20]
 8006a7a:	e7e7      	b.n	8006a4c <__d2b+0x54>
 8006a7c:	a801      	add	r0, sp, #4
 8006a7e:	f7ff fd61 	bl	8006544 <__lo0bits>
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	6163      	str	r3, [r4, #20]
 8006a86:	3020      	adds	r0, #32
 8006a88:	2201      	movs	r2, #1
 8006a8a:	e7e5      	b.n	8006a58 <__d2b+0x60>
 8006a8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a94:	6038      	str	r0, [r7, #0]
 8006a96:	6918      	ldr	r0, [r3, #16]
 8006a98:	f7ff fd34 	bl	8006504 <__hi0bits>
 8006a9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aa0:	e7e2      	b.n	8006a68 <__d2b+0x70>
 8006aa2:	bf00      	nop
 8006aa4:	08008534 	.word	0x08008534
 8006aa8:	08008545 	.word	0x08008545

08006aac <__ssputs_r>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	688e      	ldr	r6, [r1, #8]
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	42be      	cmp	r6, r7
 8006ab6:	680b      	ldr	r3, [r1, #0]
 8006ab8:	4682      	mov	sl, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	4690      	mov	r8, r2
 8006abe:	d82c      	bhi.n	8006b1a <__ssputs_r+0x6e>
 8006ac0:	898a      	ldrh	r2, [r1, #12]
 8006ac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ac6:	d026      	beq.n	8006b16 <__ssputs_r+0x6a>
 8006ac8:	6965      	ldr	r5, [r4, #20]
 8006aca:	6909      	ldr	r1, [r1, #16]
 8006acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ad0:	eba3 0901 	sub.w	r9, r3, r1
 8006ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ad8:	1c7b      	adds	r3, r7, #1
 8006ada:	444b      	add	r3, r9
 8006adc:	106d      	asrs	r5, r5, #1
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	bf38      	it	cc
 8006ae2:	461d      	movcc	r5, r3
 8006ae4:	0553      	lsls	r3, r2, #21
 8006ae6:	d527      	bpl.n	8006b38 <__ssputs_r+0x8c>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7ff fbd7 	bl	800629c <_malloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	b360      	cbz	r0, 8006b4c <__ssputs_r+0xa0>
 8006af2:	6921      	ldr	r1, [r4, #16]
 8006af4:	464a      	mov	r2, r9
 8006af6:	f000 fa09 	bl	8006f0c <memcpy>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	6126      	str	r6, [r4, #16]
 8006b08:	6165      	str	r5, [r4, #20]
 8006b0a:	444e      	add	r6, r9
 8006b0c:	eba5 0509 	sub.w	r5, r5, r9
 8006b10:	6026      	str	r6, [r4, #0]
 8006b12:	60a5      	str	r5, [r4, #8]
 8006b14:	463e      	mov	r6, r7
 8006b16:	42be      	cmp	r6, r7
 8006b18:	d900      	bls.n	8006b1c <__ssputs_r+0x70>
 8006b1a:	463e      	mov	r6, r7
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	4632      	mov	r2, r6
 8006b20:	4641      	mov	r1, r8
 8006b22:	f000 f9c9 	bl	8006eb8 <memmove>
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	1b9b      	subs	r3, r3, r6
 8006b2a:	60a3      	str	r3, [r4, #8]
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	4433      	add	r3, r6
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	2000      	movs	r0, #0
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	462a      	mov	r2, r5
 8006b3a:	f000 fa3b 	bl	8006fb4 <_realloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d1e0      	bne.n	8006b06 <__ssputs_r+0x5a>
 8006b44:	6921      	ldr	r1, [r4, #16]
 8006b46:	4650      	mov	r0, sl
 8006b48:	f7ff fb34 	bl	80061b4 <_free_r>
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	f8ca 3000 	str.w	r3, [sl]
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	e7e9      	b.n	8006b34 <__ssputs_r+0x88>

08006b60 <_svfiprintf_r>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4698      	mov	r8, r3
 8006b66:	898b      	ldrh	r3, [r1, #12]
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	b09d      	sub	sp, #116	; 0x74
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	d50e      	bpl.n	8006b92 <_svfiprintf_r+0x32>
 8006b74:	690b      	ldr	r3, [r1, #16]
 8006b76:	b963      	cbnz	r3, 8006b92 <_svfiprintf_r+0x32>
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	f7ff fb8f 	bl	800629c <_malloc_r>
 8006b7e:	6028      	str	r0, [r5, #0]
 8006b80:	6128      	str	r0, [r5, #16]
 8006b82:	b920      	cbnz	r0, 8006b8e <_svfiprintf_r+0x2e>
 8006b84:	230c      	movs	r3, #12
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e0d0      	b.n	8006d30 <_svfiprintf_r+0x1d0>
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	616b      	str	r3, [r5, #20]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	2320      	movs	r3, #32
 8006b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba0:	2330      	movs	r3, #48	; 0x30
 8006ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d48 <_svfiprintf_r+0x1e8>
 8006ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006baa:	f04f 0901 	mov.w	r9, #1
 8006bae:	4623      	mov	r3, r4
 8006bb0:	469a      	mov	sl, r3
 8006bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb6:	b10a      	cbz	r2, 8006bbc <_svfiprintf_r+0x5c>
 8006bb8:	2a25      	cmp	r2, #37	; 0x25
 8006bba:	d1f9      	bne.n	8006bb0 <_svfiprintf_r+0x50>
 8006bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc0:	d00b      	beq.n	8006bda <_svfiprintf_r+0x7a>
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff ff6f 	bl	8006aac <__ssputs_r>
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f000 80a9 	beq.w	8006d26 <_svfiprintf_r+0x1c6>
 8006bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd6:	445a      	add	r2, fp
 8006bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bda:	f89a 3000 	ldrb.w	r3, [sl]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80a1 	beq.w	8006d26 <_svfiprintf_r+0x1c6>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bee:	f10a 0a01 	add.w	sl, sl, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	9307      	str	r3, [sp, #28]
 8006bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8006bfc:	4654      	mov	r4, sl
 8006bfe:	2205      	movs	r2, #5
 8006c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c04:	4850      	ldr	r0, [pc, #320]	; (8006d48 <_svfiprintf_r+0x1e8>)
 8006c06:	f7f9 faeb 	bl	80001e0 <memchr>
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	b9d8      	cbnz	r0, 8006c46 <_svfiprintf_r+0xe6>
 8006c0e:	06d0      	lsls	r0, r2, #27
 8006c10:	bf44      	itt	mi
 8006c12:	2320      	movmi	r3, #32
 8006c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c18:	0711      	lsls	r1, r2, #28
 8006c1a:	bf44      	itt	mi
 8006c1c:	232b      	movmi	r3, #43	; 0x2b
 8006c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c22:	f89a 3000 	ldrb.w	r3, [sl]
 8006c26:	2b2a      	cmp	r3, #42	; 0x2a
 8006c28:	d015      	beq.n	8006c56 <_svfiprintf_r+0xf6>
 8006c2a:	9a07      	ldr	r2, [sp, #28]
 8006c2c:	4654      	mov	r4, sl
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f04f 0c0a 	mov.w	ip, #10
 8006c34:	4621      	mov	r1, r4
 8006c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c3a:	3b30      	subs	r3, #48	; 0x30
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	d94d      	bls.n	8006cdc <_svfiprintf_r+0x17c>
 8006c40:	b1b0      	cbz	r0, 8006c70 <_svfiprintf_r+0x110>
 8006c42:	9207      	str	r2, [sp, #28]
 8006c44:	e014      	b.n	8006c70 <_svfiprintf_r+0x110>
 8006c46:	eba0 0308 	sub.w	r3, r0, r8
 8006c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	9304      	str	r3, [sp, #16]
 8006c52:	46a2      	mov	sl, r4
 8006c54:	e7d2      	b.n	8006bfc <_svfiprintf_r+0x9c>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	9103      	str	r1, [sp, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfbb      	ittet	lt
 8006c62:	425b      	neglt	r3, r3
 8006c64:	f042 0202 	orrlt.w	r2, r2, #2
 8006c68:	9307      	strge	r3, [sp, #28]
 8006c6a:	9307      	strlt	r3, [sp, #28]
 8006c6c:	bfb8      	it	lt
 8006c6e:	9204      	strlt	r2, [sp, #16]
 8006c70:	7823      	ldrb	r3, [r4, #0]
 8006c72:	2b2e      	cmp	r3, #46	; 0x2e
 8006c74:	d10c      	bne.n	8006c90 <_svfiprintf_r+0x130>
 8006c76:	7863      	ldrb	r3, [r4, #1]
 8006c78:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7a:	d134      	bne.n	8006ce6 <_svfiprintf_r+0x186>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	9203      	str	r2, [sp, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfb8      	it	lt
 8006c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c8c:	3402      	adds	r4, #2
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d58 <_svfiprintf_r+0x1f8>
 8006c94:	7821      	ldrb	r1, [r4, #0]
 8006c96:	2203      	movs	r2, #3
 8006c98:	4650      	mov	r0, sl
 8006c9a:	f7f9 faa1 	bl	80001e0 <memchr>
 8006c9e:	b138      	cbz	r0, 8006cb0 <_svfiprintf_r+0x150>
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	eba0 000a 	sub.w	r0, r0, sl
 8006ca6:	2240      	movs	r2, #64	; 0x40
 8006ca8:	4082      	lsls	r2, r0
 8006caa:	4313      	orrs	r3, r2
 8006cac:	3401      	adds	r4, #1
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	4825      	ldr	r0, [pc, #148]	; (8006d4c <_svfiprintf_r+0x1ec>)
 8006cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cba:	2206      	movs	r2, #6
 8006cbc:	f7f9 fa90 	bl	80001e0 <memchr>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d038      	beq.n	8006d36 <_svfiprintf_r+0x1d6>
 8006cc4:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <_svfiprintf_r+0x1f0>)
 8006cc6:	bb1b      	cbnz	r3, 8006d10 <_svfiprintf_r+0x1b0>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	3307      	adds	r3, #7
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd6:	4433      	add	r3, r6
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	e768      	b.n	8006bae <_svfiprintf_r+0x4e>
 8006cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e7a6      	b.n	8006c34 <_svfiprintf_r+0xd4>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	3401      	adds	r4, #1
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	4619      	mov	r1, r3
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf8:	3a30      	subs	r2, #48	; 0x30
 8006cfa:	2a09      	cmp	r2, #9
 8006cfc:	d903      	bls.n	8006d06 <_svfiprintf_r+0x1a6>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0c6      	beq.n	8006c90 <_svfiprintf_r+0x130>
 8006d02:	9105      	str	r1, [sp, #20]
 8006d04:	e7c4      	b.n	8006c90 <_svfiprintf_r+0x130>
 8006d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e7f0      	b.n	8006cf2 <_svfiprintf_r+0x192>
 8006d10:	ab03      	add	r3, sp, #12
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	462a      	mov	r2, r5
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <_svfiprintf_r+0x1f4>)
 8006d18:	a904      	add	r1, sp, #16
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f7fd fe64 	bl	80049e8 <_printf_float>
 8006d20:	1c42      	adds	r2, r0, #1
 8006d22:	4606      	mov	r6, r0
 8006d24:	d1d6      	bne.n	8006cd4 <_svfiprintf_r+0x174>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	065b      	lsls	r3, r3, #25
 8006d2a:	f53f af2d 	bmi.w	8006b88 <_svfiprintf_r+0x28>
 8006d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d30:	b01d      	add	sp, #116	; 0x74
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	ab03      	add	r3, sp, #12
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <_svfiprintf_r+0x1f4>)
 8006d3e:	a904      	add	r1, sp, #16
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7fe f8f5 	bl	8004f30 <_printf_i>
 8006d46:	e7eb      	b.n	8006d20 <_svfiprintf_r+0x1c0>
 8006d48:	0800869c 	.word	0x0800869c
 8006d4c:	080086a6 	.word	0x080086a6
 8006d50:	080049e9 	.word	0x080049e9
 8006d54:	08006aad 	.word	0x08006aad
 8006d58:	080086a2 	.word	0x080086a2

08006d5c <__sflush_r>:
 8006d5c:	898a      	ldrh	r2, [r1, #12]
 8006d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d62:	4605      	mov	r5, r0
 8006d64:	0710      	lsls	r0, r2, #28
 8006d66:	460c      	mov	r4, r1
 8006d68:	d458      	bmi.n	8006e1c <__sflush_r+0xc0>
 8006d6a:	684b      	ldr	r3, [r1, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dc05      	bgt.n	8006d7c <__sflush_r+0x20>
 8006d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dc02      	bgt.n	8006d7c <__sflush_r+0x20>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	d0f9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d88:	682f      	ldr	r7, [r5, #0]
 8006d8a:	6a21      	ldr	r1, [r4, #32]
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	d032      	beq.n	8006df6 <__sflush_r+0x9a>
 8006d90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	075a      	lsls	r2, r3, #29
 8006d96:	d505      	bpl.n	8006da4 <__sflush_r+0x48>
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	1ac0      	subs	r0, r0, r3
 8006d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d9e:	b10b      	cbz	r3, 8006da4 <__sflush_r+0x48>
 8006da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da2:	1ac0      	subs	r0, r0, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	4602      	mov	r2, r0
 8006da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006daa:	6a21      	ldr	r1, [r4, #32]
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b0      	blx	r6
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	d106      	bne.n	8006dc4 <__sflush_r+0x68>
 8006db6:	6829      	ldr	r1, [r5, #0]
 8006db8:	291d      	cmp	r1, #29
 8006dba:	d82b      	bhi.n	8006e14 <__sflush_r+0xb8>
 8006dbc:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <__sflush_r+0x108>)
 8006dbe:	410a      	asrs	r2, r1
 8006dc0:	07d6      	lsls	r6, r2, #31
 8006dc2:	d427      	bmi.n	8006e14 <__sflush_r+0xb8>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	6062      	str	r2, [r4, #4]
 8006dc8:	04d9      	lsls	r1, r3, #19
 8006dca:	6922      	ldr	r2, [r4, #16]
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	d504      	bpl.n	8006dda <__sflush_r+0x7e>
 8006dd0:	1c42      	adds	r2, r0, #1
 8006dd2:	d101      	bne.n	8006dd8 <__sflush_r+0x7c>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b903      	cbnz	r3, 8006dda <__sflush_r+0x7e>
 8006dd8:	6560      	str	r0, [r4, #84]	; 0x54
 8006dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ddc:	602f      	str	r7, [r5, #0]
 8006dde:	2900      	cmp	r1, #0
 8006de0:	d0c9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006de2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de6:	4299      	cmp	r1, r3
 8006de8:	d002      	beq.n	8006df0 <__sflush_r+0x94>
 8006dea:	4628      	mov	r0, r5
 8006dec:	f7ff f9e2 	bl	80061b4 <_free_r>
 8006df0:	2000      	movs	r0, #0
 8006df2:	6360      	str	r0, [r4, #52]	; 0x34
 8006df4:	e7c0      	b.n	8006d78 <__sflush_r+0x1c>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b0      	blx	r6
 8006dfc:	1c41      	adds	r1, r0, #1
 8006dfe:	d1c8      	bne.n	8006d92 <__sflush_r+0x36>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0c5      	beq.n	8006d92 <__sflush_r+0x36>
 8006e06:	2b1d      	cmp	r3, #29
 8006e08:	d001      	beq.n	8006e0e <__sflush_r+0xb2>
 8006e0a:	2b16      	cmp	r3, #22
 8006e0c:	d101      	bne.n	8006e12 <__sflush_r+0xb6>
 8006e0e:	602f      	str	r7, [r5, #0]
 8006e10:	e7b1      	b.n	8006d76 <__sflush_r+0x1a>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	e7ad      	b.n	8006d78 <__sflush_r+0x1c>
 8006e1c:	690f      	ldr	r7, [r1, #16]
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	d0a9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006e22:	0793      	lsls	r3, r2, #30
 8006e24:	680e      	ldr	r6, [r1, #0]
 8006e26:	bf08      	it	eq
 8006e28:	694b      	ldreq	r3, [r1, #20]
 8006e2a:	600f      	str	r7, [r1, #0]
 8006e2c:	bf18      	it	ne
 8006e2e:	2300      	movne	r3, #0
 8006e30:	eba6 0807 	sub.w	r8, r6, r7
 8006e34:	608b      	str	r3, [r1, #8]
 8006e36:	f1b8 0f00 	cmp.w	r8, #0
 8006e3a:	dd9c      	ble.n	8006d76 <__sflush_r+0x1a>
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e40:	4643      	mov	r3, r8
 8006e42:	463a      	mov	r2, r7
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b0      	blx	r6
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dc06      	bgt.n	8006e5a <__sflush_r+0xfe>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	e78e      	b.n	8006d78 <__sflush_r+0x1c>
 8006e5a:	4407      	add	r7, r0
 8006e5c:	eba8 0800 	sub.w	r8, r8, r0
 8006e60:	e7e9      	b.n	8006e36 <__sflush_r+0xda>
 8006e62:	bf00      	nop
 8006e64:	dfbffffe 	.word	0xdfbffffe

08006e68 <_fflush_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	690b      	ldr	r3, [r1, #16]
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b913      	cbnz	r3, 8006e78 <_fflush_r+0x10>
 8006e72:	2500      	movs	r5, #0
 8006e74:	4628      	mov	r0, r5
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	b118      	cbz	r0, 8006e82 <_fflush_r+0x1a>
 8006e7a:	6a03      	ldr	r3, [r0, #32]
 8006e7c:	b90b      	cbnz	r3, 8006e82 <_fflush_r+0x1a>
 8006e7e:	f7fe f9f3 	bl	8005268 <__sinit>
 8006e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f3      	beq.n	8006e72 <_fflush_r+0xa>
 8006e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e8c:	07d0      	lsls	r0, r2, #31
 8006e8e:	d404      	bmi.n	8006e9a <_fflush_r+0x32>
 8006e90:	0599      	lsls	r1, r3, #22
 8006e92:	d402      	bmi.n	8006e9a <_fflush_r+0x32>
 8006e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e96:	f7fe fb11 	bl	80054bc <__retarget_lock_acquire_recursive>
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f7ff ff5d 	bl	8006d5c <__sflush_r>
 8006ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea4:	07da      	lsls	r2, r3, #31
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	d4e4      	bmi.n	8006e74 <_fflush_r+0xc>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	059b      	lsls	r3, r3, #22
 8006eae:	d4e1      	bmi.n	8006e74 <_fflush_r+0xc>
 8006eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb2:	f7fe fb04 	bl	80054be <__retarget_lock_release_recursive>
 8006eb6:	e7dd      	b.n	8006e74 <_fflush_r+0xc>

08006eb8 <memmove>:
 8006eb8:	4288      	cmp	r0, r1
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	eb01 0402 	add.w	r4, r1, r2
 8006ec0:	d902      	bls.n	8006ec8 <memmove+0x10>
 8006ec2:	4284      	cmp	r4, r0
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	d807      	bhi.n	8006ed8 <memmove+0x20>
 8006ec8:	1e43      	subs	r3, r0, #1
 8006eca:	42a1      	cmp	r1, r4
 8006ecc:	d008      	beq.n	8006ee0 <memmove+0x28>
 8006ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ed6:	e7f8      	b.n	8006eca <memmove+0x12>
 8006ed8:	4402      	add	r2, r0
 8006eda:	4601      	mov	r1, r0
 8006edc:	428a      	cmp	r2, r1
 8006ede:	d100      	bne.n	8006ee2 <memmove+0x2a>
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eea:	e7f7      	b.n	8006edc <memmove+0x24>

08006eec <_sbrk_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_sbrk_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fa fd4a 	bl	8001990 <_sbrk>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_sbrk_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_sbrk_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	2000051c 	.word	0x2000051c

08006f0c <memcpy>:
 8006f0c:	440a      	add	r2, r1
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f14:	d100      	bne.n	8006f18 <memcpy+0xc>
 8006f16:	4770      	bx	lr
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f22:	4291      	cmp	r1, r2
 8006f24:	d1f9      	bne.n	8006f1a <memcpy+0xe>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <__assert_func>:
 8006f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <__assert_func+0x2c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4605      	mov	r5, r0
 8006f34:	68d8      	ldr	r0, [r3, #12]
 8006f36:	b14c      	cbz	r4, 8006f4c <__assert_func+0x24>
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <__assert_func+0x30>)
 8006f3a:	9100      	str	r1, [sp, #0]
 8006f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f40:	4906      	ldr	r1, [pc, #24]	; (8006f5c <__assert_func+0x34>)
 8006f42:	462b      	mov	r3, r5
 8006f44:	f000 f872 	bl	800702c <fiprintf>
 8006f48:	f000 f882 	bl	8007050 <abort>
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <__assert_func+0x38>)
 8006f4e:	461c      	mov	r4, r3
 8006f50:	e7f3      	b.n	8006f3a <__assert_func+0x12>
 8006f52:	bf00      	nop
 8006f54:	20000064 	.word	0x20000064
 8006f58:	080086b7 	.word	0x080086b7
 8006f5c:	080086c4 	.word	0x080086c4
 8006f60:	080086f2 	.word	0x080086f2

08006f64 <_calloc_r>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	fba1 2402 	umull	r2, r4, r1, r2
 8006f6a:	b94c      	cbnz	r4, 8006f80 <_calloc_r+0x1c>
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	f7ff f994 	bl	800629c <_malloc_r>
 8006f74:	9a01      	ldr	r2, [sp, #4]
 8006f76:	4605      	mov	r5, r0
 8006f78:	b930      	cbnz	r0, 8006f88 <_calloc_r+0x24>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bd30      	pop	{r4, r5, pc}
 8006f80:	220c      	movs	r2, #12
 8006f82:	6002      	str	r2, [r0, #0]
 8006f84:	2500      	movs	r5, #0
 8006f86:	e7f8      	b.n	8006f7a <_calloc_r+0x16>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7fe fa1a 	bl	80053c2 <memset>
 8006f8e:	e7f4      	b.n	8006f7a <_calloc_r+0x16>

08006f90 <__ascii_mbtowc>:
 8006f90:	b082      	sub	sp, #8
 8006f92:	b901      	cbnz	r1, 8006f96 <__ascii_mbtowc+0x6>
 8006f94:	a901      	add	r1, sp, #4
 8006f96:	b142      	cbz	r2, 8006faa <__ascii_mbtowc+0x1a>
 8006f98:	b14b      	cbz	r3, 8006fae <__ascii_mbtowc+0x1e>
 8006f9a:	7813      	ldrb	r3, [r2, #0]
 8006f9c:	600b      	str	r3, [r1, #0]
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	1e10      	subs	r0, r2, #0
 8006fa2:	bf18      	it	ne
 8006fa4:	2001      	movne	r0, #1
 8006fa6:	b002      	add	sp, #8
 8006fa8:	4770      	bx	lr
 8006faa:	4610      	mov	r0, r2
 8006fac:	e7fb      	b.n	8006fa6 <__ascii_mbtowc+0x16>
 8006fae:	f06f 0001 	mvn.w	r0, #1
 8006fb2:	e7f8      	b.n	8006fa6 <__ascii_mbtowc+0x16>

08006fb4 <_realloc_r>:
 8006fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4614      	mov	r4, r2
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	b921      	cbnz	r1, 8006fca <_realloc_r+0x16>
 8006fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	f7ff b969 	b.w	800629c <_malloc_r>
 8006fca:	b92a      	cbnz	r2, 8006fd8 <_realloc_r+0x24>
 8006fcc:	f7ff f8f2 	bl	80061b4 <_free_r>
 8006fd0:	4625      	mov	r5, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	f000 f841 	bl	800705e <_malloc_usable_size_r>
 8006fdc:	4284      	cmp	r4, r0
 8006fde:	4607      	mov	r7, r0
 8006fe0:	d802      	bhi.n	8006fe8 <_realloc_r+0x34>
 8006fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fe6:	d812      	bhi.n	800700e <_realloc_r+0x5a>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4640      	mov	r0, r8
 8006fec:	f7ff f956 	bl	800629c <_malloc_r>
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d0ed      	beq.n	8006fd2 <_realloc_r+0x1e>
 8006ff6:	42bc      	cmp	r4, r7
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	bf28      	it	cs
 8006ffe:	463a      	movcs	r2, r7
 8007000:	f7ff ff84 	bl	8006f0c <memcpy>
 8007004:	4631      	mov	r1, r6
 8007006:	4640      	mov	r0, r8
 8007008:	f7ff f8d4 	bl	80061b4 <_free_r>
 800700c:	e7e1      	b.n	8006fd2 <_realloc_r+0x1e>
 800700e:	4635      	mov	r5, r6
 8007010:	e7df      	b.n	8006fd2 <_realloc_r+0x1e>

08007012 <__ascii_wctomb>:
 8007012:	b149      	cbz	r1, 8007028 <__ascii_wctomb+0x16>
 8007014:	2aff      	cmp	r2, #255	; 0xff
 8007016:	bf85      	ittet	hi
 8007018:	238a      	movhi	r3, #138	; 0x8a
 800701a:	6003      	strhi	r3, [r0, #0]
 800701c:	700a      	strbls	r2, [r1, #0]
 800701e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007022:	bf98      	it	ls
 8007024:	2001      	movls	r0, #1
 8007026:	4770      	bx	lr
 8007028:	4608      	mov	r0, r1
 800702a:	4770      	bx	lr

0800702c <fiprintf>:
 800702c:	b40e      	push	{r1, r2, r3}
 800702e:	b503      	push	{r0, r1, lr}
 8007030:	4601      	mov	r1, r0
 8007032:	ab03      	add	r3, sp, #12
 8007034:	4805      	ldr	r0, [pc, #20]	; (800704c <fiprintf+0x20>)
 8007036:	f853 2b04 	ldr.w	r2, [r3], #4
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f000 f83f 	bl	80070c0 <_vfiprintf_r>
 8007042:	b002      	add	sp, #8
 8007044:	f85d eb04 	ldr.w	lr, [sp], #4
 8007048:	b003      	add	sp, #12
 800704a:	4770      	bx	lr
 800704c:	20000064 	.word	0x20000064

08007050 <abort>:
 8007050:	b508      	push	{r3, lr}
 8007052:	2006      	movs	r0, #6
 8007054:	f000 fa0c 	bl	8007470 <raise>
 8007058:	2001      	movs	r0, #1
 800705a:	f7fa fc21 	bl	80018a0 <_exit>

0800705e <_malloc_usable_size_r>:
 800705e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007062:	1f18      	subs	r0, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfbc      	itt	lt
 8007068:	580b      	ldrlt	r3, [r1, r0]
 800706a:	18c0      	addlt	r0, r0, r3
 800706c:	4770      	bx	lr

0800706e <__sfputc_r>:
 800706e:	6893      	ldr	r3, [r2, #8]
 8007070:	3b01      	subs	r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	b410      	push	{r4}
 8007076:	6093      	str	r3, [r2, #8]
 8007078:	da08      	bge.n	800708c <__sfputc_r+0x1e>
 800707a:	6994      	ldr	r4, [r2, #24]
 800707c:	42a3      	cmp	r3, r4
 800707e:	db01      	blt.n	8007084 <__sfputc_r+0x16>
 8007080:	290a      	cmp	r1, #10
 8007082:	d103      	bne.n	800708c <__sfputc_r+0x1e>
 8007084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007088:	f000 b934 	b.w	80072f4 <__swbuf_r>
 800708c:	6813      	ldr	r3, [r2, #0]
 800708e:	1c58      	adds	r0, r3, #1
 8007090:	6010      	str	r0, [r2, #0]
 8007092:	7019      	strb	r1, [r3, #0]
 8007094:	4608      	mov	r0, r1
 8007096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800709a:	4770      	bx	lr

0800709c <__sfputs_r>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	4614      	mov	r4, r2
 80070a4:	18d5      	adds	r5, r2, r3
 80070a6:	42ac      	cmp	r4, r5
 80070a8:	d101      	bne.n	80070ae <__sfputs_r+0x12>
 80070aa:	2000      	movs	r0, #0
 80070ac:	e007      	b.n	80070be <__sfputs_r+0x22>
 80070ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b2:	463a      	mov	r2, r7
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff ffda 	bl	800706e <__sfputc_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d1f3      	bne.n	80070a6 <__sfputs_r+0xa>
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070c0 <_vfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	460d      	mov	r5, r1
 80070c6:	b09d      	sub	sp, #116	; 0x74
 80070c8:	4614      	mov	r4, r2
 80070ca:	4698      	mov	r8, r3
 80070cc:	4606      	mov	r6, r0
 80070ce:	b118      	cbz	r0, 80070d8 <_vfiprintf_r+0x18>
 80070d0:	6a03      	ldr	r3, [r0, #32]
 80070d2:	b90b      	cbnz	r3, 80070d8 <_vfiprintf_r+0x18>
 80070d4:	f7fe f8c8 	bl	8005268 <__sinit>
 80070d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	d405      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	059a      	lsls	r2, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e6:	f7fe f9e9 	bl	80054bc <__retarget_lock_acquire_recursive>
 80070ea:	89ab      	ldrh	r3, [r5, #12]
 80070ec:	071b      	lsls	r3, r3, #28
 80070ee:	d501      	bpl.n	80070f4 <_vfiprintf_r+0x34>
 80070f0:	692b      	ldr	r3, [r5, #16]
 80070f2:	b99b      	cbnz	r3, 800711c <_vfiprintf_r+0x5c>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f93a 	bl	8007370 <__swsetup_r>
 80070fc:	b170      	cbz	r0, 800711c <_vfiprintf_r+0x5c>
 80070fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007100:	07dc      	lsls	r4, r3, #31
 8007102:	d504      	bpl.n	800710e <_vfiprintf_r+0x4e>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	b01d      	add	sp, #116	; 0x74
 800710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	0598      	lsls	r0, r3, #22
 8007112:	d4f7      	bmi.n	8007104 <_vfiprintf_r+0x44>
 8007114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007116:	f7fe f9d2 	bl	80054be <__retarget_lock_release_recursive>
 800711a:	e7f3      	b.n	8007104 <_vfiprintf_r+0x44>
 800711c:	2300      	movs	r3, #0
 800711e:	9309      	str	r3, [sp, #36]	; 0x24
 8007120:	2320      	movs	r3, #32
 8007122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007126:	f8cd 800c 	str.w	r8, [sp, #12]
 800712a:	2330      	movs	r3, #48	; 0x30
 800712c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80072e0 <_vfiprintf_r+0x220>
 8007130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007134:	f04f 0901 	mov.w	r9, #1
 8007138:	4623      	mov	r3, r4
 800713a:	469a      	mov	sl, r3
 800713c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007140:	b10a      	cbz	r2, 8007146 <_vfiprintf_r+0x86>
 8007142:	2a25      	cmp	r2, #37	; 0x25
 8007144:	d1f9      	bne.n	800713a <_vfiprintf_r+0x7a>
 8007146:	ebba 0b04 	subs.w	fp, sl, r4
 800714a:	d00b      	beq.n	8007164 <_vfiprintf_r+0xa4>
 800714c:	465b      	mov	r3, fp
 800714e:	4622      	mov	r2, r4
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffa2 	bl	800709c <__sfputs_r>
 8007158:	3001      	adds	r0, #1
 800715a:	f000 80a9 	beq.w	80072b0 <_vfiprintf_r+0x1f0>
 800715e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007160:	445a      	add	r2, fp
 8007162:	9209      	str	r2, [sp, #36]	; 0x24
 8007164:	f89a 3000 	ldrb.w	r3, [sl]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80a1 	beq.w	80072b0 <_vfiprintf_r+0x1f0>
 800716e:	2300      	movs	r3, #0
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007178:	f10a 0a01 	add.w	sl, sl, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007184:	931a      	str	r3, [sp, #104]	; 0x68
 8007186:	4654      	mov	r4, sl
 8007188:	2205      	movs	r2, #5
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	4854      	ldr	r0, [pc, #336]	; (80072e0 <_vfiprintf_r+0x220>)
 8007190:	f7f9 f826 	bl	80001e0 <memchr>
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	b9d8      	cbnz	r0, 80071d0 <_vfiprintf_r+0x110>
 8007198:	06d1      	lsls	r1, r2, #27
 800719a:	bf44      	itt	mi
 800719c:	2320      	movmi	r3, #32
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a2:	0713      	lsls	r3, r2, #28
 80071a4:	bf44      	itt	mi
 80071a6:	232b      	movmi	r3, #43	; 0x2b
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ac:	f89a 3000 	ldrb.w	r3, [sl]
 80071b0:	2b2a      	cmp	r3, #42	; 0x2a
 80071b2:	d015      	beq.n	80071e0 <_vfiprintf_r+0x120>
 80071b4:	9a07      	ldr	r2, [sp, #28]
 80071b6:	4654      	mov	r4, sl
 80071b8:	2000      	movs	r0, #0
 80071ba:	f04f 0c0a 	mov.w	ip, #10
 80071be:	4621      	mov	r1, r4
 80071c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c4:	3b30      	subs	r3, #48	; 0x30
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d94d      	bls.n	8007266 <_vfiprintf_r+0x1a6>
 80071ca:	b1b0      	cbz	r0, 80071fa <_vfiprintf_r+0x13a>
 80071cc:	9207      	str	r2, [sp, #28]
 80071ce:	e014      	b.n	80071fa <_vfiprintf_r+0x13a>
 80071d0:	eba0 0308 	sub.w	r3, r0, r8
 80071d4:	fa09 f303 	lsl.w	r3, r9, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	46a2      	mov	sl, r4
 80071de:	e7d2      	b.n	8007186 <_vfiprintf_r+0xc6>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d19      	adds	r1, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfbb      	ittet	lt
 80071ec:	425b      	neglt	r3, r3
 80071ee:	f042 0202 	orrlt.w	r2, r2, #2
 80071f2:	9307      	strge	r3, [sp, #28]
 80071f4:	9307      	strlt	r3, [sp, #28]
 80071f6:	bfb8      	it	lt
 80071f8:	9204      	strlt	r2, [sp, #16]
 80071fa:	7823      	ldrb	r3, [r4, #0]
 80071fc:	2b2e      	cmp	r3, #46	; 0x2e
 80071fe:	d10c      	bne.n	800721a <_vfiprintf_r+0x15a>
 8007200:	7863      	ldrb	r3, [r4, #1]
 8007202:	2b2a      	cmp	r3, #42	; 0x2a
 8007204:	d134      	bne.n	8007270 <_vfiprintf_r+0x1b0>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	9203      	str	r2, [sp, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfb8      	it	lt
 8007212:	f04f 33ff 	movlt.w	r3, #4294967295
 8007216:	3402      	adds	r4, #2
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80072f0 <_vfiprintf_r+0x230>
 800721e:	7821      	ldrb	r1, [r4, #0]
 8007220:	2203      	movs	r2, #3
 8007222:	4650      	mov	r0, sl
 8007224:	f7f8 ffdc 	bl	80001e0 <memchr>
 8007228:	b138      	cbz	r0, 800723a <_vfiprintf_r+0x17a>
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	eba0 000a 	sub.w	r0, r0, sl
 8007230:	2240      	movs	r2, #64	; 0x40
 8007232:	4082      	lsls	r2, r0
 8007234:	4313      	orrs	r3, r2
 8007236:	3401      	adds	r4, #1
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723e:	4829      	ldr	r0, [pc, #164]	; (80072e4 <_vfiprintf_r+0x224>)
 8007240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007244:	2206      	movs	r2, #6
 8007246:	f7f8 ffcb 	bl	80001e0 <memchr>
 800724a:	2800      	cmp	r0, #0
 800724c:	d03f      	beq.n	80072ce <_vfiprintf_r+0x20e>
 800724e:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <_vfiprintf_r+0x228>)
 8007250:	bb1b      	cbnz	r3, 800729a <_vfiprintf_r+0x1da>
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	3307      	adds	r3, #7
 8007256:	f023 0307 	bic.w	r3, r3, #7
 800725a:	3308      	adds	r3, #8
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	443b      	add	r3, r7
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	e768      	b.n	8007138 <_vfiprintf_r+0x78>
 8007266:	fb0c 3202 	mla	r2, ip, r2, r3
 800726a:	460c      	mov	r4, r1
 800726c:	2001      	movs	r0, #1
 800726e:	e7a6      	b.n	80071be <_vfiprintf_r+0xfe>
 8007270:	2300      	movs	r3, #0
 8007272:	3401      	adds	r4, #1
 8007274:	9305      	str	r3, [sp, #20]
 8007276:	4619      	mov	r1, r3
 8007278:	f04f 0c0a 	mov.w	ip, #10
 800727c:	4620      	mov	r0, r4
 800727e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007282:	3a30      	subs	r2, #48	; 0x30
 8007284:	2a09      	cmp	r2, #9
 8007286:	d903      	bls.n	8007290 <_vfiprintf_r+0x1d0>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0c6      	beq.n	800721a <_vfiprintf_r+0x15a>
 800728c:	9105      	str	r1, [sp, #20]
 800728e:	e7c4      	b.n	800721a <_vfiprintf_r+0x15a>
 8007290:	fb0c 2101 	mla	r1, ip, r1, r2
 8007294:	4604      	mov	r4, r0
 8007296:	2301      	movs	r3, #1
 8007298:	e7f0      	b.n	800727c <_vfiprintf_r+0x1bc>
 800729a:	ab03      	add	r3, sp, #12
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	462a      	mov	r2, r5
 80072a0:	4b12      	ldr	r3, [pc, #72]	; (80072ec <_vfiprintf_r+0x22c>)
 80072a2:	a904      	add	r1, sp, #16
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7fd fb9f 	bl	80049e8 <_printf_float>
 80072aa:	4607      	mov	r7, r0
 80072ac:	1c78      	adds	r0, r7, #1
 80072ae:	d1d6      	bne.n	800725e <_vfiprintf_r+0x19e>
 80072b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	d405      	bmi.n	80072c2 <_vfiprintf_r+0x202>
 80072b6:	89ab      	ldrh	r3, [r5, #12]
 80072b8:	059a      	lsls	r2, r3, #22
 80072ba:	d402      	bmi.n	80072c2 <_vfiprintf_r+0x202>
 80072bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072be:	f7fe f8fe 	bl	80054be <__retarget_lock_release_recursive>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	065b      	lsls	r3, r3, #25
 80072c6:	f53f af1d 	bmi.w	8007104 <_vfiprintf_r+0x44>
 80072ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072cc:	e71c      	b.n	8007108 <_vfiprintf_r+0x48>
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	462a      	mov	r2, r5
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <_vfiprintf_r+0x22c>)
 80072d6:	a904      	add	r1, sp, #16
 80072d8:	4630      	mov	r0, r6
 80072da:	f7fd fe29 	bl	8004f30 <_printf_i>
 80072de:	e7e4      	b.n	80072aa <_vfiprintf_r+0x1ea>
 80072e0:	0800869c 	.word	0x0800869c
 80072e4:	080086a6 	.word	0x080086a6
 80072e8:	080049e9 	.word	0x080049e9
 80072ec:	0800709d 	.word	0x0800709d
 80072f0:	080086a2 	.word	0x080086a2

080072f4 <__swbuf_r>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	460e      	mov	r6, r1
 80072f8:	4614      	mov	r4, r2
 80072fa:	4605      	mov	r5, r0
 80072fc:	b118      	cbz	r0, 8007306 <__swbuf_r+0x12>
 80072fe:	6a03      	ldr	r3, [r0, #32]
 8007300:	b90b      	cbnz	r3, 8007306 <__swbuf_r+0x12>
 8007302:	f7fd ffb1 	bl	8005268 <__sinit>
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	60a3      	str	r3, [r4, #8]
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	071a      	lsls	r2, r3, #28
 800730e:	d525      	bpl.n	800735c <__swbuf_r+0x68>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	b31b      	cbz	r3, 800735c <__swbuf_r+0x68>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	6922      	ldr	r2, [r4, #16]
 8007318:	1a98      	subs	r0, r3, r2
 800731a:	6963      	ldr	r3, [r4, #20]
 800731c:	b2f6      	uxtb	r6, r6
 800731e:	4283      	cmp	r3, r0
 8007320:	4637      	mov	r7, r6
 8007322:	dc04      	bgt.n	800732e <__swbuf_r+0x3a>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f7ff fd9e 	bl	8006e68 <_fflush_r>
 800732c:	b9e0      	cbnz	r0, 8007368 <__swbuf_r+0x74>
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	3b01      	subs	r3, #1
 8007332:	60a3      	str	r3, [r4, #8]
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	701e      	strb	r6, [r3, #0]
 800733c:	6962      	ldr	r2, [r4, #20]
 800733e:	1c43      	adds	r3, r0, #1
 8007340:	429a      	cmp	r2, r3
 8007342:	d004      	beq.n	800734e <__swbuf_r+0x5a>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	07db      	lsls	r3, r3, #31
 8007348:	d506      	bpl.n	8007358 <__swbuf_r+0x64>
 800734a:	2e0a      	cmp	r6, #10
 800734c:	d104      	bne.n	8007358 <__swbuf_r+0x64>
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	f7ff fd89 	bl	8006e68 <_fflush_r>
 8007356:	b938      	cbnz	r0, 8007368 <__swbuf_r+0x74>
 8007358:	4638      	mov	r0, r7
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735c:	4621      	mov	r1, r4
 800735e:	4628      	mov	r0, r5
 8007360:	f000 f806 	bl	8007370 <__swsetup_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	d0d5      	beq.n	8007314 <__swbuf_r+0x20>
 8007368:	f04f 37ff 	mov.w	r7, #4294967295
 800736c:	e7f4      	b.n	8007358 <__swbuf_r+0x64>
	...

08007370 <__swsetup_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4b2a      	ldr	r3, [pc, #168]	; (800741c <__swsetup_r+0xac>)
 8007374:	4605      	mov	r5, r0
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	460c      	mov	r4, r1
 800737a:	b118      	cbz	r0, 8007384 <__swsetup_r+0x14>
 800737c:	6a03      	ldr	r3, [r0, #32]
 800737e:	b90b      	cbnz	r3, 8007384 <__swsetup_r+0x14>
 8007380:	f7fd ff72 	bl	8005268 <__sinit>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800738a:	0718      	lsls	r0, r3, #28
 800738c:	d422      	bmi.n	80073d4 <__swsetup_r+0x64>
 800738e:	06d9      	lsls	r1, r3, #27
 8007390:	d407      	bmi.n	80073a2 <__swsetup_r+0x32>
 8007392:	2309      	movs	r3, #9
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800739a:	81a3      	strh	r3, [r4, #12]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	e034      	b.n	800740c <__swsetup_r+0x9c>
 80073a2:	0758      	lsls	r0, r3, #29
 80073a4:	d512      	bpl.n	80073cc <__swsetup_r+0x5c>
 80073a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073a8:	b141      	cbz	r1, 80073bc <__swsetup_r+0x4c>
 80073aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ae:	4299      	cmp	r1, r3
 80073b0:	d002      	beq.n	80073b8 <__swsetup_r+0x48>
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7fe fefe 	bl	80061b4 <_free_r>
 80073b8:	2300      	movs	r3, #0
 80073ba:	6363      	str	r3, [r4, #52]	; 0x34
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	2300      	movs	r3, #0
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f043 0308 	orr.w	r3, r3, #8
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	b94b      	cbnz	r3, 80073ec <__swsetup_r+0x7c>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e2:	d003      	beq.n	80073ec <__swsetup_r+0x7c>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f884 	bl	80074f4 <__smakebuf_r>
 80073ec:	89a0      	ldrh	r0, [r4, #12]
 80073ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f2:	f010 0301 	ands.w	r3, r0, #1
 80073f6:	d00a      	beq.n	800740e <__swsetup_r+0x9e>
 80073f8:	2300      	movs	r3, #0
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	6963      	ldr	r3, [r4, #20]
 80073fe:	425b      	negs	r3, r3
 8007400:	61a3      	str	r3, [r4, #24]
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	b943      	cbnz	r3, 8007418 <__swsetup_r+0xa8>
 8007406:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800740a:	d1c4      	bne.n	8007396 <__swsetup_r+0x26>
 800740c:	bd38      	pop	{r3, r4, r5, pc}
 800740e:	0781      	lsls	r1, r0, #30
 8007410:	bf58      	it	pl
 8007412:	6963      	ldrpl	r3, [r4, #20]
 8007414:	60a3      	str	r3, [r4, #8]
 8007416:	e7f4      	b.n	8007402 <__swsetup_r+0x92>
 8007418:	2000      	movs	r0, #0
 800741a:	e7f7      	b.n	800740c <__swsetup_r+0x9c>
 800741c:	20000064 	.word	0x20000064

08007420 <_raise_r>:
 8007420:	291f      	cmp	r1, #31
 8007422:	b538      	push	{r3, r4, r5, lr}
 8007424:	4604      	mov	r4, r0
 8007426:	460d      	mov	r5, r1
 8007428:	d904      	bls.n	8007434 <_raise_r+0x14>
 800742a:	2316      	movs	r3, #22
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	f04f 30ff 	mov.w	r0, #4294967295
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007436:	b112      	cbz	r2, 800743e <_raise_r+0x1e>
 8007438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800743c:	b94b      	cbnz	r3, 8007452 <_raise_r+0x32>
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f830 	bl	80074a4 <_getpid_r>
 8007444:	462a      	mov	r2, r5
 8007446:	4601      	mov	r1, r0
 8007448:	4620      	mov	r0, r4
 800744a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800744e:	f000 b817 	b.w	8007480 <_kill_r>
 8007452:	2b01      	cmp	r3, #1
 8007454:	d00a      	beq.n	800746c <_raise_r+0x4c>
 8007456:	1c59      	adds	r1, r3, #1
 8007458:	d103      	bne.n	8007462 <_raise_r+0x42>
 800745a:	2316      	movs	r3, #22
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	2001      	movs	r0, #1
 8007460:	e7e7      	b.n	8007432 <_raise_r+0x12>
 8007462:	2400      	movs	r4, #0
 8007464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007468:	4628      	mov	r0, r5
 800746a:	4798      	blx	r3
 800746c:	2000      	movs	r0, #0
 800746e:	e7e0      	b.n	8007432 <_raise_r+0x12>

08007470 <raise>:
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <raise+0xc>)
 8007472:	4601      	mov	r1, r0
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	f7ff bfd3 	b.w	8007420 <_raise_r>
 800747a:	bf00      	nop
 800747c:	20000064 	.word	0x20000064

08007480 <_kill_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4d07      	ldr	r5, [pc, #28]	; (80074a0 <_kill_r+0x20>)
 8007484:	2300      	movs	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f7fa f9f7 	bl	8001880 <_kill>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d102      	bne.n	800749c <_kill_r+0x1c>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b103      	cbz	r3, 800749c <_kill_r+0x1c>
 800749a:	6023      	str	r3, [r4, #0]
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	bf00      	nop
 80074a0:	2000051c 	.word	0x2000051c

080074a4 <_getpid_r>:
 80074a4:	f7fa b9e4 	b.w	8001870 <_getpid>

080074a8 <__swhatbuf_r>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	2900      	cmp	r1, #0
 80074b2:	b096      	sub	sp, #88	; 0x58
 80074b4:	4615      	mov	r5, r2
 80074b6:	461e      	mov	r6, r3
 80074b8:	da0d      	bge.n	80074d6 <__swhatbuf_r+0x2e>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074c0:	f04f 0100 	mov.w	r1, #0
 80074c4:	bf0c      	ite	eq
 80074c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80074ca:	2340      	movne	r3, #64	; 0x40
 80074cc:	2000      	movs	r0, #0
 80074ce:	6031      	str	r1, [r6, #0]
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	b016      	add	sp, #88	; 0x58
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	466a      	mov	r2, sp
 80074d8:	f000 f848 	bl	800756c <_fstat_r>
 80074dc:	2800      	cmp	r0, #0
 80074de:	dbec      	blt.n	80074ba <__swhatbuf_r+0x12>
 80074e0:	9901      	ldr	r1, [sp, #4]
 80074e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80074e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80074ea:	4259      	negs	r1, r3
 80074ec:	4159      	adcs	r1, r3
 80074ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f2:	e7eb      	b.n	80074cc <__swhatbuf_r+0x24>

080074f4 <__smakebuf_r>:
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f8:	079d      	lsls	r5, r3, #30
 80074fa:	4606      	mov	r6, r0
 80074fc:	460c      	mov	r4, r1
 80074fe:	d507      	bpl.n	8007510 <__smakebuf_r+0x1c>
 8007500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	2301      	movs	r3, #1
 800750a:	6163      	str	r3, [r4, #20]
 800750c:	b002      	add	sp, #8
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	ab01      	add	r3, sp, #4
 8007512:	466a      	mov	r2, sp
 8007514:	f7ff ffc8 	bl	80074a8 <__swhatbuf_r>
 8007518:	9900      	ldr	r1, [sp, #0]
 800751a:	4605      	mov	r5, r0
 800751c:	4630      	mov	r0, r6
 800751e:	f7fe febd 	bl	800629c <_malloc_r>
 8007522:	b948      	cbnz	r0, 8007538 <__smakebuf_r+0x44>
 8007524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007528:	059a      	lsls	r2, r3, #22
 800752a:	d4ef      	bmi.n	800750c <__smakebuf_r+0x18>
 800752c:	f023 0303 	bic.w	r3, r3, #3
 8007530:	f043 0302 	orr.w	r3, r3, #2
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	e7e3      	b.n	8007500 <__smakebuf_r+0xc>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	6163      	str	r3, [r4, #20]
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	6120      	str	r0, [r4, #16]
 800754a:	b15b      	cbz	r3, 8007564 <__smakebuf_r+0x70>
 800754c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007550:	4630      	mov	r0, r6
 8007552:	f000 f81d 	bl	8007590 <_isatty_r>
 8007556:	b128      	cbz	r0, 8007564 <__smakebuf_r+0x70>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	431d      	orrs	r5, r3
 8007568:	81a5      	strh	r5, [r4, #12]
 800756a:	e7cf      	b.n	800750c <__smakebuf_r+0x18>

0800756c <_fstat_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_fstat_r+0x20>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f7fa f9e0 	bl	800193e <_fstat>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d102      	bne.n	8007588 <_fstat_r+0x1c>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	b103      	cbz	r3, 8007588 <_fstat_r+0x1c>
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	bf00      	nop
 800758c:	2000051c 	.word	0x2000051c

08007590 <_isatty_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_isatty_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7fa f9df 	bl	800195e <_isatty>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_isatty_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_isatty_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	2000051c 	.word	0x2000051c

080075b0 <pow>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	ed2d 8b02 	vpush	{d8}
 80075b6:	eeb0 8a40 	vmov.f32	s16, s0
 80075ba:	eef0 8a60 	vmov.f32	s17, s1
 80075be:	ec55 4b11 	vmov	r4, r5, d1
 80075c2:	f000 f871 	bl	80076a8 <__ieee754_pow>
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	ec57 6b10 	vmov	r6, r7, d0
 80075d2:	f7f9 fab3 	bl	8000b3c <__aeabi_dcmpun>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d13b      	bne.n	8007652 <pow+0xa2>
 80075da:	ec51 0b18 	vmov	r0, r1, d8
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
 80075e2:	f7f9 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 80075e6:	b1b8      	cbz	r0, 8007618 <pow+0x68>
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f9 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d146      	bne.n	8007686 <pow+0xd6>
 80075f8:	ec45 4b10 	vmov	d0, r4, r5
 80075fc:	f000 f848 	bl	8007690 <finite>
 8007600:	b338      	cbz	r0, 8007652 <pow+0xa2>
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	4620      	mov	r0, r4
 8007608:	4629      	mov	r1, r5
 800760a:	f7f9 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800760e:	b300      	cbz	r0, 8007652 <pow+0xa2>
 8007610:	f7fd ff2a 	bl	8005468 <__errno>
 8007614:	2322      	movs	r3, #34	; 0x22
 8007616:	e01b      	b.n	8007650 <pow+0xa0>
 8007618:	ec47 6b10 	vmov	d0, r6, r7
 800761c:	f000 f838 	bl	8007690 <finite>
 8007620:	b9e0      	cbnz	r0, 800765c <pow+0xac>
 8007622:	eeb0 0a48 	vmov.f32	s0, s16
 8007626:	eef0 0a68 	vmov.f32	s1, s17
 800762a:	f000 f831 	bl	8007690 <finite>
 800762e:	b1a8      	cbz	r0, 800765c <pow+0xac>
 8007630:	ec45 4b10 	vmov	d0, r4, r5
 8007634:	f000 f82c 	bl	8007690 <finite>
 8007638:	b180      	cbz	r0, 800765c <pow+0xac>
 800763a:	4632      	mov	r2, r6
 800763c:	463b      	mov	r3, r7
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa7b 	bl	8000b3c <__aeabi_dcmpun>
 8007646:	2800      	cmp	r0, #0
 8007648:	d0e2      	beq.n	8007610 <pow+0x60>
 800764a:	f7fd ff0d 	bl	8005468 <__errno>
 800764e:	2321      	movs	r3, #33	; 0x21
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	ecbd 8b02 	vpop	{d8}
 8007656:	ec47 6b10 	vmov	d0, r6, r7
 800765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f9 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007668:	2800      	cmp	r0, #0
 800766a:	d0f2      	beq.n	8007652 <pow+0xa2>
 800766c:	eeb0 0a48 	vmov.f32	s0, s16
 8007670:	eef0 0a68 	vmov.f32	s1, s17
 8007674:	f000 f80c 	bl	8007690 <finite>
 8007678:	2800      	cmp	r0, #0
 800767a:	d0ea      	beq.n	8007652 <pow+0xa2>
 800767c:	ec45 4b10 	vmov	d0, r4, r5
 8007680:	f000 f806 	bl	8007690 <finite>
 8007684:	e7c3      	b.n	800760e <pow+0x5e>
 8007686:	4f01      	ldr	r7, [pc, #4]	; (800768c <pow+0xdc>)
 8007688:	2600      	movs	r6, #0
 800768a:	e7e2      	b.n	8007652 <pow+0xa2>
 800768c:	3ff00000 	.word	0x3ff00000

08007690 <finite>:
 8007690:	b082      	sub	sp, #8
 8007692:	ed8d 0b00 	vstr	d0, [sp]
 8007696:	9801      	ldr	r0, [sp, #4]
 8007698:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800769c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80076a0:	0fc0      	lsrs	r0, r0, #31
 80076a2:	b002      	add	sp, #8
 80076a4:	4770      	bx	lr
	...

080076a8 <__ieee754_pow>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b06 	vpush	{d8-d10}
 80076b0:	b089      	sub	sp, #36	; 0x24
 80076b2:	ed8d 1b00 	vstr	d1, [sp]
 80076b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076be:	ea58 0102 	orrs.w	r1, r8, r2
 80076c2:	ec57 6b10 	vmov	r6, r7, d0
 80076c6:	d115      	bne.n	80076f4 <__ieee754_pow+0x4c>
 80076c8:	19b3      	adds	r3, r6, r6
 80076ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80076ce:	4152      	adcs	r2, r2
 80076d0:	4299      	cmp	r1, r3
 80076d2:	4b89      	ldr	r3, [pc, #548]	; (80078f8 <__ieee754_pow+0x250>)
 80076d4:	4193      	sbcs	r3, r2
 80076d6:	f080 84d1 	bcs.w	800807c <__ieee754_pow+0x9d4>
 80076da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076de:	4630      	mov	r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	f7f8 fddb 	bl	800029c <__adddf3>
 80076e6:	ec41 0b10 	vmov	d0, r0, r1
 80076ea:	b009      	add	sp, #36	; 0x24
 80076ec:	ecbd 8b06 	vpop	{d8-d10}
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	4b81      	ldr	r3, [pc, #516]	; (80078fc <__ieee754_pow+0x254>)
 80076f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80076fa:	429c      	cmp	r4, r3
 80076fc:	ee10 aa10 	vmov	sl, s0
 8007700:	463d      	mov	r5, r7
 8007702:	dc06      	bgt.n	8007712 <__ieee754_pow+0x6a>
 8007704:	d101      	bne.n	800770a <__ieee754_pow+0x62>
 8007706:	2e00      	cmp	r6, #0
 8007708:	d1e7      	bne.n	80076da <__ieee754_pow+0x32>
 800770a:	4598      	cmp	r8, r3
 800770c:	dc01      	bgt.n	8007712 <__ieee754_pow+0x6a>
 800770e:	d10f      	bne.n	8007730 <__ieee754_pow+0x88>
 8007710:	b172      	cbz	r2, 8007730 <__ieee754_pow+0x88>
 8007712:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007716:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800771a:	ea55 050a 	orrs.w	r5, r5, sl
 800771e:	d1dc      	bne.n	80076da <__ieee754_pow+0x32>
 8007720:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007724:	18db      	adds	r3, r3, r3
 8007726:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800772a:	4152      	adcs	r2, r2
 800772c:	429d      	cmp	r5, r3
 800772e:	e7d0      	b.n	80076d2 <__ieee754_pow+0x2a>
 8007730:	2d00      	cmp	r5, #0
 8007732:	da3b      	bge.n	80077ac <__ieee754_pow+0x104>
 8007734:	4b72      	ldr	r3, [pc, #456]	; (8007900 <__ieee754_pow+0x258>)
 8007736:	4598      	cmp	r8, r3
 8007738:	dc51      	bgt.n	80077de <__ieee754_pow+0x136>
 800773a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800773e:	4598      	cmp	r8, r3
 8007740:	f340 84ab 	ble.w	800809a <__ieee754_pow+0x9f2>
 8007744:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007748:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800774c:	2b14      	cmp	r3, #20
 800774e:	dd0f      	ble.n	8007770 <__ieee754_pow+0xc8>
 8007750:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007754:	fa22 f103 	lsr.w	r1, r2, r3
 8007758:	fa01 f303 	lsl.w	r3, r1, r3
 800775c:	4293      	cmp	r3, r2
 800775e:	f040 849c 	bne.w	800809a <__ieee754_pow+0x9f2>
 8007762:	f001 0101 	and.w	r1, r1, #1
 8007766:	f1c1 0302 	rsb	r3, r1, #2
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	b182      	cbz	r2, 8007790 <__ieee754_pow+0xe8>
 800776e:	e05f      	b.n	8007830 <__ieee754_pow+0x188>
 8007770:	2a00      	cmp	r2, #0
 8007772:	d15b      	bne.n	800782c <__ieee754_pow+0x184>
 8007774:	f1c3 0314 	rsb	r3, r3, #20
 8007778:	fa48 f103 	asr.w	r1, r8, r3
 800777c:	fa01 f303 	lsl.w	r3, r1, r3
 8007780:	4543      	cmp	r3, r8
 8007782:	f040 8487 	bne.w	8008094 <__ieee754_pow+0x9ec>
 8007786:	f001 0101 	and.w	r1, r1, #1
 800778a:	f1c1 0302 	rsb	r3, r1, #2
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	4b5c      	ldr	r3, [pc, #368]	; (8007904 <__ieee754_pow+0x25c>)
 8007792:	4598      	cmp	r8, r3
 8007794:	d132      	bne.n	80077fc <__ieee754_pow+0x154>
 8007796:	f1b9 0f00 	cmp.w	r9, #0
 800779a:	f280 8477 	bge.w	800808c <__ieee754_pow+0x9e4>
 800779e:	4959      	ldr	r1, [pc, #356]	; (8007904 <__ieee754_pow+0x25c>)
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	2000      	movs	r0, #0
 80077a6:	f7f9 f859 	bl	800085c <__aeabi_ddiv>
 80077aa:	e79c      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d13d      	bne.n	8007830 <__ieee754_pow+0x188>
 80077b4:	4b51      	ldr	r3, [pc, #324]	; (80078fc <__ieee754_pow+0x254>)
 80077b6:	4598      	cmp	r8, r3
 80077b8:	d1ea      	bne.n	8007790 <__ieee754_pow+0xe8>
 80077ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077c2:	ea53 030a 	orrs.w	r3, r3, sl
 80077c6:	f000 8459 	beq.w	800807c <__ieee754_pow+0x9d4>
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <__ieee754_pow+0x260>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	dd08      	ble.n	80077e2 <__ieee754_pow+0x13a>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	f2c0 8456 	blt.w	8008084 <__ieee754_pow+0x9dc>
 80077d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077dc:	e783      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077de:	2302      	movs	r3, #2
 80077e0:	e7e5      	b.n	80077ae <__ieee754_pow+0x106>
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	f04f 0000 	mov.w	r0, #0
 80077ea:	f04f 0100 	mov.w	r1, #0
 80077ee:	f6bf af7a 	bge.w	80076e6 <__ieee754_pow+0x3e>
 80077f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80077f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077fa:	e774      	b.n	80076e6 <__ieee754_pow+0x3e>
 80077fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007800:	d106      	bne.n	8007810 <__ieee754_pow+0x168>
 8007802:	4632      	mov	r2, r6
 8007804:	463b      	mov	r3, r7
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fefd 	bl	8000608 <__aeabi_dmul>
 800780e:	e76a      	b.n	80076e6 <__ieee754_pow+0x3e>
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <__ieee754_pow+0x264>)
 8007812:	4599      	cmp	r9, r3
 8007814:	d10c      	bne.n	8007830 <__ieee754_pow+0x188>
 8007816:	2d00      	cmp	r5, #0
 8007818:	db0a      	blt.n	8007830 <__ieee754_pow+0x188>
 800781a:	ec47 6b10 	vmov	d0, r6, r7
 800781e:	b009      	add	sp, #36	; 0x24
 8007820:	ecbd 8b06 	vpop	{d8-d10}
 8007824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	f000 bd20 	b.w	800826c <__ieee754_sqrt>
 800782c:	2300      	movs	r3, #0
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	ec47 6b10 	vmov	d0, r6, r7
 8007834:	f000 fc62 	bl	80080fc <fabs>
 8007838:	ec51 0b10 	vmov	r0, r1, d0
 800783c:	f1ba 0f00 	cmp.w	sl, #0
 8007840:	d129      	bne.n	8007896 <__ieee754_pow+0x1ee>
 8007842:	b124      	cbz	r4, 800784e <__ieee754_pow+0x1a6>
 8007844:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <__ieee754_pow+0x25c>)
 8007846:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800784a:	429a      	cmp	r2, r3
 800784c:	d123      	bne.n	8007896 <__ieee754_pow+0x1ee>
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	da05      	bge.n	8007860 <__ieee754_pow+0x1b8>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	2000      	movs	r0, #0
 800785a:	492a      	ldr	r1, [pc, #168]	; (8007904 <__ieee754_pow+0x25c>)
 800785c:	f7f8 fffe 	bl	800085c <__aeabi_ddiv>
 8007860:	2d00      	cmp	r5, #0
 8007862:	f6bf af40 	bge.w	80076e6 <__ieee754_pow+0x3e>
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800786c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007870:	431c      	orrs	r4, r3
 8007872:	d108      	bne.n	8007886 <__ieee754_pow+0x1de>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4610      	mov	r0, r2
 800787a:	4619      	mov	r1, r3
 800787c:	f7f8 fd0c 	bl	8000298 <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	e78f      	b.n	80077a6 <__ieee754_pow+0xfe>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	2b01      	cmp	r3, #1
 800788a:	f47f af2c 	bne.w	80076e6 <__ieee754_pow+0x3e>
 800788e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007892:	4619      	mov	r1, r3
 8007894:	e727      	b.n	80076e6 <__ieee754_pow+0x3e>
 8007896:	0feb      	lsrs	r3, r5, #31
 8007898:	3b01      	subs	r3, #1
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	9a06      	ldr	r2, [sp, #24]
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	d102      	bne.n	80078aa <__ieee754_pow+0x202>
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	e7e6      	b.n	8007878 <__ieee754_pow+0x1d0>
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <__ieee754_pow+0x268>)
 80078ac:	4598      	cmp	r8, r3
 80078ae:	f340 80fb 	ble.w	8007aa8 <__ieee754_pow+0x400>
 80078b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078b6:	4598      	cmp	r8, r3
 80078b8:	4b13      	ldr	r3, [pc, #76]	; (8007908 <__ieee754_pow+0x260>)
 80078ba:	dd0c      	ble.n	80078d6 <__ieee754_pow+0x22e>
 80078bc:	429c      	cmp	r4, r3
 80078be:	dc0f      	bgt.n	80078e0 <__ieee754_pow+0x238>
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	da0f      	bge.n	80078e6 <__ieee754_pow+0x23e>
 80078c6:	2000      	movs	r0, #0
 80078c8:	b009      	add	sp, #36	; 0x24
 80078ca:	ecbd 8b06 	vpop	{d8-d10}
 80078ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d2:	f000 bcc2 	b.w	800825a <__math_oflow>
 80078d6:	429c      	cmp	r4, r3
 80078d8:	dbf2      	blt.n	80078c0 <__ieee754_pow+0x218>
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <__ieee754_pow+0x25c>)
 80078dc:	429c      	cmp	r4, r3
 80078de:	dd19      	ble.n	8007914 <__ieee754_pow+0x26c>
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	dcef      	bgt.n	80078c6 <__ieee754_pow+0x21e>
 80078e6:	2000      	movs	r0, #0
 80078e8:	b009      	add	sp, #36	; 0x24
 80078ea:	ecbd 8b06 	vpop	{d8-d10}
 80078ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f2:	f000 bca9 	b.w	8008248 <__math_uflow>
 80078f6:	bf00      	nop
 80078f8:	fff00000 	.word	0xfff00000
 80078fc:	7ff00000 	.word	0x7ff00000
 8007900:	433fffff 	.word	0x433fffff
 8007904:	3ff00000 	.word	0x3ff00000
 8007908:	3fefffff 	.word	0x3fefffff
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	41e00000 	.word	0x41e00000
 8007914:	4b60      	ldr	r3, [pc, #384]	; (8007a98 <__ieee754_pow+0x3f0>)
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fcbe 	bl	8000298 <__aeabi_dsub>
 800791c:	a354      	add	r3, pc, #336	; (adr r3, 8007a70 <__ieee754_pow+0x3c8>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	f7f8 fe6f 	bl	8000608 <__aeabi_dmul>
 800792a:	a353      	add	r3, pc, #332	; (adr r3, 8007a78 <__ieee754_pow+0x3d0>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	4b57      	ldr	r3, [pc, #348]	; (8007a9c <__ieee754_pow+0x3f4>)
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	2200      	movs	r2, #0
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fe5e 	bl	8000608 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	a14b      	add	r1, pc, #300	; (adr r1, 8007a80 <__ieee754_pow+0x3d8>)
 8007952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007956:	f7f8 fc9f 	bl	8000298 <__aeabi_dsub>
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	f7f8 fe53 	bl	8000608 <__aeabi_dmul>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	2000      	movs	r0, #0
 8007968:	494d      	ldr	r1, [pc, #308]	; (8007aa0 <__ieee754_pow+0x3f8>)
 800796a:	f7f8 fc95 	bl	8000298 <__aeabi_dsub>
 800796e:	4622      	mov	r2, r4
 8007970:	4680      	mov	r8, r0
 8007972:	4689      	mov	r9, r1
 8007974:	462b      	mov	r3, r5
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fe45 	bl	8000608 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe3f 	bl	8000608 <__aeabi_dmul>
 800798a:	a33f      	add	r3, pc, #252	; (adr r3, 8007a88 <__ieee754_pow+0x3e0>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe3a 	bl	8000608 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7f8 fc7c 	bl	8000298 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc76 	bl	800029c <__adddf3>
 80079b0:	2000      	movs	r0, #0
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f8 fc6d 	bl	8000298 <__aeabi_dsub>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fc67 	bl	8000298 <__aeabi_dsub>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	9a06      	ldr	r2, [sp, #24]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	4682      	mov	sl, r0
 80079d4:	468b      	mov	fp, r1
 80079d6:	f040 81e7 	bne.w	8007da8 <__ieee754_pow+0x700>
 80079da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007a90 <__ieee754_pow+0x3e8>
 80079de:	eeb0 8a47 	vmov.f32	s16, s14
 80079e2:	eef0 8a67 	vmov.f32	s17, s15
 80079e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079ea:	2600      	movs	r6, #0
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f4:	f7f8 fc50 	bl	8000298 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fe04 	bl	8000608 <__aeabi_dmul>
 8007a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4659      	mov	r1, fp
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fc40 	bl	800029c <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	4680      	mov	r8, r0
 8007a22:	4689      	mov	r9, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	4602      	mov	r2, r0
 8007a34:	4649      	mov	r1, r9
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7f8 fc30 	bl	800029c <__adddf3>
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <__ieee754_pow+0x3fc>)
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	ec45 4b19 	vmov	d9, r4, r5
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f340 82f0 	ble.w	800802e <__ieee754_pow+0x986>
 8007a4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a56:	4303      	orrs	r3, r0
 8007a58:	f000 81e4 	beq.w	8007e24 <__ieee754_pow+0x77c>
 8007a5c:	ec51 0b18 	vmov	r0, r1, d8
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	f7f9 f842 	bl	8000aec <__aeabi_dcmplt>
 8007a68:	3800      	subs	r0, #0
 8007a6a:	bf18      	it	ne
 8007a6c:	2001      	movne	r0, #1
 8007a6e:	e72b      	b.n	80078c8 <__ieee754_pow+0x220>
 8007a70:	60000000 	.word	0x60000000
 8007a74:	3ff71547 	.word	0x3ff71547
 8007a78:	f85ddf44 	.word	0xf85ddf44
 8007a7c:	3e54ae0b 	.word	0x3e54ae0b
 8007a80:	55555555 	.word	0x55555555
 8007a84:	3fd55555 	.word	0x3fd55555
 8007a88:	652b82fe 	.word	0x652b82fe
 8007a8c:	3ff71547 	.word	0x3ff71547
 8007a90:	00000000 	.word	0x00000000
 8007a94:	bff00000 	.word	0xbff00000
 8007a98:	3ff00000 	.word	0x3ff00000
 8007a9c:	3fd00000 	.word	0x3fd00000
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	408fffff 	.word	0x408fffff
 8007aa8:	4bd5      	ldr	r3, [pc, #852]	; (8007e00 <__ieee754_pow+0x758>)
 8007aaa:	402b      	ands	r3, r5
 8007aac:	2200      	movs	r2, #0
 8007aae:	b92b      	cbnz	r3, 8007abc <__ieee754_pow+0x414>
 8007ab0:	4bd4      	ldr	r3, [pc, #848]	; (8007e04 <__ieee754_pow+0x75c>)
 8007ab2:	f7f8 fda9 	bl	8000608 <__aeabi_dmul>
 8007ab6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007aba:	460c      	mov	r4, r1
 8007abc:	1523      	asrs	r3, r4, #20
 8007abe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ac2:	4413      	add	r3, r2
 8007ac4:	9305      	str	r3, [sp, #20]
 8007ac6:	4bd0      	ldr	r3, [pc, #832]	; (8007e08 <__ieee754_pow+0x760>)
 8007ac8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007acc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ad6:	dd08      	ble.n	8007aea <__ieee754_pow+0x442>
 8007ad8:	4bcc      	ldr	r3, [pc, #816]	; (8007e0c <__ieee754_pow+0x764>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	f340 8162 	ble.w	8007da4 <__ieee754_pow+0x6fc>
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007aea:	2400      	movs	r4, #0
 8007aec:	00e3      	lsls	r3, r4, #3
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	4bc7      	ldr	r3, [pc, #796]	; (8007e10 <__ieee754_pow+0x768>)
 8007af2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007af6:	ed93 7b00 	vldr	d7, [r3]
 8007afa:	4629      	mov	r1, r5
 8007afc:	ec53 2b17 	vmov	r2, r3, d7
 8007b00:	eeb0 9a47 	vmov.f32	s18, s14
 8007b04:	eef0 9a67 	vmov.f32	s19, s15
 8007b08:	4682      	mov	sl, r0
 8007b0a:	f7f8 fbc5 	bl	8000298 <__aeabi_dsub>
 8007b0e:	4652      	mov	r2, sl
 8007b10:	4606      	mov	r6, r0
 8007b12:	460f      	mov	r7, r1
 8007b14:	462b      	mov	r3, r5
 8007b16:	ec51 0b19 	vmov	r0, r1, d9
 8007b1a:	f7f8 fbbf 	bl	800029c <__adddf3>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	2000      	movs	r0, #0
 8007b24:	49bb      	ldr	r1, [pc, #748]	; (8007e14 <__ieee754_pow+0x76c>)
 8007b26:	f7f8 fe99 	bl	800085c <__aeabi_ddiv>
 8007b2a:	ec41 0b1a 	vmov	d10, r0, r1
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	f7f8 fd67 	bl	8000608 <__aeabi_dmul>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b46:	46ab      	mov	fp, r5
 8007b48:	106d      	asrs	r5, r5, #1
 8007b4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b52:	ec41 0b18 	vmov	d8, r0, r1
 8007b56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4614      	mov	r4, r2
 8007b62:	461d      	mov	r5, r3
 8007b64:	f7f8 fd50 	bl	8000608 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fb92 	bl	8000298 <__aeabi_dsub>
 8007b74:	ec53 2b19 	vmov	r2, r3, d9
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 fb8a 	bl	8000298 <__aeabi_dsub>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4650      	mov	r0, sl
 8007b8a:	4659      	mov	r1, fp
 8007b8c:	f7f8 fb84 	bl	8000298 <__aeabi_dsub>
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fb7a 	bl	8000298 <__aeabi_dsub>
 8007ba4:	ec53 2b1a 	vmov	r2, r3, d10
 8007ba8:	f7f8 fd2e 	bl	8000608 <__aeabi_dmul>
 8007bac:	ec53 2b18 	vmov	r2, r3, d8
 8007bb0:	ec41 0b19 	vmov	d9, r0, r1
 8007bb4:	ec51 0b18 	vmov	r0, r1, d8
 8007bb8:	f7f8 fd26 	bl	8000608 <__aeabi_dmul>
 8007bbc:	a37c      	add	r3, pc, #496	; (adr r3, 8007db0 <__ieee754_pow+0x708>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	f7f8 fd1f 	bl	8000608 <__aeabi_dmul>
 8007bca:	a37b      	add	r3, pc, #492	; (adr r3, 8007db8 <__ieee754_pow+0x710>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fb64 	bl	800029c <__adddf3>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	f7f8 fd16 	bl	8000608 <__aeabi_dmul>
 8007bdc:	a378      	add	r3, pc, #480	; (adr r3, 8007dc0 <__ieee754_pow+0x718>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fb5b 	bl	800029c <__adddf3>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fd0d 	bl	8000608 <__aeabi_dmul>
 8007bee:	a376      	add	r3, pc, #472	; (adr r3, 8007dc8 <__ieee754_pow+0x720>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fb52 	bl	800029c <__adddf3>
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	462b      	mov	r3, r5
 8007bfc:	f7f8 fd04 	bl	8000608 <__aeabi_dmul>
 8007c00:	a373      	add	r3, pc, #460	; (adr r3, 8007dd0 <__ieee754_pow+0x728>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fb49 	bl	800029c <__adddf3>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	a371      	add	r3, pc, #452	; (adr r3, 8007dd8 <__ieee754_pow+0x730>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fb40 	bl	800029c <__adddf3>
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460f      	mov	r7, r1
 8007c22:	462b      	mov	r3, r5
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fcee 	bl	8000608 <__aeabi_dmul>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fce8 	bl	8000608 <__aeabi_dmul>
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	460d      	mov	r5, r1
 8007c3e:	464b      	mov	r3, r9
 8007c40:	ec51 0b18 	vmov	r0, r1, d8
 8007c44:	f7f8 fb2a 	bl	800029c <__adddf3>
 8007c48:	ec53 2b19 	vmov	r2, r3, d9
 8007c4c:	f7f8 fcdc 	bl	8000608 <__aeabi_dmul>
 8007c50:	4622      	mov	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	f7f8 fb22 	bl	800029c <__adddf3>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4682      	mov	sl, r0
 8007c5c:	468b      	mov	fp, r1
 8007c5e:	464b      	mov	r3, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 fcd0 	bl	8000608 <__aeabi_dmul>
 8007c68:	4b6b      	ldr	r3, [pc, #428]	; (8007e18 <__ieee754_pow+0x770>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	f7f8 fb14 	bl	800029c <__adddf3>
 8007c74:	4652      	mov	r2, sl
 8007c76:	465b      	mov	r3, fp
 8007c78:	f7f8 fb10 	bl	800029c <__adddf3>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4640      	mov	r0, r8
 8007c88:	4649      	mov	r1, r9
 8007c8a:	f7f8 fcbd 	bl	8000608 <__aeabi_dmul>
 8007c8e:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <__ieee754_pow+0x770>)
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	2200      	movs	r2, #0
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 fafd 	bl	8000298 <__aeabi_dsub>
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f7f8 faf9 	bl	8000298 <__aeabi_dsub>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 faf3 	bl	8000298 <__aeabi_dsub>
 8007cb2:	ec53 2b18 	vmov	r2, r3, d8
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	ec51 0b19 	vmov	r0, r1, d9
 8007cc6:	f7f8 fc9f 	bl	8000608 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fae3 	bl	800029c <__adddf3>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 fadb 	bl	800029c <__adddf3>
 8007ce6:	a33e      	add	r3, pc, #248	; (adr r3, 8007de0 <__ieee754_pow+0x738>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	2000      	movs	r0, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	f7f8 fc89 	bl	8000608 <__aeabi_dmul>
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	ec41 0b18 	vmov	d8, r0, r1
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fac9 	bl	8000298 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	f7f8 fac3 	bl	8000298 <__aeabi_dsub>
 8007d12:	a335      	add	r3, pc, #212	; (adr r3, 8007de8 <__ieee754_pow+0x740>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	a334      	add	r3, pc, #208	; (adr r3, 8007df0 <__ieee754_pow+0x748>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fc6d 	bl	8000608 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fab1 	bl	800029c <__adddf3>
 8007d3a:	9a07      	ldr	r2, [sp, #28]
 8007d3c:	4b37      	ldr	r3, [pc, #220]	; (8007e1c <__ieee754_pow+0x774>)
 8007d3e:	4413      	add	r3, r2
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 faaa 	bl	800029c <__adddf3>
 8007d48:	4682      	mov	sl, r0
 8007d4a:	9805      	ldr	r0, [sp, #20]
 8007d4c:	468b      	mov	fp, r1
 8007d4e:	f7f8 fbf1 	bl	8000534 <__aeabi_i2d>
 8007d52:	9a07      	ldr	r2, [sp, #28]
 8007d54:	4b32      	ldr	r3, [pc, #200]	; (8007e20 <__ieee754_pow+0x778>)
 8007d56:	4413      	add	r3, r2
 8007d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4652      	mov	r2, sl
 8007d62:	465b      	mov	r3, fp
 8007d64:	ec51 0b18 	vmov	r0, r1, d8
 8007d68:	f7f8 fa98 	bl	800029c <__adddf3>
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	f7f8 fa94 	bl	800029c <__adddf3>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 fa90 	bl	800029c <__adddf3>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4632      	mov	r2, r6
 8007d80:	463b      	mov	r3, r7
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	f7f8 fa87 	bl	8000298 <__aeabi_dsub>
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	f7f8 fa83 	bl	8000298 <__aeabi_dsub>
 8007d92:	ec53 2b18 	vmov	r2, r3, d8
 8007d96:	f7f8 fa7f 	bl	8000298 <__aeabi_dsub>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4659      	mov	r1, fp
 8007da2:	e610      	b.n	80079c6 <__ieee754_pow+0x31e>
 8007da4:	2401      	movs	r4, #1
 8007da6:	e6a1      	b.n	8007aec <__ieee754_pow+0x444>
 8007da8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007df8 <__ieee754_pow+0x750>
 8007dac:	e617      	b.n	80079de <__ieee754_pow+0x336>
 8007dae:	bf00      	nop
 8007db0:	4a454eef 	.word	0x4a454eef
 8007db4:	3fca7e28 	.word	0x3fca7e28
 8007db8:	93c9db65 	.word	0x93c9db65
 8007dbc:	3fcd864a 	.word	0x3fcd864a
 8007dc0:	a91d4101 	.word	0xa91d4101
 8007dc4:	3fd17460 	.word	0x3fd17460
 8007dc8:	518f264d 	.word	0x518f264d
 8007dcc:	3fd55555 	.word	0x3fd55555
 8007dd0:	db6fabff 	.word	0xdb6fabff
 8007dd4:	3fdb6db6 	.word	0x3fdb6db6
 8007dd8:	33333303 	.word	0x33333303
 8007ddc:	3fe33333 	.word	0x3fe33333
 8007de0:	e0000000 	.word	0xe0000000
 8007de4:	3feec709 	.word	0x3feec709
 8007de8:	dc3a03fd 	.word	0xdc3a03fd
 8007dec:	3feec709 	.word	0x3feec709
 8007df0:	145b01f5 	.word	0x145b01f5
 8007df4:	be3e2fe0 	.word	0xbe3e2fe0
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	3ff00000 	.word	0x3ff00000
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	43400000 	.word	0x43400000
 8007e08:	0003988e 	.word	0x0003988e
 8007e0c:	000bb679 	.word	0x000bb679
 8007e10:	080087f8 	.word	0x080087f8
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	40080000 	.word	0x40080000
 8007e1c:	08008818 	.word	0x08008818
 8007e20:	08008808 	.word	0x08008808
 8007e24:	a3b3      	add	r3, pc, #716	; (adr r3, 80080f4 <__ieee754_pow+0xa4c>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	f7f8 fa35 	bl	800029c <__adddf3>
 8007e32:	4622      	mov	r2, r4
 8007e34:	ec41 0b1a 	vmov	d10, r0, r1
 8007e38:	462b      	mov	r3, r5
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fa2b 	bl	8000298 <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	ec51 0b1a 	vmov	r0, r1, d10
 8007e4a:	f7f8 fe6d 	bl	8000b28 <__aeabi_dcmpgt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	f47f ae04 	bne.w	8007a5c <__ieee754_pow+0x3b4>
 8007e54:	4aa2      	ldr	r2, [pc, #648]	; (80080e0 <__ieee754_pow+0xa38>)
 8007e56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f340 8107 	ble.w	800806e <__ieee754_pow+0x9c6>
 8007e60:	151b      	asrs	r3, r3, #20
 8007e62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e6a:	fa4a fa03 	asr.w	sl, sl, r3
 8007e6e:	44da      	add	sl, fp
 8007e70:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007e74:	489b      	ldr	r0, [pc, #620]	; (80080e4 <__ieee754_pow+0xa3c>)
 8007e76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007e7a:	4108      	asrs	r0, r1
 8007e7c:	ea00 030a 	and.w	r3, r0, sl
 8007e80:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007e84:	f1c1 0114 	rsb	r1, r1, #20
 8007e88:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007e8c:	fa4a fa01 	asr.w	sl, sl, r1
 8007e90:	f1bb 0f00 	cmp.w	fp, #0
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	bfb8      	it	lt
 8007e9e:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ea2:	f7f8 f9f9 	bl	8000298 <__aeabi_dsub>
 8007ea6:	ec41 0b19 	vmov	d9, r0, r1
 8007eaa:	4642      	mov	r2, r8
 8007eac:	464b      	mov	r3, r9
 8007eae:	ec51 0b19 	vmov	r0, r1, d9
 8007eb2:	f7f8 f9f3 	bl	800029c <__adddf3>
 8007eb6:	a37a      	add	r3, pc, #488	; (adr r3, 80080a0 <__ieee754_pow+0x9f8>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	f7f8 fba1 	bl	8000608 <__aeabi_dmul>
 8007ec6:	ec53 2b19 	vmov	r2, r3, d9
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 f9e1 	bl	8000298 <__aeabi_dsub>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f7f8 f9db 	bl	8000298 <__aeabi_dsub>
 8007ee2:	a371      	add	r3, pc, #452	; (adr r3, 80080a8 <__ieee754_pow+0xa00>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 fb8e 	bl	8000608 <__aeabi_dmul>
 8007eec:	a370      	add	r3, pc, #448	; (adr r3, 80080b0 <__ieee754_pow+0xa08>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4689      	mov	r9, r1
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fb85 	bl	8000608 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4640      	mov	r0, r8
 8007f04:	4649      	mov	r1, r9
 8007f06:	f7f8 f9c9 	bl	800029c <__adddf3>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4630      	mov	r0, r6
 8007f14:	4639      	mov	r1, r7
 8007f16:	f7f8 f9c1 	bl	800029c <__adddf3>
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4689      	mov	r9, r1
 8007f22:	f7f8 f9b9 	bl	8000298 <__aeabi_dsub>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7f8 f9b3 	bl	8000298 <__aeabi_dsub>
 8007f32:	4642      	mov	r2, r8
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	464b      	mov	r3, r9
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f7f8 fb63 	bl	8000608 <__aeabi_dmul>
 8007f42:	a35d      	add	r3, pc, #372	; (adr r3, 80080b8 <__ieee754_pow+0xa10>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	4604      	mov	r4, r0
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	f7f8 fb5c 	bl	8000608 <__aeabi_dmul>
 8007f50:	a35b      	add	r3, pc, #364	; (adr r3, 80080c0 <__ieee754_pow+0xa18>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 f99f 	bl	8000298 <__aeabi_dsub>
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	f7f8 fb53 	bl	8000608 <__aeabi_dmul>
 8007f62:	a359      	add	r3, pc, #356	; (adr r3, 80080c8 <__ieee754_pow+0xa20>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 f998 	bl	800029c <__adddf3>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f7f8 fb4a 	bl	8000608 <__aeabi_dmul>
 8007f74:	a356      	add	r3, pc, #344	; (adr r3, 80080d0 <__ieee754_pow+0xa28>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 f98d 	bl	8000298 <__aeabi_dsub>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	f7f8 fb41 	bl	8000608 <__aeabi_dmul>
 8007f86:	a354      	add	r3, pc, #336	; (adr r3, 80080d8 <__ieee754_pow+0xa30>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 f986 	bl	800029c <__adddf3>
 8007f90:	4622      	mov	r2, r4
 8007f92:	462b      	mov	r3, r5
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 f97a 	bl	8000298 <__aeabi_dsub>
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fb2a 	bl	8000608 <__aeabi_dmul>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	ec41 0b19 	vmov	d9, r0, r1
 8007fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 f969 	bl	8000298 <__aeabi_dsub>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	ec51 0b19 	vmov	r0, r1, d9
 8007fce:	f7f8 fc45 	bl	800085c <__aeabi_ddiv>
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	463b      	mov	r3, r7
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 fb13 	bl	8000608 <__aeabi_dmul>
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	f7f8 f959 	bl	800029c <__adddf3>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 f951 	bl	8000298 <__aeabi_dsub>
 8007ff6:	4642      	mov	r2, r8
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	f7f8 f94d 	bl	8000298 <__aeabi_dsub>
 8007ffe:	460b      	mov	r3, r1
 8008000:	4602      	mov	r2, r0
 8008002:	4939      	ldr	r1, [pc, #228]	; (80080e8 <__ieee754_pow+0xa40>)
 8008004:	2000      	movs	r0, #0
 8008006:	f7f8 f947 	bl	8000298 <__aeabi_dsub>
 800800a:	ec41 0b10 	vmov	d0, r0, r1
 800800e:	ee10 3a90 	vmov	r3, s1
 8008012:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801a:	da2b      	bge.n	8008074 <__ieee754_pow+0x9cc>
 800801c:	4650      	mov	r0, sl
 800801e:	f000 f877 	bl	8008110 <scalbn>
 8008022:	ec51 0b10 	vmov	r0, r1, d0
 8008026:	ec53 2b18 	vmov	r2, r3, d8
 800802a:	f7ff bbee 	b.w	800780a <__ieee754_pow+0x162>
 800802e:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <__ieee754_pow+0xa44>)
 8008030:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008034:	429e      	cmp	r6, r3
 8008036:	f77f af0d 	ble.w	8007e54 <__ieee754_pow+0x7ac>
 800803a:	4b2d      	ldr	r3, [pc, #180]	; (80080f0 <__ieee754_pow+0xa48>)
 800803c:	440b      	add	r3, r1
 800803e:	4303      	orrs	r3, r0
 8008040:	d009      	beq.n	8008056 <__ieee754_pow+0x9ae>
 8008042:	ec51 0b18 	vmov	r0, r1, d8
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	f7f8 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800804e:	3800      	subs	r0, #0
 8008050:	bf18      	it	ne
 8008052:	2001      	movne	r0, #1
 8008054:	e448      	b.n	80078e8 <__ieee754_pow+0x240>
 8008056:	4622      	mov	r2, r4
 8008058:	462b      	mov	r3, r5
 800805a:	f7f8 f91d 	bl	8000298 <__aeabi_dsub>
 800805e:	4642      	mov	r2, r8
 8008060:	464b      	mov	r3, r9
 8008062:	f7f8 fd57 	bl	8000b14 <__aeabi_dcmpge>
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f aef4 	beq.w	8007e54 <__ieee754_pow+0x7ac>
 800806c:	e7e9      	b.n	8008042 <__ieee754_pow+0x99a>
 800806e:	f04f 0a00 	mov.w	sl, #0
 8008072:	e71a      	b.n	8007eaa <__ieee754_pow+0x802>
 8008074:	ec51 0b10 	vmov	r0, r1, d0
 8008078:	4619      	mov	r1, r3
 800807a:	e7d4      	b.n	8008026 <__ieee754_pow+0x97e>
 800807c:	491a      	ldr	r1, [pc, #104]	; (80080e8 <__ieee754_pow+0xa40>)
 800807e:	2000      	movs	r0, #0
 8008080:	f7ff bb31 	b.w	80076e6 <__ieee754_pow+0x3e>
 8008084:	2000      	movs	r0, #0
 8008086:	2100      	movs	r1, #0
 8008088:	f7ff bb2d 	b.w	80076e6 <__ieee754_pow+0x3e>
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7ff bb29 	b.w	80076e6 <__ieee754_pow+0x3e>
 8008094:	9204      	str	r2, [sp, #16]
 8008096:	f7ff bb7b 	b.w	8007790 <__ieee754_pow+0xe8>
 800809a:	2300      	movs	r3, #0
 800809c:	f7ff bb65 	b.w	800776a <__ieee754_pow+0xc2>
 80080a0:	00000000 	.word	0x00000000
 80080a4:	3fe62e43 	.word	0x3fe62e43
 80080a8:	fefa39ef 	.word	0xfefa39ef
 80080ac:	3fe62e42 	.word	0x3fe62e42
 80080b0:	0ca86c39 	.word	0x0ca86c39
 80080b4:	be205c61 	.word	0xbe205c61
 80080b8:	72bea4d0 	.word	0x72bea4d0
 80080bc:	3e663769 	.word	0x3e663769
 80080c0:	c5d26bf1 	.word	0xc5d26bf1
 80080c4:	3ebbbd41 	.word	0x3ebbbd41
 80080c8:	af25de2c 	.word	0xaf25de2c
 80080cc:	3f11566a 	.word	0x3f11566a
 80080d0:	16bebd93 	.word	0x16bebd93
 80080d4:	3f66c16c 	.word	0x3f66c16c
 80080d8:	5555553e 	.word	0x5555553e
 80080dc:	3fc55555 	.word	0x3fc55555
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	fff00000 	.word	0xfff00000
 80080e8:	3ff00000 	.word	0x3ff00000
 80080ec:	4090cbff 	.word	0x4090cbff
 80080f0:	3f6f3400 	.word	0x3f6f3400
 80080f4:	652b82fe 	.word	0x652b82fe
 80080f8:	3c971547 	.word	0x3c971547

080080fc <fabs>:
 80080fc:	ec51 0b10 	vmov	r0, r1, d0
 8008100:	ee10 2a10 	vmov	r2, s0
 8008104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008108:	ec43 2b10 	vmov	d0, r2, r3
 800810c:	4770      	bx	lr
	...

08008110 <scalbn>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	ec55 4b10 	vmov	r4, r5, d0
 8008116:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800811a:	4606      	mov	r6, r0
 800811c:	462b      	mov	r3, r5
 800811e:	b999      	cbnz	r1, 8008148 <scalbn+0x38>
 8008120:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008124:	4323      	orrs	r3, r4
 8008126:	d03f      	beq.n	80081a8 <scalbn+0x98>
 8008128:	4b35      	ldr	r3, [pc, #212]	; (8008200 <scalbn+0xf0>)
 800812a:	4629      	mov	r1, r5
 800812c:	ee10 0a10 	vmov	r0, s0
 8008130:	2200      	movs	r2, #0
 8008132:	f7f8 fa69 	bl	8000608 <__aeabi_dmul>
 8008136:	4b33      	ldr	r3, [pc, #204]	; (8008204 <scalbn+0xf4>)
 8008138:	429e      	cmp	r6, r3
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
 800813e:	da10      	bge.n	8008162 <scalbn+0x52>
 8008140:	a327      	add	r3, pc, #156	; (adr r3, 80081e0 <scalbn+0xd0>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	e01f      	b.n	8008188 <scalbn+0x78>
 8008148:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800814c:	4291      	cmp	r1, r2
 800814e:	d10c      	bne.n	800816a <scalbn+0x5a>
 8008150:	ee10 2a10 	vmov	r2, s0
 8008154:	4620      	mov	r0, r4
 8008156:	4629      	mov	r1, r5
 8008158:	f7f8 f8a0 	bl	800029c <__adddf3>
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	e022      	b.n	80081a8 <scalbn+0x98>
 8008162:	460b      	mov	r3, r1
 8008164:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008168:	3936      	subs	r1, #54	; 0x36
 800816a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800816e:	4296      	cmp	r6, r2
 8008170:	dd0d      	ble.n	800818e <scalbn+0x7e>
 8008172:	2d00      	cmp	r5, #0
 8008174:	a11c      	add	r1, pc, #112	; (adr r1, 80081e8 <scalbn+0xd8>)
 8008176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817a:	da02      	bge.n	8008182 <scalbn+0x72>
 800817c:	a11c      	add	r1, pc, #112	; (adr r1, 80081f0 <scalbn+0xe0>)
 800817e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008182:	a319      	add	r3, pc, #100	; (adr r3, 80081e8 <scalbn+0xd8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fa3e 	bl	8000608 <__aeabi_dmul>
 800818c:	e7e6      	b.n	800815c <scalbn+0x4c>
 800818e:	1872      	adds	r2, r6, r1
 8008190:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008194:	428a      	cmp	r2, r1
 8008196:	dcec      	bgt.n	8008172 <scalbn+0x62>
 8008198:	2a00      	cmp	r2, #0
 800819a:	dd08      	ble.n	80081ae <scalbn+0x9e>
 800819c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081a8:	ec45 4b10 	vmov	d0, r4, r5
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081b2:	da08      	bge.n	80081c6 <scalbn+0xb6>
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	a10a      	add	r1, pc, #40	; (adr r1, 80081e0 <scalbn+0xd0>)
 80081b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081bc:	dac0      	bge.n	8008140 <scalbn+0x30>
 80081be:	a10e      	add	r1, pc, #56	; (adr r1, 80081f8 <scalbn+0xe8>)
 80081c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c4:	e7bc      	b.n	8008140 <scalbn+0x30>
 80081c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081ca:	3236      	adds	r2, #54	; 0x36
 80081cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80081d4:	4620      	mov	r0, r4
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <scalbn+0xf8>)
 80081d8:	2200      	movs	r2, #0
 80081da:	e7d5      	b.n	8008188 <scalbn+0x78>
 80081dc:	f3af 8000 	nop.w
 80081e0:	c2f8f359 	.word	0xc2f8f359
 80081e4:	01a56e1f 	.word	0x01a56e1f
 80081e8:	8800759c 	.word	0x8800759c
 80081ec:	7e37e43c 	.word	0x7e37e43c
 80081f0:	8800759c 	.word	0x8800759c
 80081f4:	fe37e43c 	.word	0xfe37e43c
 80081f8:	c2f8f359 	.word	0xc2f8f359
 80081fc:	81a56e1f 	.word	0x81a56e1f
 8008200:	43500000 	.word	0x43500000
 8008204:	ffff3cb0 	.word	0xffff3cb0
 8008208:	3c900000 	.word	0x3c900000

0800820c <with_errno>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4604      	mov	r4, r0
 8008210:	460d      	mov	r5, r1
 8008212:	4616      	mov	r6, r2
 8008214:	f7fd f928 	bl	8005468 <__errno>
 8008218:	4629      	mov	r1, r5
 800821a:	6006      	str	r6, [r0, #0]
 800821c:	4620      	mov	r0, r4
 800821e:	bd70      	pop	{r4, r5, r6, pc}

08008220 <xflow>:
 8008220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008222:	4614      	mov	r4, r2
 8008224:	461d      	mov	r5, r3
 8008226:	b108      	cbz	r0, 800822c <xflow+0xc>
 8008228:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800822c:	e9cd 2300 	strd	r2, r3, [sp]
 8008230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	2222      	movs	r2, #34	; 0x22
 800823e:	b003      	add	sp, #12
 8008240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008244:	f7ff bfe2 	b.w	800820c <with_errno>

08008248 <__math_uflow>:
 8008248:	b508      	push	{r3, lr}
 800824a:	2200      	movs	r2, #0
 800824c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008250:	f7ff ffe6 	bl	8008220 <xflow>
 8008254:	ec41 0b10 	vmov	d0, r0, r1
 8008258:	bd08      	pop	{r3, pc}

0800825a <__math_oflow>:
 800825a:	b508      	push	{r3, lr}
 800825c:	2200      	movs	r2, #0
 800825e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008262:	f7ff ffdd 	bl	8008220 <xflow>
 8008266:	ec41 0b10 	vmov	d0, r0, r1
 800826a:	bd08      	pop	{r3, pc}

0800826c <__ieee754_sqrt>:
 800826c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	ec55 4b10 	vmov	r4, r5, d0
 8008274:	4e67      	ldr	r6, [pc, #412]	; (8008414 <__ieee754_sqrt+0x1a8>)
 8008276:	43ae      	bics	r6, r5
 8008278:	ee10 0a10 	vmov	r0, s0
 800827c:	ee10 2a10 	vmov	r2, s0
 8008280:	4629      	mov	r1, r5
 8008282:	462b      	mov	r3, r5
 8008284:	d10d      	bne.n	80082a2 <__ieee754_sqrt+0x36>
 8008286:	f7f8 f9bf 	bl	8000608 <__aeabi_dmul>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4620      	mov	r0, r4
 8008290:	4629      	mov	r1, r5
 8008292:	f7f8 f803 	bl	800029c <__adddf3>
 8008296:	4604      	mov	r4, r0
 8008298:	460d      	mov	r5, r1
 800829a:	ec45 4b10 	vmov	d0, r4, r5
 800829e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	dc0b      	bgt.n	80082be <__ieee754_sqrt+0x52>
 80082a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082aa:	4326      	orrs	r6, r4
 80082ac:	d0f5      	beq.n	800829a <__ieee754_sqrt+0x2e>
 80082ae:	b135      	cbz	r5, 80082be <__ieee754_sqrt+0x52>
 80082b0:	f7f7 fff2 	bl	8000298 <__aeabi_dsub>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	f7f8 fad0 	bl	800085c <__aeabi_ddiv>
 80082bc:	e7eb      	b.n	8008296 <__ieee754_sqrt+0x2a>
 80082be:	1509      	asrs	r1, r1, #20
 80082c0:	f000 808d 	beq.w	80083de <__ieee754_sqrt+0x172>
 80082c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082c8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80082cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d0:	07c9      	lsls	r1, r1, #31
 80082d2:	bf5c      	itt	pl
 80082d4:	005b      	lslpl	r3, r3, #1
 80082d6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80082da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082de:	bf58      	it	pl
 80082e0:	0052      	lslpl	r2, r2, #1
 80082e2:	2500      	movs	r5, #0
 80082e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80082e8:	1076      	asrs	r6, r6, #1
 80082ea:	0052      	lsls	r2, r2, #1
 80082ec:	f04f 0e16 	mov.w	lr, #22
 80082f0:	46ac      	mov	ip, r5
 80082f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082f6:	eb0c 0001 	add.w	r0, ip, r1
 80082fa:	4298      	cmp	r0, r3
 80082fc:	bfde      	ittt	le
 80082fe:	1a1b      	suble	r3, r3, r0
 8008300:	eb00 0c01 	addle.w	ip, r0, r1
 8008304:	186d      	addle	r5, r5, r1
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	f1be 0e01 	subs.w	lr, lr, #1
 800830c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008310:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008314:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008318:	d1ed      	bne.n	80082f6 <__ieee754_sqrt+0x8a>
 800831a:	4674      	mov	r4, lr
 800831c:	2720      	movs	r7, #32
 800831e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008322:	4563      	cmp	r3, ip
 8008324:	eb01 000e 	add.w	r0, r1, lr
 8008328:	dc02      	bgt.n	8008330 <__ieee754_sqrt+0xc4>
 800832a:	d113      	bne.n	8008354 <__ieee754_sqrt+0xe8>
 800832c:	4290      	cmp	r0, r2
 800832e:	d811      	bhi.n	8008354 <__ieee754_sqrt+0xe8>
 8008330:	2800      	cmp	r0, #0
 8008332:	eb00 0e01 	add.w	lr, r0, r1
 8008336:	da57      	bge.n	80083e8 <__ieee754_sqrt+0x17c>
 8008338:	f1be 0f00 	cmp.w	lr, #0
 800833c:	db54      	blt.n	80083e8 <__ieee754_sqrt+0x17c>
 800833e:	f10c 0801 	add.w	r8, ip, #1
 8008342:	eba3 030c 	sub.w	r3, r3, ip
 8008346:	4290      	cmp	r0, r2
 8008348:	bf88      	it	hi
 800834a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800834e:	1a12      	subs	r2, r2, r0
 8008350:	440c      	add	r4, r1
 8008352:	46c4      	mov	ip, r8
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	3f01      	subs	r7, #1
 8008358:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800835c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008360:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008364:	d1dd      	bne.n	8008322 <__ieee754_sqrt+0xb6>
 8008366:	4313      	orrs	r3, r2
 8008368:	d01b      	beq.n	80083a2 <__ieee754_sqrt+0x136>
 800836a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008418 <__ieee754_sqrt+0x1ac>
 800836e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800841c <__ieee754_sqrt+0x1b0>
 8008372:	e9da 0100 	ldrd	r0, r1, [sl]
 8008376:	e9db 2300 	ldrd	r2, r3, [fp]
 800837a:	f7f7 ff8d 	bl	8000298 <__aeabi_dsub>
 800837e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 fbb9 	bl	8000b00 <__aeabi_dcmple>
 800838e:	b140      	cbz	r0, 80083a2 <__ieee754_sqrt+0x136>
 8008390:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008394:	e9da 0100 	ldrd	r0, r1, [sl]
 8008398:	e9db 2300 	ldrd	r2, r3, [fp]
 800839c:	d126      	bne.n	80083ec <__ieee754_sqrt+0x180>
 800839e:	3501      	adds	r5, #1
 80083a0:	463c      	mov	r4, r7
 80083a2:	106a      	asrs	r2, r5, #1
 80083a4:	0863      	lsrs	r3, r4, #1
 80083a6:	07e9      	lsls	r1, r5, #31
 80083a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80083ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80083b0:	bf48      	it	mi
 80083b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80083b6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80083ba:	461c      	mov	r4, r3
 80083bc:	e76d      	b.n	800829a <__ieee754_sqrt+0x2e>
 80083be:	0ad3      	lsrs	r3, r2, #11
 80083c0:	3815      	subs	r0, #21
 80083c2:	0552      	lsls	r2, r2, #21
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0fa      	beq.n	80083be <__ieee754_sqrt+0x152>
 80083c8:	02dc      	lsls	r4, r3, #11
 80083ca:	d50a      	bpl.n	80083e2 <__ieee754_sqrt+0x176>
 80083cc:	f1c1 0420 	rsb	r4, r1, #32
 80083d0:	fa22 f404 	lsr.w	r4, r2, r4
 80083d4:	1e4d      	subs	r5, r1, #1
 80083d6:	408a      	lsls	r2, r1
 80083d8:	4323      	orrs	r3, r4
 80083da:	1b41      	subs	r1, r0, r5
 80083dc:	e772      	b.n	80082c4 <__ieee754_sqrt+0x58>
 80083de:	4608      	mov	r0, r1
 80083e0:	e7f0      	b.n	80083c4 <__ieee754_sqrt+0x158>
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	3101      	adds	r1, #1
 80083e6:	e7ef      	b.n	80083c8 <__ieee754_sqrt+0x15c>
 80083e8:	46e0      	mov	r8, ip
 80083ea:	e7aa      	b.n	8008342 <__ieee754_sqrt+0xd6>
 80083ec:	f7f7 ff56 	bl	800029c <__adddf3>
 80083f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f8 fb76 	bl	8000aec <__aeabi_dcmplt>
 8008400:	b120      	cbz	r0, 800840c <__ieee754_sqrt+0x1a0>
 8008402:	1ca0      	adds	r0, r4, #2
 8008404:	bf08      	it	eq
 8008406:	3501      	addeq	r5, #1
 8008408:	3402      	adds	r4, #2
 800840a:	e7ca      	b.n	80083a2 <__ieee754_sqrt+0x136>
 800840c:	3401      	adds	r4, #1
 800840e:	f024 0401 	bic.w	r4, r4, #1
 8008412:	e7c6      	b.n	80083a2 <__ieee754_sqrt+0x136>
 8008414:	7ff00000 	.word	0x7ff00000
 8008418:	200001d8 	.word	0x200001d8
 800841c:	200001e0 	.word	0x200001e0

08008420 <_init>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

0800842c <_fini>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr
