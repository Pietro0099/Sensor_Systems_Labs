
Homework_7b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003920  08003920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003928  08003928  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  0800393c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800393c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e776  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edd  00000000  00000000  0002e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b13  00000000  00000000  000314e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015acc  00000000  00000000  00031ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa53  00000000  00000000  00047ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b2ff  00000000  00000000  0005751a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bf0  00000000  00000000  000e281c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e640c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003898 	.word	0x08003898

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003898 	.word	0x08003898

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <buffer_cpy>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buffer_cpy(uint16_t *buffer, matrix *to_buffer) {
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	// Place all elements in a buffer to be sent by SPI
	for (int i = 0; i < 5; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	e019      	b.n	8000514 <buffer_cpy+0x44>
			buffer[i] = (uint16_t)((to_buffer[i].column << 8) | (to_buffer[i].row & 0xFF));
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	021b      	lsls	r3, r3, #8
 80004ec:	b21a      	sxth	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	6839      	ldr	r1, [r7, #0]
 80004f4:	440b      	add	r3, r1
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	4313      	orrs	r3, r2
 8000500:	b219      	sxth	r1, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	b28a      	uxth	r2, r1
 800050c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3301      	adds	r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b04      	cmp	r3, #4
 8000518:	dde2      	ble.n	80004e0 <buffer_cpy+0x10>
	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (htim==&htim2){				//TIM2 sends the data to spi
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d10a      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_SPI_Transmit_DMA(&hspi1,(uint8_t*)&buffer[position], 2);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000540:	4413      	add	r3, r2
 8000542:	2202      	movs	r2, #2
 8000544:	4619      	mov	r1, r3
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000548:	f002 f818 	bl	800257c <HAL_SPI_Transmit_DMA>
	} else if(htim==&htim3){		//TIM3 sets the switch flag of the letters(operation is executed in main)
		letter_switch = !letter_switch;
	}
}
 800054c:	e00d      	b.n	800056a <HAL_TIM_PeriodElapsedCallback+0x42>
	} else if(htim==&htim3){		//TIM3 sets the switch flag of the letters(operation is executed in main)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d109      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x42>
		letter_switch = !letter_switch;
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf0c      	ite	eq
 800055e:	2301      	moveq	r3, #1
 8000560:	2300      	movne	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000e0 	.word	0x200000e0
 8000578:	200001be 	.word	0x200001be
 800057c:	200001b4 	.word	0x200001b4
 8000580:	20000028 	.word	0x20000028
 8000584:	20000128 	.word	0x20000128
 8000588:	200001bf 	.word	0x200001bf

0800058c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	// Set & Reset the RCLK Pin
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <HAL_SPI_TxCpltCallback+0x40>)
 800059a:	f001 fab3 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <HAL_SPI_TxCpltCallback+0x40>)
 80005a4:	f001 faae 	bl	8001b04 <HAL_GPIO_WritePin>
	// Update position index
	if(++position >= 5)
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_SPI_TxCpltCallback+0x44>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_SPI_TxCpltCallback+0x44>)
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_SPI_TxCpltCallback+0x44>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d902      	bls.n	80005c2 <HAL_SPI_TxCpltCallback+0x36>
		position = 0;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_SPI_TxCpltCallback+0x44>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400
 80005d0:	200001be 	.word	0x200001be

080005d4 <main>:
/**
	* @brief  The application entry point.
	* @retval int
	*/
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b096      	sub	sp, #88	; 0x58
 80005d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	matrix letter_A[5] = {{16,31},{8,36},{4,68},{2,36},{1,31}};
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <main+0xc8>)
 80005dc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ee:	e884 0003 	stmia.w	r4, {r0, r1}
	matrix letter_W[5] = {{16,126},{8,1},{4,14},{2,1},{1,126}};
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <main+0xcc>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000604:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t temp_letter_switch = letter_switch;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0xd0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000610:	f000 fc00 	bl	8000e14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000614:	f000 f852 	bl	80006bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000618:	f000 f9d6 	bl	80009c8 <MX_GPIO_Init>
	MX_DMA_Init();
 800061c:	f000 f9b4 	bl	8000988 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000620:	f000 f988 	bl	8000934 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000624:	f000 f8b6 	bl	8000794 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000628:	f000 f8ea 	bl	8000800 <MX_TIM2_Init>
	MX_TIM3_Init();
 800062c:	f000 f934 	bl	8000898 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	// Initialize the buffer to one of the letters
	buffer_cpy(buffer, letter_W);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	481c      	ldr	r0, [pc, #112]	; (80006a8 <main+0xd4>)
 8000636:	f7ff ff4b 	bl	80004d0 <buffer_cpy>

	// Start timers
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <main+0xd8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f06f 0201 	mvn.w	r2, #1
 8000642:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <main+0xd8>)
 8000646:	f002 fa43 	bl	8002ad0 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <main+0xdc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f06f 0201 	mvn.w	r2, #1
 8000652:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <main+0xdc>)
 8000656:	f002 fa3b 	bl	8002ad0 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// temp_letter_switch is a flag by triggering TIM3
		if (temp_letter_switch != letter_switch){
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0xd0>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000662:	429a      	cmp	r2, r3
 8000664:	d0f9      	beq.n	800065a <main+0x86>
			// Pause the SPI transmission
			HAL_SPI_DMAPause(&hspi1);
 8000666:	4813      	ldr	r0, [pc, #76]	; (80006b4 <main+0xe0>)
 8000668:	f002 f83e 	bl	80026e8 <HAL_SPI_DMAPause>

			// Change the letter data in the buffer
			buffer_cpy(buffer, (letter_switch == 1) ? letter_A : letter_W);
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0xd0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d102      	bne.n	800067a <main+0xa6>
 8000674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000678:	e000      	b.n	800067c <main+0xa8>
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0xd4>)
 8000680:	f7ff ff26 	bl	80004d0 <buffer_cpy>
			temp_letter_switch = letter_switch;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <main+0xd0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			position = 0;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <main+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]

			// Resume the SPI transmission
			HAL_SPI_DMAResume(&hspi1);
 8000692:	4808      	ldr	r0, [pc, #32]	; (80006b4 <main+0xe0>)
 8000694:	f002 f84a 	bl	800272c <HAL_SPI_DMAResume>
		if (temp_letter_switch != letter_switch){
 8000698:	e7df      	b.n	800065a <main+0x86>
 800069a:	bf00      	nop
 800069c:	080038b0 	.word	0x080038b0
 80006a0:	080038d8 	.word	0x080038d8
 80006a4:	200001bf 	.word	0x200001bf
 80006a8:	200001b4 	.word	0x200001b4
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	20000128 	.word	0x20000128
 80006b4:	20000028 	.word	0x20000028
 80006b8:	200001be 	.word	0x200001be

080006bc <SystemClock_Config>:
/**
	* @brief System Clock Configuration
	* @retval None
	*/
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f8b8 	bl	8003840 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <SystemClock_Config+0xd0>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd4>)
 800070a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000730:	2310      	movs	r3, #16
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073a:	2304      	movs	r3, #4
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800073e:	2307      	movs	r3, #7
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f9f6 	bl	8001b38 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000752:	f000 f9a7 	bl	8000aa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
															|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fc58 	bl	8002028 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800077e:	f000 f991 	bl	8000aa4 <Error_Handler>
	}
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_SPI1_Init>:
	* @brief SPI1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI1_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e6:	f001 fe3f 	bl	8002468 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80007f0:	f000 f958 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_TIM2_Init>:
	* @brief TIM2 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM2_Init+0x94>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400-1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM2_Init+0x94>)
 8000826:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800082a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_TIM2_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40-1;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM2_Init+0x94>)
 8000834:	2227      	movs	r2, #39	; 0x27
 8000836:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM2_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM2_Init+0x94>)
 8000846:	f002 f8f3 	bl	8002a30 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000850:	f000 f928 	bl	8000aa4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM2_Init+0x94>)
 8000862:	f002 fa9f 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 800086c:	f000 f91a 	bl	8000aa4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM2_Init+0x94>)
 800087e:	f002 fc9b 	bl	80031b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000888:	f000 f90c 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000e0 	.word	0x200000e0

08000898 <MX_TIM3_Init>:
	* @brief TIM3 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_TIM3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM3_Init+0x94>)
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_TIM3_Init+0x98>)
 80008b8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8400-1;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_TIM3_Init+0x94>)
 80008bc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008c0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM3_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000-1;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_TIM3_Init+0x94>)
 80008ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80008ce:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_TIM3_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM3_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_TIM3_Init+0x94>)
 80008de:	f002 f8a7 	bl	8002a30 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80008e8:	f000 f8dc 	bl	8000aa4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_TIM3_Init+0x94>)
 80008fa:	f002 fa53 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000904:	f000 f8ce 	bl	8000aa4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_TIM3_Init+0x94>)
 8000916:	f002 fc4f 	bl	80031b8 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000920:	f000 f8c0 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000128 	.word	0x20000128
 8000930:	40000400 	.word	0x40000400

08000934 <MX_USART2_UART_Init>:
	* @brief USART2 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 fca6 	bl	80032bc <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000976:	f000 f895 	bl	8000aa4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000170 	.word	0x20000170
 8000984:	40004400 	.word	0x40004400

08000988 <MX_DMA_Init>:

/**
	* Enable DMA controller clock
	*/
static void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <MX_DMA_Init+0x3c>)
 8000998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	203b      	movs	r0, #59	; 0x3b
 80009b0:	f000 fb7d 	bl	80010ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009b4:	203b      	movs	r0, #59	; 0x3b
 80009b6:	f000 fb96 	bl	80010e6 <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
	* @brief GPIO Initialization Function
	* @param None
	* @retval None
	*/
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_GPIO_Init+0xd0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a54:	f001 f856 	bl	8001b04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a70:	f000 fec4 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0xd4>)
 8000a8c:	f000 feb6 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <Error_Handler>:
/**
	* @brief  This function is executed in case of error occurrence.
	* @retval None
	*/
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f000 fad2 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <HAL_SPI_MspInit+0xe0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d159      	bne.n	8000bd6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_SPI_MspInit+0xe4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5a:	23e0      	movs	r3, #224	; 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481c      	ldr	r0, [pc, #112]	; (8000be8 <HAL_SPI_MspInit+0xe8>)
 8000b76:	f000 fe41 	bl	80017fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <HAL_SPI_MspInit+0xf0>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b82:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000bbc:	f000 faae 	bl	800111c <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000bc6:	f7ff ff6d 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000bce:	649a      	str	r2, [r3, #72]	; 0x48
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_SPI_MspInit+0xec>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013000 	.word	0x40013000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	20000080 	.word	0x20000080
 8000bf0:	40026458 	.word	0x40026458

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d116      	bne.n	8000c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201c      	movs	r0, #28
 8000c28:	f000 fa41 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c2c:	201c      	movs	r0, #28
 8000c2e:	f000 fa5a 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c32:	e01a      	b.n	8000c6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_TIM_Base_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d115      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x80>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201d      	movs	r0, #29
 8000c60:	f000 fa25 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c64:	201d      	movs	r0, #29
 8000c66:	f000 fa3e 	bl	80010e6 <HAL_NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40000400 	.word	0x40000400

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x8c>)
 8000cf2:	f000 fd83 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8ae 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM2_IRQHandler+0x10>)
 8000d66:	f001 ff15 	bl	8002b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000e0 	.word	0x200000e0

08000d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM3_IRQHandler+0x10>)
 8000d7a:	f001 ff0b 	bl	8002b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000128 	.word	0x20000128

08000d88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA2_Stream3_IRQHandler+0x10>)
 8000d8e:	f000 facb 	bl	8001328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000080 	.word	0x20000080

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:
 8000dce:	58d4      	ldr	r4, [r2, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:
 8000dd4:	18c4      	adds	r4, r0, r3
 8000dd6:	428c      	cmp	r4, r1
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
 8000dde:	2300      	movs	r3, #0
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:
 8000de6:	42a2      	cmp	r2, r4
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
 8000dee:	f002 fd2f 	bl	8003850 <__libc_init_array>
 8000df2:	f7ff fbef 	bl	80005d4 <main>
 8000df6:	4770      	bx	lr
 8000df8:	20018000 	.word	0x20018000
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	08003930 	.word	0x08003930
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	200001c4 	.word	0x200001c4

08000e10 <ADC_IRQHandler>:
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f92b 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe32 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f943 	bl	8001102 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f90b 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	200001c0 	.word	0x200001c0

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200001c0 	.word	0x200001c0

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff feda 	bl	8000ee0 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e099      	b.n	800126c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e00f      	b.n	800117a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fec1 	bl	8000ee0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d908      	bls.n	800117a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e078      	b.n	800126c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e8      	bne.n	800115a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_DMA_Init+0x158>)
 8001194:	4013      	ands	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d107      	bne.n	80011e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4313      	orrs	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2b04      	cmp	r3, #4
 800120c:	d117      	bne.n	800123e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa6f 	bl	8001704 <DMA_CheckFifoParam>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800123a:	2301      	movs	r3, #1
 800123c:	e016      	b.n	800126c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa26 	bl	8001698 <DMA_CalcBaseAndBitshift>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	223f      	movs	r2, #63	; 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f010803f 	.word	0xf010803f

08001278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_DMA_Start_IT+0x26>
 800129a:	2302      	movs	r3, #2
 800129c:	e040      	b.n	8001320 <HAL_DMA_Start_IT+0xa8>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12f      	bne.n	8001312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f9b8 	bl	800163c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0216 	orr.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e005      	b.n	800131e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001334:	4b8e      	ldr	r3, [pc, #568]	; (8001570 <HAL_DMA_IRQHandler+0x248>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <HAL_DMA_IRQHandler+0x24c>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0a9b      	lsrs	r3, r3, #10
 8001340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2208      	movs	r2, #8
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2208      	movs	r2, #8
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2201      	movs	r2, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2204      	movs	r2, #4
 80013d0:	409a      	lsls	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d012      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2204      	movs	r2, #4
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2210      	movs	r2, #16
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d043      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d03c      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2210      	movs	r2, #16
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d018      	beq.n	800146a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d108      	bne.n	8001458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d024      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
 8001456:	e01f      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
 8001468:	e016      	b.n	8001498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0208 	bic.w	r2, r2, #8
 8001486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2220      	movs	r2, #32
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 808f 	beq.w	80015c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8087 	beq.w	80015c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2220      	movs	r2, #32
 80014c0:	409a      	lsls	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d136      	bne.n	8001540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0216 	bic.w	r2, r2, #22
 80014e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <HAL_DMA_IRQHandler+0x1da>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0208 	bic.w	r2, r2, #8
 8001510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	223f      	movs	r2, #63	; 0x3f
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001532:	2b00      	cmp	r3, #0
 8001534:	d07e      	beq.n	8001634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
        }
        return;
 800153e:	e079      	b.n	8001634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01d      	beq.n	800158a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10d      	bne.n	8001578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	2b00      	cmp	r3, #0
 8001562:	d031      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
 800156c:	e02c      	b.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
 8001588:	e01e      	b.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0210 	bic.w	r2, r2, #16
 80015a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d032      	beq.n	8001636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d022      	beq.n	8001622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2205      	movs	r2, #5
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d307      	bcc.n	8001610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x2cc>
 800160e:	e000      	b.n	8001612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e000      	b.n	8001636 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001634:	bf00      	nop
    }
  }
}
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d108      	bne.n	800167c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800167a:	e007      	b.n	800168c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3b10      	subs	r3, #16
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <DMA_CalcBaseAndBitshift+0x64>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <DMA_CalcBaseAndBitshift+0x68>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d909      	bls.n	80016da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
 80016d8:	e007      	b.n	80016ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	aaaaaaab 	.word	0xaaaaaaab
 8001700:	08003918 	.word	0x08003918

08001704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11f      	bne.n	800175e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d856      	bhi.n	80017d2 <DMA_CheckFifoParam+0xce>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <DMA_CheckFifoParam+0x28>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	0800173d 	.word	0x0800173d
 8001730:	0800174f 	.word	0x0800174f
 8001734:	0800173d 	.word	0x0800173d
 8001738:	080017d3 	.word	0x080017d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d046      	beq.n	80017d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174c:	e043      	b.n	80017d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001756:	d140      	bne.n	80017da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e03d      	b.n	80017da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001766:	d121      	bne.n	80017ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d837      	bhi.n	80017de <DMA_CheckFifoParam+0xda>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <DMA_CheckFifoParam+0x70>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178b 	.word	0x0800178b
 800177c:	08001785 	.word	0x08001785
 8001780:	0800179d 	.word	0x0800179d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
      break;
 8001788:	e030      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800179a:	e022      	b.n	80017e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017a4:	d11f      	bne.n	80017e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017aa:	e01c      	b.n	80017e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d903      	bls.n	80017ba <DMA_CheckFifoParam+0xb6>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d003      	beq.n	80017c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b8:	e018      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
      break;
 80017be:	e015      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      break;
 80017d0:	e00b      	b.n	80017ea <DMA_CheckFifoParam+0xe6>
      break;
 80017d2:	bf00      	nop
 80017d4:	e00a      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e008      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e006      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017de:	bf00      	nop
 80017e0:	e004      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
 80017e4:	e002      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;   
 80017e6:	bf00      	nop
 80017e8:	e000      	b.n	80017ec <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
    }
  } 
  
  return status; 
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e159      	b.n	8001acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8148 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a2 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x202>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x1fe>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x1fa>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x1f6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x300>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x1f2>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f aea2 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40013c00 	.word	0x40013c00

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e267      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d075      	beq.n	8001c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d00c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d112      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7a:	d10b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d05b      	beq.n	8001c40 <HAL_RCC_OscConfig+0x108>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d157      	bne.n	8001c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e242      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0x74>
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xb0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x98>
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6c      	ldr	r2, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xb0>
 8001bd0:	4b69      	ldr	r3, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a68      	ldr	r2, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f976 	bl	8000ee0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f972 	bl	8000ee0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e207      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xc0>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff f962 	bl	8000ee0 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff f95e 	bl	8000ee0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1f3      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0xe8>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x152>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c7      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	e03a      	b.n	8001d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x244>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff f917 	bl	8000ee0 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f913 	bl	8000ee0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1a8      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4925      	ldr	r1, [pc, #148]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x244>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f8f6 	bl	8000ee0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff f8f2 	bl	8000ee0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e187      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d036      	beq.n	8001d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x248>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f8d6 	bl	8000ee0 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff f8d2 	bl	8000ee0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e167      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x200>
 8001d56:	e01b      	b.n	8001d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x248>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8bf 	bl	8000ee0 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	e00e      	b.n	8001d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d66:	f7ff f8bb 	bl	8000ee0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d907      	bls.n	8001d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e150      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	42470000 	.word	0x42470000
 8001d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ea      	bne.n	8001d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8097 	beq.w	8001ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a7c      	ldr	r2, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b77      	ldr	r3, [pc, #476]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b74      	ldr	r3, [pc, #464]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a73      	ldr	r2, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7ff f87b 	bl	8000ee0 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff f877 	bl	8000ee0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e10c      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2ea>
 8001e14:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	e01c      	b.n	8001e5c <HAL_RCC_OscConfig+0x324>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x30c>
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0x324>
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d015      	beq.n	8001e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff f83c 	bl	8000ee0 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f838 	bl	8000ee0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0cb      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0ee      	beq.n	8001e6c <HAL_RCC_OscConfig+0x334>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff f826 	bl	8000ee0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff f822 	bl	8000ee0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0b5      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ee      	bne.n	8001e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a1 	beq.w	8002018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d05c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d141      	bne.n	8001f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fff6 	bl	8000ee0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fff2 	bl	8000ee0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e087      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	491b      	ldr	r1, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe ffcb 	bl	8000ee0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe ffc7 	bl	8000ee0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e05c      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x416>
 8001f6c:	e054      	b.n	8002018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe ffb4 	bl	8000ee0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe ffb0 	bl	8000ee0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e045      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x444>
 8001f9a:	e03d      	b.n	8002018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e038      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x4ec>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d028      	beq.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d121      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11a      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cc      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d90c      	bls.n	8002064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800209e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d044      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d119      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e067      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fee2 	bl	8000ee0 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fede 	bl	8000ee0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d20c      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fe42 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08003900 	.word	0x08003900
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f8:	b094      	sub	sp, #80	; 0x50
 80021fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002200:	2300      	movs	r3, #0
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d00d      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 8002218:	2b08      	cmp	r3, #8
 800221a:	f200 80e1 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 8002222:	2b04      	cmp	r3, #4
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x3a>
 8002226:	e0db      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b73      	ldr	r3, [pc, #460]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800222c:	e0db      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002232:	e0d8      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002234:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	2200      	movs	r2, #0
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
 8002254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
 8002262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002266:	4622      	mov	r2, r4
 8002268:	462b      	mov	r3, r5
 800226a:	f04f 0000 	mov.w	r0, #0
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	0159      	lsls	r1, r3, #5
 8002274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002278:	0150      	lsls	r0, r2, #5
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4621      	mov	r1, r4
 8002280:	1a51      	subs	r1, r2, r1
 8002282:	6139      	str	r1, [r7, #16]
 8002284:	4629      	mov	r1, r5
 8002286:	eb63 0301 	sbc.w	r3, r3, r1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002298:	4659      	mov	r1, fp
 800229a:	018b      	lsls	r3, r1, #6
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a2:	4651      	mov	r1, sl
 80022a4:	018a      	lsls	r2, r1, #6
 80022a6:	4651      	mov	r1, sl
 80022a8:	ebb2 0801 	subs.w	r8, r2, r1
 80022ac:	4659      	mov	r1, fp
 80022ae:	eb63 0901 	sbc.w	r9, r3, r1
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022c6:	4690      	mov	r8, r2
 80022c8:	4699      	mov	r9, r3
 80022ca:	4623      	mov	r3, r4
 80022cc:	eb18 0303 	adds.w	r3, r8, r3
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	462b      	mov	r3, r5
 80022d4:	eb49 0303 	adc.w	r3, r9, r3
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022e6:	4629      	mov	r1, r5
 80022e8:	024b      	lsls	r3, r1, #9
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f0:	4621      	mov	r1, r4
 80022f2:	024a      	lsls	r2, r1, #9
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002304:	f7fd ff66 	bl	80001d4 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002310:	e058      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	2200      	movs	r2, #0
 800231a:	4618      	mov	r0, r3
 800231c:	4611      	mov	r1, r2
 800231e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800232c:	4642      	mov	r2, r8
 800232e:	464b      	mov	r3, r9
 8002330:	f04f 0000 	mov.w	r0, #0
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	0159      	lsls	r1, r3, #5
 800233a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233e:	0150      	lsls	r0, r2, #5
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4641      	mov	r1, r8
 8002346:	ebb2 0a01 	subs.w	sl, r2, r1
 800234a:	4649      	mov	r1, r9
 800234c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800235c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002364:	ebb2 040a 	subs.w	r4, r2, sl
 8002368:	eb63 050b 	sbc.w	r5, r3, fp
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	00eb      	lsls	r3, r5, #3
 8002376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237a:	00e2      	lsls	r2, r4, #3
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	4643      	mov	r3, r8
 8002382:	18e3      	adds	r3, r4, r3
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	464b      	mov	r3, r9
 8002388:	eb45 0303 	adc.w	r3, r5, r3
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ae:	2200      	movs	r2, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	61fa      	str	r2, [r7, #28]
 80023b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b8:	f7fd ff0c 	bl	80001d4 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3750      	adds	r7, #80	; 0x50
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08003910 	.word	0x08003910

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08003910 	.word	0x08003910

08002468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07b      	b.n	8002572 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800248a:	d009      	beq.n	80024a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
 8002492:	e005      	b.n	80024a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fb20 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0104 	and.w	r1, r3, #4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	f003 0210 	and.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_SPI_Transmit_DMA+0x20>
 8002598:	2302      	movs	r3, #2
 800259a:	e09b      	b.n	80026d4 <HAL_SPI_Transmit_DMA+0x158>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
 80025b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025b4:	e089      	b.n	80026ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit_DMA+0x46>
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025c6:	e080      	b.n	80026ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260e:	d10f      	bne.n	8002630 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	4a29      	ldr	r2, [pc, #164]	; (80026dc <HAL_SPI_Transmit_DMA+0x160>)
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_SPI_Transmit_DMA+0x164>)
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_SPI_Transmit_DMA+0x168>)
 8002646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2200      	movs	r2, #0
 800264e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4619      	mov	r1, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002668:	f7fe fe06 	bl	8001278 <HAL_DMA_Start_IT>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800268a:	e01e      	b.n	80026ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d007      	beq.n	80026aa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0202 	orr.w	r2, r2, #2
 80026c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08002841 	.word	0x08002841
 80026e0:	08002799 	.word	0x08002799
 80026e4:	0800285d 	.word	0x0800285d

080026e8 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_SPI_DMAPause+0x16>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e010      	b.n	8002720 <HAL_SPI_DMAPause+0x38>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0203 	bic.w	r2, r2, #3
 8002714:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_SPI_DMAResume+0x16>
 800273e:	2302      	movs	r3, #2
 8002740:	e010      	b.n	8002764 <HAL_SPI_DMAResume+0x38>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0203 	orr.w	r2, r2, #3
 8002758:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a6:	f7fe fb9b 	bl	8000ee0 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d03b      	beq.n	8002834 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0220 	bic.w	r2, r2, #32
 80027ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0202 	bic.w	r2, r2, #2
 80027da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f000 f8e3 	bl	80029ac <SPI_EndRxTxTransaction>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7ff ffa9 	bl	8002784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002832:	e002      	b.n	800283a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7fd fea9 	bl	800058c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff ff8e 	bl	8002770 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0203 	bic.w	r2, r2, #3
 8002878:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff ff78 	bl	8002784 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ac:	f7fe fb18 	bl	8000ee0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028bc:	f7fe fb10 	bl	8000ee0 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e054      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d050      	beq.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe fb00 	bl	8000ee0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e017      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d19b      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000

080029ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <SPI_EndRxTxTransaction+0x7c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <SPI_EndRxTxTransaction+0x80>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0d5b      	lsrs	r3, r3, #21
 80029c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d6:	d112      	bne.n	80029fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff ff5a 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e00f      	b.n	8002a1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d0f2      	beq.n	80029fe <SPI_EndRxTxTransaction+0x52>
 8002a18:	e000      	b.n	8002a1c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a1a:	bf00      	nop
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	165e9f81 	.word	0x165e9f81

08002a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e041      	b.n	8002ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f8cc 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f000 fa88 	bl	8002f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d001      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e044      	b.n	8002b72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x6c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b12:	d013      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x6c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x6c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x6c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0x6c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d010      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5e:	e007      	b.n	8002b70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40014000 	.word	0x40014000

08002b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0202 	mvn.w	r2, #2
 8002bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9b5 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f9a7 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f9b8 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0204 	mvn.w	r2, #4
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f98b 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f97d 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f98e 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0208 	mvn.w	r2, #8
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f961 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f953 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f964 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0210 	mvn.w	r2, #16
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f937 	bl	8002f46 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f929 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f93a 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0201 	mvn.w	r2, #1
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fc08 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b80      	cmp	r3, #128	; 0x80
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fab2 	bl	80032a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8ff 	bl	8002f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0220 	mvn.w	r2, #32
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa7c 	bl	8003294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0b4      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x186>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d03e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xd4>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	f200 8087 	bhi.w	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	f000 8086 	beq.w	8002f16 <HAL_TIM_ConfigClockSource+0x172>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	d87f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d01a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xa6>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d87b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d050      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x11a>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d877      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d03c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xfa>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d873      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x13a>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d86f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d064      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d86b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d060      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d867      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d05a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	e062      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f000 f98d 	bl	8003178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e04f      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f000 f976 	bl	8003178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e03c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f8ea 	bl	8003084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2150      	movs	r1, #80	; 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f943 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e02c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f909 	bl	80030e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2160      	movs	r1, #96	; 0x60
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f933 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e01c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f8ca 	bl	8003084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f923 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f91a 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002f0e:	e003      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <TIM_Base_SetConfig+0xe4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0x38>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x38>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <TIM_Base_SetConfig+0xe8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x38>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <TIM_Base_SetConfig+0xec>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x38>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <TIM_Base_SetConfig+0xf0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a25      	ldr	r2, [pc, #148]	; (8003068 <TIM_Base_SetConfig+0xe4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d017      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <TIM_Base_SetConfig+0xe8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <TIM_Base_SetConfig+0xec>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <TIM_Base_SetConfig+0xf0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <TIM_Base_SetConfig+0xf4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <TIM_Base_SetConfig+0xf8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <TIM_Base_SetConfig+0xfc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <TIM_Base_SetConfig+0xe4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d103      	bne.n	8003054 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 030a 	bic.w	r3, r3, #10
 80030c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0210 	bic.w	r2, r3, #16
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800311e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	f043 0307 	orr.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	431a      	orrs	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e050      	b.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d013      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10c      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40014000 	.word	0x40014000

08003294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e03f      	b.n	800334e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fcca 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f829 	bl	8003358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b0c0      	sub	sp, #256	; 0x100
 800335e:	af00      	add	r7, sp, #0
 8003360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	ea40 0301 	orr.w	r3, r0, r1
 8003380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	431a      	orrs	r2, r3
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033b0:	f021 010c 	bic.w	r1, r1, #12
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	6999      	ldr	r1, [r3, #24]
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	ea40 0301 	orr.w	r3, r0, r1
 80033de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <UART_SetConfig+0x2cc>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d005      	beq.n	80033f8 <UART_SetConfig+0xa0>
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <UART_SetConfig+0x2d0>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d104      	bne.n	8003402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7ff f822 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80033fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003400:	e003      	b.n	800340a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003402:	f7ff f809 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8003406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	f040 810c 	bne.w	8003630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	1891      	adds	r1, r2, r2
 8003430:	65b9      	str	r1, [r7, #88]	; 0x58
 8003432:	415b      	adcs	r3, r3
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800343a:	4621      	mov	r1, r4
 800343c:	eb12 0801 	adds.w	r8, r2, r1
 8003440:	4629      	mov	r1, r5
 8003442:	eb43 0901 	adc.w	r9, r3, r1
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345a:	4690      	mov	r8, r2
 800345c:	4699      	mov	r9, r3
 800345e:	4623      	mov	r3, r4
 8003460:	eb18 0303 	adds.w	r3, r8, r3
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003468:	462b      	mov	r3, r5
 800346a:	eb49 0303 	adc.w	r3, r9, r3
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800347e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003486:	460b      	mov	r3, r1
 8003488:	18db      	adds	r3, r3, r3
 800348a:	653b      	str	r3, [r7, #80]	; 0x50
 800348c:	4613      	mov	r3, r2
 800348e:	eb42 0303 	adc.w	r3, r2, r3
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
 8003494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800349c:	f7fc fe9a 	bl	80001d4 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <UART_SetConfig+0x2d4>)
 80034a6:	fba3 2302 	umull	r2, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	011c      	lsls	r4, r3, #4
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	1891      	adds	r1, r2, r2
 80034c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c8:	415b      	adcs	r3, r3
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034d0:	4641      	mov	r1, r8
 80034d2:	eb12 0a01 	adds.w	sl, r2, r1
 80034d6:	4649      	mov	r1, r9
 80034d8:	eb43 0b01 	adc.w	fp, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f0:	4692      	mov	sl, r2
 80034f2:	469b      	mov	fp, r3
 80034f4:	4643      	mov	r3, r8
 80034f6:	eb1a 0303 	adds.w	r3, sl, r3
 80034fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fe:	464b      	mov	r3, r9
 8003500:	eb4b 0303 	adc.w	r3, fp, r3
 8003504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
 800352a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003532:	f7fc fe4f 	bl	80001d4 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4611      	mov	r1, r2
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <UART_SetConfig+0x2d4>)
 800353e:	fba3 2301 	umull	r2, r3, r3, r1
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <UART_SetConfig+0x2d4>)
 8003554:	fba3 2302 	umull	r2, r3, r3, r2
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003560:	441c      	add	r4, r3
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800356c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	63b9      	str	r1, [r7, #56]	; 0x38
 800357c:	415b      	adcs	r3, r3
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6339      	str	r1, [r7, #48]	; 0x30
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b8:	464b      	mov	r3, r9
 80035ba:	460a      	mov	r2, r1
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035d8:	460b      	mov	r3, r1
 80035da:	18db      	adds	r3, r3, r3
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	4613      	mov	r3, r2
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ee:	f7fc fdf1 	bl	80001d4 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <UART_SetConfig+0x2d4>)
 80035f8:	fba3 1302 	umull	r1, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2164      	movs	r1, #100	; 0x64
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	3332      	adds	r3, #50	; 0x32
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <UART_SetConfig+0x2d4>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4422      	add	r2, r4
 800361e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003620:	e106      	b.n	8003830 <UART_SetConfig+0x4d8>
 8003622:	bf00      	nop
 8003624:	40011000 	.word	0x40011000
 8003628:	40011400 	.word	0x40011400
 800362c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800363a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800363e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003642:	4642      	mov	r2, r8
 8003644:	464b      	mov	r3, r9
 8003646:	1891      	adds	r1, r2, r2
 8003648:	6239      	str	r1, [r7, #32]
 800364a:	415b      	adcs	r3, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003652:	4641      	mov	r1, r8
 8003654:	1854      	adds	r4, r2, r1
 8003656:	4649      	mov	r1, r9
 8003658:	eb43 0501 	adc.w	r5, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	00eb      	lsls	r3, r5, #3
 8003666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366a:	00e2      	lsls	r2, r4, #3
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	4643      	mov	r3, r8
 8003672:	18e3      	adds	r3, r4, r3
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003678:	464b      	mov	r3, r9
 800367a:	eb45 0303 	adc.w	r3, r5, r3
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800368e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800369e:	4629      	mov	r1, r5
 80036a0:	008b      	lsls	r3, r1, #2
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a8:	4621      	mov	r1, r4
 80036aa:	008a      	lsls	r2, r1, #2
 80036ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036b0:	f7fc fd90 	bl	80001d4 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <UART_SetConfig+0x4e4>)
 80036ba:	fba3 2302 	umull	r2, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	011c      	lsls	r4, r3, #4
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	61b9      	str	r1, [r7, #24]
 80036dc:	415b      	adcs	r3, r3
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6139      	str	r1, [r7, #16]
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	67bb      	str	r3, [r7, #120]	; 0x78
 800372e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800373c:	4649      	mov	r1, r9
 800373e:	008b      	lsls	r3, r1, #2
 8003740:	4641      	mov	r1, r8
 8003742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003746:	4641      	mov	r1, r8
 8003748:	008a      	lsls	r2, r1, #2
 800374a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800374e:	f7fc fd41 	bl	80001d4 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4611      	mov	r1, r2
 8003758:	4b38      	ldr	r3, [pc, #224]	; (800383c <UART_SetConfig+0x4e4>)
 800375a:	fba3 2301 	umull	r2, r3, r3, r1
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2264      	movs	r2, #100	; 0x64
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	1acb      	subs	r3, r1, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <UART_SetConfig+0x4e4>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003778:	441c      	add	r4, r3
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	673b      	str	r3, [r7, #112]	; 0x70
 8003782:	677a      	str	r2, [r7, #116]	; 0x74
 8003784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	415b      	adcs	r3, r3
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003798:	4641      	mov	r1, r8
 800379a:	1851      	adds	r1, r2, r1
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	4649      	mov	r1, r9
 80037a0:	414b      	adcs	r3, r1
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037b0:	4659      	mov	r1, fp
 80037b2:	00cb      	lsls	r3, r1, #3
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ba:	4651      	mov	r1, sl
 80037bc:	00ca      	lsls	r2, r1, #3
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	4642      	mov	r2, r8
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ca:	464b      	mov	r3, r9
 80037cc:	460a      	mov	r2, r1
 80037ce:	eb42 0303 	adc.w	r3, r2, r3
 80037d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
 80037de:	667a      	str	r2, [r7, #100]	; 0x64
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ec:	4649      	mov	r1, r9
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f6:	4641      	mov	r1, r8
 80037f8:	008a      	lsls	r2, r1, #2
 80037fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037fe:	f7fc fce9 	bl	80001d4 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <UART_SetConfig+0x4e4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <UART_SetConfig+0x4e4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4422      	add	r2, r4
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003836:	46bd      	mov	sp, r7
 8003838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383c:	51eb851f 	.word	0x51eb851f

08003840 <memset>:
 8003840:	4402      	add	r2, r0
 8003842:	4603      	mov	r3, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4d0d      	ldr	r5, [pc, #52]	; (8003888 <__libc_init_array+0x38>)
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	2600      	movs	r6, #0
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	4d0b      	ldr	r5, [pc, #44]	; (8003890 <__libc_init_array+0x40>)
 8003862:	4c0c      	ldr	r4, [pc, #48]	; (8003894 <__libc_init_array+0x44>)
 8003864:	f000 f818 	bl	8003898 <_init>
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	2600      	movs	r6, #0
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	08003928 	.word	0x08003928
 800388c:	08003928 	.word	0x08003928
 8003890:	08003928 	.word	0x08003928
 8003894:	0800392c 	.word	0x0800392c

08003898 <_init>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr

080038a4 <_fini>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr
