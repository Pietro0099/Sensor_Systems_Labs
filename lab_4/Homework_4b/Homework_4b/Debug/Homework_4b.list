
Homework_4b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006fa8  08006fa8  00016fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007354  08007354  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800735c  0800735c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08007364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001fc  08007560  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08007560  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb51  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed6  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097e  00000000  00000000  0002e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001837b  00000000  00000000  0002f276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de9d  00000000  00000000  000475f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098959  00000000  00000000  0005548e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044a8  00000000  00000000  000edde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f2290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f90 	.word	0x08006f90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08006f90 	.word	0x08006f90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000f8e:	bf00      	nop
    __ASM volatile ("NOP");
 8000f90:	bf00      	nop
    __ASM volatile ("NOP");
 8000f92:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e000      	b.n	8000fa2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000fa0:	2301      	movs	r3, #1
    }
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000edf0 	.word	0xe000edf0
 8000fb0:	e0001000 	.word	0xe0001000

08000fb4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <DWT_Delay_us+0x48>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fc2:	f002 facd 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <DWT_Delay_us+0x4c>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000fdc:	bf00      	nop
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <DWT_Delay_us+0x48>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1acb      	subs	r3, r1, r3
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3f6      	bcc.n	8000fde <DWT_Delay_us+0x2a>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e0001000 	.word	0xe0001000
 8001000:	431bde83 	.word	0x431bde83

08001004 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <lcd_enable+0x28>)
 800100e:	f001 fe29 	bl	8002c64 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f7ff ffce 	bl	8000fb4 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <lcd_enable+0x28>)
 800101e:	f001 fe21 	bl	8002c64 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f7ff ffc6 	bl	8000fb4 <DWT_Delay_us>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020400 	.word	0x40020400

08001030 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <lcd_write4+0x74>)
 800104a:	f001 fe0b 	bl	8002c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	105b      	asrs	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <lcd_write4+0x74>)
 8001062:	f001 fdff 	bl	8002c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	109b      	asrs	r3, r3, #2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <lcd_write4+0x74>)
 800107a:	f001 fdf3 	bl	8002c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	10db      	asrs	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <lcd_write4+0x74>)
 8001092:	f001 fde7 	bl	8002c64 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8001096:	f7ff ffb5 	bl	8001004 <lcd_enable>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020400 	.word	0x40020400

080010a8 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffb9 	bl	8001030 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ffb5 	bl	8001030 <lcd_write4>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 80010da:	2200      	movs	r2, #0
 80010dc:	2104      	movs	r1, #4
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <lcd_command+0x24>)
 80010e0:	f001 fdc0 	bl	8002c64 <HAL_GPIO_WritePin>
	lcd_write(byte);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffde 	bl	80010a8 <lcd_write>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <lcd_data+0x24>)
 8001108:	f001 fdac 	bl	8002c64 <HAL_GPIO_WritePin>
	lcd_write(byte);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffca 	bl	80010a8 <lcd_write>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020400 	.word	0x40020400

08001120 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	79ba      	ldrb	r2, [r7, #6]
 8001136:	3201      	adds	r2, #1
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	2b4f      	cmp	r3, #79	; 0x4f
 800113e:	dc10      	bgt.n	8001162 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	461a      	mov	r2, r3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	b2da      	uxtb	r2, r3
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffb7 	bl	80010d0 <lcd_command>
	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f884 	bl	8000280 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 800117c:	e006      	b.n	800118c <lcd_print+0x22>
		lcd_data(*string++);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffb6 	bl	80010f8 <lcd_data>
	while (size--){
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	60fa      	str	r2, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f3      	bne.n	800117e <lcd_print+0x14>
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <lcd_println+0x6c>)
 80011ae:	f107 0408 	add.w	r4, r7, #8
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f85f 	bl	8000280 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	dd0c      	ble.n	80011e6 <lcd_println+0x46>
		size = 16;
 80011cc:	2310      	movs	r3, #16
 80011ce:	61fb      	str	r3, [r7, #28]

	while (size--){
 80011d0:	e009      	b.n	80011e6 <lcd_println+0x46>
		line[size] = string[size];
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	7819      	ldrb	r1, [r3, #0]
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	4413      	add	r3, r2
 80011e2:	460a      	mov	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
	while (size--){
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	61fa      	str	r2, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <lcd_println+0x32>
	}
	setCursor(0, row);
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	4619      	mov	r1, r3
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff93 	bl	8001120 <setCursor>
	lcd_print(line);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffb3 	bl	800116a <lcd_print>
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bdb0      	pop	{r4, r5, r7, pc}
 800120c:	08006fa8 	.word	0x08006fa8

08001210 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122e:	b25b      	sxtb	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff4c 	bl	80010d0 <lcd_command>
	for (int i = 0; i<8; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e009      	b.n	8001252 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff56 	bl	80010f8 <lcd_data>
	for (int i = 0; i<8; i++){
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b07      	cmp	r3, #7
 8001256:	ddf2      	ble.n	800123e <writeCustomChar+0x2e>
	}
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001268:	490a      	ldr	r1, [pc, #40]	; (8001294 <loadCustomChars+0x30>)
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff ffd0 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <loadCustomChars+0x34>)
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff ffcc 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001278:	4908      	ldr	r1, [pc, #32]	; (800129c <loadCustomChars+0x38>)
 800127a:	2003      	movs	r0, #3
 800127c:	f7ff ffc8 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <loadCustomChars+0x3c>)
 8001282:	2004      	movs	r0, #4
 8001284:	f7ff ffc4 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <loadCustomChars+0x40>)
 800128a:	2005      	movs	r0, #5
 800128c:	f7ff ffc0 	bl	8001210 <writeCustomChar>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000010 	.word	0x20000010
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000020 	.word	0x20000020

080012a8 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 80012b0:	2101      	movs	r1, #1
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff34 	bl	8001120 <setCursor>

	if (value>80)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	dd01      	ble.n	80012c2 <lcd_drawBar+0x1a>
		value = 80;
 80012be:	2350      	movs	r3, #80	; 0x50
 80012c0:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a25      	ldr	r2, [pc, #148]	; (800135c <lcd_drawBar+0xb4>)
 80012c6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ca:	1052      	asrs	r2, r2, #1
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <lcd_drawBar+0xb4>)
 80012d6:	fb83 1302 	smull	r1, r3, r3, r2
 80012da:	1059      	asrs	r1, r3, #1
 80012dc:	17d3      	asrs	r3, r2, #31
 80012de:	1ac9      	subs	r1, r1, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 80012ee:	e007      	b.n	8001300 <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <lcd_drawBar+0xb8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4413      	add	r3, r2
 80012f6:	2205      	movs	r2, #5
 80012f8:	701a      	strb	r2, [r3, #0]
		i++;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf3      	blt.n	80012f0 <lcd_drawBar+0x48>
	}
	if (i < 16){
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	dc1b      	bgt.n	8001346 <lcd_drawBar+0x9e>
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <lcd_drawBar+0x78>
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <lcd_drawBar+0xb8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	2220      	movs	r2, #32
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e006      	b.n	800132e <lcd_drawBar+0x86>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <lcd_drawBar+0xb8>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	}
	i++;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
	}
	while (i<16){ //and we fill the remainder with spaces
 8001334:	e007      	b.n	8001346 <lcd_drawBar+0x9e>
		bar[i] = ' ';
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <lcd_drawBar+0xb8>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	2220      	movs	r2, #32
 800133e:	701a      	strb	r2, [r3, #0]
		i++;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	ddf4      	ble.n	8001336 <lcd_drawBar+0x8e>
	}
	lcd_print(bar); //finally we write to the LCD
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <lcd_drawBar+0xb8>)
 800134e:	f7ff ff0c 	bl	800116a <lcd_print>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	66666667 	.word	0x66666667
 8001360:	20000218 	.word	0x20000218

08001364 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001368:	2032      	movs	r0, #50	; 0x32
 800136a:	f000 fd65 	bl	8001e38 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2104      	movs	r1, #4
 8001372:	4824      	ldr	r0, [pc, #144]	; (8001404 <lcd_initialize+0xa0>)
 8001374:	f001 fc76 	bl	8002c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <lcd_initialize+0xa0>)
 800137e:	f001 fc71 	bl	8002c64 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8001382:	f7ff fde7 	bl	8000f54 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8001386:	2003      	movs	r0, #3
 8001388:	f7ff fe52 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 800138c:	2005      	movs	r0, #5
 800138e:	f000 fd53 	bl	8001e38 <HAL_Delay>
	lcd_write4(0x03);
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff fe4c 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 8001398:	2005      	movs	r0, #5
 800139a:	f000 fd4d 	bl	8001e38 <HAL_Delay>
	lcd_write4(0x03);
 800139e:	2003      	movs	r0, #3
 80013a0:	f7ff fe46 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 80013a4:	2005      	movs	r0, #5
 80013a6:	f000 fd47 	bl	8001e38 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fe40 	bl	8001030 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80013b0:	2028      	movs	r0, #40	; 0x28
 80013b2:	f7ff fe79 	bl	80010a8 <lcd_write>
	HAL_Delay(5);
 80013b6:	2005      	movs	r0, #5
 80013b8:	f000 fd3e 	bl	8001e38 <HAL_Delay>
	lcd_write(0x08); //display off;
 80013bc:	2008      	movs	r0, #8
 80013be:	f7ff fe73 	bl	80010a8 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fe70 	bl	80010a8 <lcd_write>
	HAL_Delay(5);
 80013c8:	2005      	movs	r0, #5
 80013ca:	f000 fd35 	bl	8001e38 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff fe6a 	bl	80010a8 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80013d4:	2201      	movs	r2, #1
 80013d6:	2110      	movs	r1, #16
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <lcd_initialize+0xa4>)
 80013da:	f001 fc43 	bl	8002c64 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <lcd_initialize+0xa8>)
 80013e0:	220c      	movs	r2, #12
 80013e2:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <lcd_initialize+0xa8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe5d 	bl	80010a8 <lcd_write>
	lcd_write(0x02); //go home
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff fe5a 	bl	80010a8 <lcd_write>
	HAL_Delay(2);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f000 fd1f 	bl	8001e38 <HAL_Delay>
	loadCustomChars();
 80013fa:	f7ff ff33 	bl	8001264 <loadCustomChars>

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020400 	.word	0x40020400
 8001408:	40020000 	.word	0x40020000
 800140c:	20000228 	.word	0x20000228

08001410 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2110      	movs	r1, #16
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <lcd_backlight_ON+0x14>)
 800141a:	f001 fc23 	bl	8002c64 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_TIM_PeriodElapsedCallback>:
uint32_t ADC_value;
float voltage;
int length;
char string_LCD[16];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d123      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x58>
		lcd_println(string_LCD, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800143c:	f7ff feb0 	bl	80011a0 <lcd_println>
		lcd_drawBar(voltage / 3.3 * 80);
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f887 	bl	8000558 <__aeabi_f2d>
 800144a:	a30f      	add	r3, pc, #60	; (adr r3, 8001488 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff fa04 	bl	800085c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001462:	f7ff f8d1 	bl	8000608 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb7b 	bl	8000b68 <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff17 	bl	80012a8 <lcd_drawBar>
		HAL_ADC_Start_IT(&hadc1);
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800147c:	f000 fd44 	bl	8001f08 <HAL_ADC_Start_IT>
	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	66666666 	.word	0x66666666
 800148c:	400a6666 	.word	0x400a6666
 8001490:	20000274 	.word	0x20000274
 8001494:	200002c8 	.word	0x200002c8
 8001498:	200002c0 	.word	0x200002c0
 800149c:	40540000 	.word	0x40540000
 80014a0:	2000022c 	.word	0x2000022c
 80014a4:	00000000 	.word	0x00000000

080014a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_ADC_ConvCpltCallback+0x90>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d132      	bne.n	800151e <HAL_ADC_ConvCpltCallback+0x76>
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80014b8:	481f      	ldr	r0, [pc, #124]	; (8001538 <HAL_ADC_ConvCpltCallback+0x90>)
 80014ba:	f000 fef3 	bl	80022a4 <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_ADC_ConvCpltCallback+0x94>)
 80014c2:	6013      	str	r3, [r2, #0]
		voltage = ADC_value * 3.3 / 4095.0;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_ADC_ConvCpltCallback+0x94>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f823 	bl	8000514 <__aeabi_ui2d>
 80014ce:	a316      	add	r3, pc, #88	; (adr r3, 8001528 <HAL_ADC_ConvCpltCallback+0x80>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f898 	bl	8000608 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	a313      	add	r3, pc, #76	; (adr r3, 8001530 <HAL_ADC_ConvCpltCallback+0x88>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f9b9 	bl	800085c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb61 	bl	8000bb8 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_ADC_ConvCpltCallback+0x98>)
 80014fa:	6013      	str	r3, [r2, #0]
		length = snprintf(string_LCD, sizeof(string_LCD), "Voltage = %3f V\r\n", voltage);
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_ConvCpltCallback+0x98>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f829 	bl	8000558 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9cd 2300 	strd	r2, r3, [sp]
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001510:	2110      	movs	r1, #16
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001514:	f003 fbce 	bl	8004cb4 <sniprintf>
 8001518:	4603      	mov	r3, r0
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_ADC_ConvCpltCallback+0xa4>)
 800151c:	6013      	str	r3, [r2, #0]
	}
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	00000000 	.word	0x00000000
 8001534:	40affe00 	.word	0x40affe00
 8001538:	2000022c 	.word	0x2000022c
 800153c:	200002bc 	.word	0x200002bc
 8001540:	200002c0 	.word	0x200002c0
 8001544:	08006fbc 	.word	0x08006fbc
 8001548:	200002c8 	.word	0x200002c8
 800154c:	200002c4 	.word	0x200002c4

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 fbfe 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f81a 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 f94c 	bl	80017f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001560:	f000 f882 	bl	8001668 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001564:	f000 f8d2 	bl	800170c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <main+0x38>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0201 	mvn.w	r2, #1
 8001570:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <main+0x38>)
 8001574:	f002 f850 	bl	8003618 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <main+0x3c>)
 800157a:	f000 fcc5 	bl	8001f08 <HAL_ADC_Start_IT>

  lcd_initialize();
 800157e:	f7ff fef1 	bl	8001364 <lcd_initialize>
  lcd_backlight_ON();
 8001582:	f7ff ff45 	bl	8001410 <lcd_backlight_ON>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001586:	e7fe      	b.n	8001586 <main+0x36>
 8001588:	20000274 	.word	0x20000274
 800158c:	2000022c 	.word	0x2000022c

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	2230      	movs	r2, #48	; 0x30
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fbff 	bl	8004da2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <SystemClock_Config+0xd0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <SystemClock_Config+0xd0>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <SystemClock_Config+0xd0>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <SystemClock_Config+0xd4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <SystemClock_Config+0xd4>)
 80015de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <SystemClock_Config+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f8:	2310      	movs	r3, #16
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001604:	2310      	movs	r3, #16
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800160e:	2304      	movs	r3, #4
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001612:	2307      	movs	r3, #7
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fb3c 	bl	8002c98 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001626:	f000 f97d 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2102      	movs	r1, #2
 8001646:	4618      	mov	r0, r3
 8001648:	f001 fd9e 	bl	8003188 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001652:	f000 f967 	bl	8001924 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3750      	adds	r7, #80	; 0x50
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_ADC1_Init+0x98>)
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <MX_ADC1_Init+0x9c>)
 800167e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_ADC1_Init+0x98>)
 8001682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_ADC1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_ADC1_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_ADC1_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_ADC1_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_ADC1_Init+0x98>)
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <MX_ADC1_Init+0xa0>)
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_ADC1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_ADC1_Init+0x98>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ca:	f000 fbd9 	bl	8001e80 <HAL_ADC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016d4:	f000 f926 	bl	8001924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016d8:	2301      	movs	r3, #1
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016e0:	2307      	movs	r3, #7
 80016e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ea:	f000 fdfd 	bl	80022e8 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016f4:	f000 f916 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000022c 	.word	0x2000022c
 8001704:	40012000 	.word	0x40012000
 8001708:	0f000001 	.word	0x0f000001

0800170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_TIM2_Init+0xe8>)
 800173e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001746:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800174a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <MX_TIM2_Init+0xe8>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001754:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_TIM2_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001768:	f001 ff06 	bl	8003578 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 f8d7 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	4619      	mov	r1, r3
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001784:	f002 f968 	bl	8003a58 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800178e:	f000 f8c9 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM2_Init+0xe8>)
 8001794:	f001 ffa2 	bl	80036dc <HAL_TIM_OC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800179e:	f000 f8c1 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4619      	mov	r1, r3
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <MX_TIM2_Init+0xe8>)
 80017b2:	f002 fce7 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017bc:	f000 f8b2 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM2_Init+0xe8>)
 80017d8:	f002 f8e2 	bl	80039a0 <HAL_TIM_OC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017e2:	f000 f89f 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM2_Init+0xe8>)
 80017e8:	f000 f93c 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000274 	.word	0x20000274

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a3f      	ldr	r2, [pc, #252]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a38      	ldr	r2, [pc, #224]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <MX_GPIO_Init+0x11c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_GPIO_Init+0x11c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <MX_GPIO_Init+0x11c>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <MX_GPIO_Init+0x11c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2130      	movs	r1, #48	; 0x30
 8001882:	4825      	ldr	r0, [pc, #148]	; (8001918 <MX_GPIO_Init+0x120>)
 8001884:	f001 f9ee 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001888:	2200      	movs	r2, #0
 800188a:	f24f 0106 	movw	r1, #61446	; 0xf006
 800188e:	4823      	ldr	r0, [pc, #140]	; (800191c <MX_GPIO_Init+0x124>)
 8001890:	f001 f9e8 	bl	8002c64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	481d      	ldr	r0, [pc, #116]	; (8001920 <MX_GPIO_Init+0x128>)
 80018ac:	f001 f856 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b0:	230c      	movs	r3, #12
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c0:	2307      	movs	r3, #7
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4813      	ldr	r0, [pc, #76]	; (8001918 <MX_GPIO_Init+0x120>)
 80018cc:	f001 f846 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80018d0:	2330      	movs	r3, #48	; 0x30
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <MX_GPIO_Init+0x120>)
 80018e8:	f001 f838 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80018ec:	f24f 0306 	movw	r3, #61446	; 0xf006
 80018f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_GPIO_Init+0x124>)
 8001906:	f001 f829 	bl	800295c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_MspInit+0x4c>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_MspInit+0x4c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x4c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800196e:	2007      	movs	r0, #7
 8001970:	f000 ffb2 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1b      	ldr	r2, [pc, #108]	; (8001a0c <HAL_ADC_MspInit+0x8c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12f      	bne.n	8001a02 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_ADC_MspInit+0x90>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019da:	2302      	movs	r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	2303      	movs	r3, #3
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_ADC_MspInit+0x94>)
 80019ee:	f000 ffb5 	bl	800295c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2012      	movs	r0, #18
 80019f8:	f000 ff79 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019fc:	2012      	movs	r0, #18
 80019fe:	f000 ff92 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012000 	.word	0x40012000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d115      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f000 ff4f 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a50:	201c      	movs	r0, #28
 8001a52:	f000 ff68 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a84:	d11d      	bne.n	8001ac2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_TIM_MspPostInit+0x68>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_TIM_MspPostInit+0x68>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_TIM_MspPostInit+0x68>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <HAL_TIM_MspPostInit+0x6c>)
 8001abe:	f000 ff4d 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <NMI_Handler+0x4>

08001ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b20:	f000 f96a 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <ADC_IRQHandler+0x10>)
 8001b2e:	f000 faa9 	bl	8002084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000022c 	.word	0x2000022c

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f001 fe24 	bl	800378e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000274 	.word	0x20000274

08001b50 <_getpid>:
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	2301      	movs	r3, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	f003 f96d 	bl	8004e48 <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
 8001b92:	e7fe      	b.n	8001b92 <_exit+0x12>

08001b94 <_read>:
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_write>:
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e009      	b.n	8001bf4 <_write+0x26>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f3af 8000 	nop.w
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf1      	blt.n	8001be0 <_write+0x12>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	2301      	movs	r3, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_lseek>:
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
 8001ca0:	f003 f8d2 	bl	8004e48 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20018000 	.word	0x20018000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	200002d8 	.word	0x200002d8
 8001cd8:	20000430 	.word	0x20000430

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopFillZerobss+0x12>
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopFillZerobss+0x16>)
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1a>)
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <LoopFillZerobss+0x1e>)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:
 8001d0e:	58d4      	ldr	r4, [r2, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:
 8001d14:	18c4      	adds	r4, r0, r3
 8001d16:	428c      	cmp	r4, r1
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LoopFillZerobss+0x22>)
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	; (8001d4c <LoopFillZerobss+0x26>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>
 8001d2a:	f7ff ffd7 	bl	8001cdc <SystemInit>
 8001d2e:	f003 f891 	bl	8004e54 <__libc_init_array>
 8001d32:	f7ff fc0d 	bl	8001550 <main>
 8001d36:	4770      	bx	lr
 8001d38:	20018000 	.word	0x20018000
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	200001fc 	.word	0x200001fc
 8001d44:	08007364 	.word	0x08007364
 8001d48:	200001fc 	.word	0x200001fc
 8001d4c:	2000042c 	.word	0x2000042c

08001d50 <DMA1_Stream0_IRQHandler>:
 8001d50:	e7fe      	b.n	8001d50 <DMA1_Stream0_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 fdab 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdd2 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fdc3 	bl	8002942 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 fd8b 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000028 	.word	0x20000028
 8001df0:	20000030 	.word	0x20000030
 8001df4:	2000002c 	.word	0x2000002c

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000030 	.word	0x20000030
 8001e1c:	200002dc 	.word	0x200002dc

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200002dc 	.word	0x200002dc

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000030 	.word	0x20000030

08001e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e033      	b.n	8001efe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fd6e 	bl	8001980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ec6:	f023 0302 	bic.w	r3, r3, #2
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb2a 	bl	800252c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
 8001eee:	e001      	b.n	8001ef4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_Start_IT+0x1a>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0a1      	b.n	8002066 <HAL_ADC_Start_IT+0x15e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d018      	beq.n	8001f6a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_ADC_Start_IT+0x16c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_ADC_Start_IT+0x170>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9a      	lsrs	r2, r3, #18
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d169      	bne.n	800204c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f023 0206 	bic.w	r2, r3, #6
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_ADC_Start_IT+0x174>)
 8001fd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d129      	bne.n	8002064 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e020      	b.n	8002064 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_ADC_Start_IT+0x178>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d11b      	bne.n	8002064 <HAL_ADC_Start_IT+0x15c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d114      	bne.n	8002064 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	e00b      	b.n	8002064 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000028 	.word	0x20000028
 8002078:	431bde83 	.word	0x431bde83
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000

08002084 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d049      	beq.n	800214e <HAL_ADC_IRQHandler+0xca>
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d046      	beq.n	800214e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d12b      	bne.n	800213e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d127      	bne.n	800213e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0220 	bic.w	r2, r2, #32
 8002118:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff f9b2 	bl	80014a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0212 	mvn.w	r2, #18
 800214c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d057      	beq.n	8002214 <HAL_ADC_IRQHandler+0x190>
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d054      	beq.n	8002214 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d139      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12b      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d124      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11d      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d119      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fa8d 	bl	8002724 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 020c 	mvn.w	r2, #12
 8002212:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d017      	beq.n	800225a <HAL_ADC_IRQHandler+0x1d6>
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d014      	beq.n	800225a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10d      	bne.n	800225a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f837 	bl	80022be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002268:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_ADC_IRQHandler+0x218>
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0220 	mvn.w	r2, #32
 800228a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f820 	bl	80022d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0220 	mvn.w	r2, #32
 800229a:	601a      	str	r2, [r3, #0]
  }
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1c>
 8002300:	2302      	movs	r3, #2
 8002302:	e105      	b.n	8002510 <HAL_ADC_ConfigChannel+0x228>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d925      	bls.n	8002360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	3b1e      	subs	r3, #30
 800232a:	2207      	movs	r2, #7
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43da      	mvns	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	400a      	ands	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	4603      	mov	r3, r0
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4403      	add	r3, r0
 8002352:	3b1e      	subs	r3, #30
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	e022      	b.n	80023a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	2207      	movs	r2, #7
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	4603      	mov	r3, r0
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4403      	add	r3, r0
 800239c:	409a      	lsls	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d824      	bhi.n	80023f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b05      	subs	r3, #5
 80023c0:	221f      	movs	r2, #31
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	400a      	ands	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b05      	subs	r3, #5
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
 80023f6:	e04c      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d824      	bhi.n	800244a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b23      	subs	r3, #35	; 0x23
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43da      	mvns	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	400a      	ands	r2, r1
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b23      	subs	r3, #35	; 0x23
 800243c:	fa00 f203 	lsl.w	r2, r0, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
 8002448:	e023      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b41      	subs	r3, #65	; 0x41
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b41      	subs	r3, #65	; 0x41
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_ADC_ConfigChannel+0x234>)
 8002494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <HAL_ADC_ConfigChannel+0x238>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1cc>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_ADC_ConfigChannel+0x238>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d123      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d003      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x1e6>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b11      	cmp	r3, #17
 80024cc:	d11b      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d111      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_ADC_ConfigChannel+0x23c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_ADC_ConfigChannel+0x240>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	0c9a      	lsrs	r2, r3, #18
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40012300 	.word	0x40012300
 8002520:	40012000 	.word	0x40012000
 8002524:	20000028 	.word	0x20000028
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002534:	4b79      	ldr	r3, [pc, #484]	; (800271c <ADC_Init+0x1f0>)
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <ADC_Init+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00f      	b.n	800262a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	035a      	lsls	r2, r3, #13
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e007      	b.n	80026a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051a      	lsls	r2, r3, #20
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	025a      	lsls	r2, r3, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	029a      	lsls	r2, r3, #10
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	0f000001 	.word	0x0f000001

08002724 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e159      	b.n	8002c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 8148 	bne.w	8002c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a2 	beq.w	8002c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x202>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_GPIO_Init+0x2f4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x1fe>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a47      	ldr	r2, [pc, #284]	; (8002c54 <HAL_GPIO_Init+0x2f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x1fa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_GPIO_Init+0x2fc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x1f6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <HAL_GPIO_Init+0x300>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x1f2>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f aea2 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e267      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x108>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e242      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x74>
 8002cfe:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x98>
 8002d16:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6f      	ldr	r2, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6c      	ldr	r2, [pc, #432]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d30:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f866 	bl	8001e20 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7ff f862 	bl	8001e20 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e207      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xc0>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff f852 	bl	8001e20 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff f84e 	bl	8001e20 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1f3      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0xe8>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dae:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b44      	ldr	r3, [pc, #272]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1c7      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f807 	bl	8001e20 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7ff f803 	bl	8001e20 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1a8      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x244>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe ffe6 	bl	8001e20 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe ffe2 	bl	8001e20 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e187      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe ffc6 	bl	8001e20 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe ffc2 	bl	8001e20 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e167      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x200>
 8002eb6:	e01b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x248>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe ffaf 	bl	8001e20 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe ffab 	bl	8001e20 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d907      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e150      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470000 	.word	0x42470000
 8002ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ea      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8097 	beq.w	800302c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b7d      	ldr	r3, [pc, #500]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b7a      	ldr	r3, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b77      	ldr	r3, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a73      	ldr	r2, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe ff6b 	bl	8001e20 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7fe ff67 	bl	8001e20 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e10c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x474>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2ea>
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a5b      	ldr	r2, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0x324>
 8002fa4:	4b58      	ldr	r3, [pc, #352]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb0:	4b55      	ldr	r3, [pc, #340]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0304 	bic.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe ff2c 	bl	8001e20 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe ff28 	bl	8001e20 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0cb      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ee      	beq.n	8002fcc <HAL_RCC_OscConfig+0x334>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe ff16 	bl	8001e20 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe ff12 	bl	8001e20 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0b5      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ee      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a1 	beq.w	8003178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d05c      	beq.n	80030fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d141      	bne.n	80030ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fee6 	bl	8001e20 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fee2 	bl	8001e20 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e087      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	491b      	ldr	r1, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe febb 	bl	8001e20 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe feb7 	bl	8001e20 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e05c      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x416>
 80030cc:	e054      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fea4 	bl	8001e20 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fea0 	bl	8001e20 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e045      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x444>
 80030fa:	e03d      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e038      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d028      	beq.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d121      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d11a      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe fdd2 	bl	8001e20 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe fdce 	bl	8001e20 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fd32 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	08006fd0 	.word	0x08006fd0
 800334c:	20000028 	.word	0x20000028
 8003350:	2000002c 	.word	0x2000002c

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b094      	sub	sp, #80	; 0x50
 800335a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	2300      	movs	r3, #0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	2300      	movs	r3, #0
 8003366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336c:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d00d      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x40>
 8003378:	2b08      	cmp	r3, #8
 800337a:	f200 80e1 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x3a>
 8003386:	e0db      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800338c:	e0db      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x208>)
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003392:	e0d8      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
 80033c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033c6:	4622      	mov	r2, r4
 80033c8:	462b      	mov	r3, r5
 80033ca:	f04f 0000 	mov.w	r0, #0
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	0159      	lsls	r1, r3, #5
 80033d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d8:	0150      	lsls	r0, r2, #5
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4621      	mov	r1, r4
 80033e0:	1a51      	subs	r1, r2, r1
 80033e2:	6139      	str	r1, [r7, #16]
 80033e4:	4629      	mov	r1, r5
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003402:	4651      	mov	r1, sl
 8003404:	018a      	lsls	r2, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ebb2 0801 	subs.w	r8, r2, r1
 800340c:	4659      	mov	r1, fp
 800340e:	eb63 0901 	sbc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	462b      	mov	r3, r5
 8003434:	eb49 0303 	adc.w	r3, r9, r3
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003446:	4629      	mov	r1, r5
 8003448:	024b      	lsls	r3, r1, #9
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003450:	4621      	mov	r1, r4
 8003452:	024a      	lsls	r2, r1, #9
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003464:	f7fd fbf8 	bl	8000c58 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	e058      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	4611      	mov	r1, r2
 800347e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	f04f 0000 	mov.w	r0, #0
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349e:	0150      	lsls	r0, r2, #5
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4641      	mov	r1, r8
 80034a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c4:	ebb2 040a 	subs.w	r4, r2, sl
 80034c8:	eb63 050b 	sbc.w	r5, r3, fp
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	f7fd fb9e 	bl	8000c58 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003548:	4618      	mov	r0, r3
 800354a:	3750      	adds	r7, #80	; 0x50
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000028 	.word	0x20000028

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe fa3a 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb3e 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e044      	b.n	80036ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d013      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b06      	cmp	r3, #6
 8003694:	d010      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	e007      	b.n	80036b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000

080036dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f839 	bl	800377a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fa8c 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d122      	bne.n	80037ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11b      	bne.n	80037ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0202 	mvn.w	r2, #2
 80037ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa12 	bl	8003bfa <HAL_TIM_IC_CaptureCallback>
 80037d6:	e005      	b.n	80037e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fa04 	bl	8003be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa15 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d122      	bne.n	800383e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d11b      	bne.n	800383e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0204 	mvn.w	r2, #4
 800380e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f9e8 	bl	8003bfa <HAL_TIM_IC_CaptureCallback>
 800382a:	e005      	b.n	8003838 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f9da 	bl	8003be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9eb 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d122      	bne.n	8003892 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11b      	bne.n	8003892 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f06f 0208 	mvn.w	r2, #8
 8003862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9be 	bl	8003bfa <HAL_TIM_IC_CaptureCallback>
 800387e:	e005      	b.n	800388c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f9b0 	bl	8003be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f9c1 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d122      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d11b      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0210 	mvn.w	r2, #16
 80038b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2208      	movs	r2, #8
 80038bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f994 	bl	8003bfa <HAL_TIM_IC_CaptureCallback>
 80038d2:	e005      	b.n	80038e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f986 	bl	8003be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f997 	bl	8003c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0201 	mvn.w	r2, #1
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd fd8b 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fc9b 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f95c 	bl	8003c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d10e      	bne.n	8003996 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d107      	bne.n	8003996 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0220 	mvn.w	r2, #32
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fc65 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_OC_ConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e048      	b.n	8003a50 <HAL_TIM_OC_ConfigChannel+0xb0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	d839      	bhi.n	8003a40 <HAL_TIM_OC_ConfigChannel+0xa0>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a41 	.word	0x08003a41
 80039dc:	08003a41 	.word	0x08003a41
 80039e0:	08003a41 	.word	0x08003a41
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a41 	.word	0x08003a41
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a41 	.word	0x08003a41
 80039fc:	08003a41 	.word	0x08003a41
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a33 	.word	0x08003a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f992 	bl	8003d38 <TIM_OC1_SetConfig>
      break;
 8003a14:	e017      	b.n	8003a46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f9f1 	bl	8003e04 <TIM_OC2_SetConfig>
      break;
 8003a22:	e010      	b.n	8003a46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fa56 	bl	8003edc <TIM_OC3_SetConfig>
      break;
 8003a30:	e009      	b.n	8003a46 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fab9 	bl	8003fb0 <TIM_OC4_SetConfig>
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	75fb      	strb	r3, [r7, #23]
      break;
 8003a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_ConfigClockSource+0x1c>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0b4      	b.n	8003bde <HAL_TIM_ConfigClockSource+0x186>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aac:	d03e      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0xd4>
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab2:	f200 8087 	bhi.w	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	f000 8086 	beq.w	8003bca <HAL_TIM_ConfigClockSource+0x172>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac2:	d87f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b70      	cmp	r3, #112	; 0x70
 8003ac6:	d01a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xa6>
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d87b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b60      	cmp	r3, #96	; 0x60
 8003ace:	d050      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d877      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b50      	cmp	r3, #80	; 0x50
 8003ad6:	d03c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xfa>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d873      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d058      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d86f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b30      	cmp	r3, #48	; 0x30
 8003ae6:	d064      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d86b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d060      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d867      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05c      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d05a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	e062      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f000 fb19 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	609a      	str	r2, [r3, #8]
      break;
 8003b2a:	e04f      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f000 fb02 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4e:	609a      	str	r2, [r3, #8]
      break;
 8003b50:	e03c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 fa76 	bl	8004050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2150      	movs	r1, #80	; 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 facf 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003b70:	e02c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 fa95 	bl	80040ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2160      	movs	r1, #96	; 0x60
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fabf 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003b90:	e01c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa56 	bl	8004050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 faaf 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e00c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 faa6 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	; (8003d1c <TIM_Base_SetConfig+0xe4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00f      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a31      	ldr	r2, [pc, #196]	; (8003d20 <TIM_Base_SetConfig+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <TIM_Base_SetConfig+0xec>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x38>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a2f      	ldr	r2, [pc, #188]	; (8003d28 <TIM_Base_SetConfig+0xf0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <TIM_Base_SetConfig+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d017      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <TIM_Base_SetConfig+0xe8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <TIM_Base_SetConfig+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <TIM_Base_SetConfig+0xf0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <TIM_Base_SetConfig+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <TIM_Base_SetConfig+0xf8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0x8a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <TIM_Base_SetConfig+0xfc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <TIM_Base_SetConfig+0xe4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d103      	bne.n	8003d08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 0302 	bic.w	r3, r3, #2
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <TIM_OC1_SetConfig+0xc8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10c      	bne.n	8003dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0308 	bic.w	r3, r3, #8
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <TIM_OC1_SetConfig+0xc8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d111      	bne.n	8003dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000

08003e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0210 	bic.w	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0320 	bic.w	r3, r3, #32
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <TIM_OC2_SetConfig+0xd4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10d      	bne.n	8003e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <TIM_OC2_SetConfig+0xd4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d113      	bne.n	8003eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000

08003edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <TIM_OC3_SetConfig+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10d      	bne.n	8003f56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_OC3_SetConfig+0xd0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d113      	bne.n	8003f86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000

08003fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <TIM_OC4_SetConfig+0x9c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d109      	bne.n	8004024 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000

08004050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 030a 	bic.w	r3, r3, #10
 800408c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b087      	sub	sp, #28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0210 	bic.w	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e050      	b.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d013      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10c      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <__cvt>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	ec55 4b10 	vmov	r4, r5, d0
 8004290:	2d00      	cmp	r5, #0
 8004292:	460e      	mov	r6, r1
 8004294:	4619      	mov	r1, r3
 8004296:	462b      	mov	r3, r5
 8004298:	bfbb      	ittet	lt
 800429a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800429e:	461d      	movlt	r5, r3
 80042a0:	2300      	movge	r3, #0
 80042a2:	232d      	movlt	r3, #45	; 0x2d
 80042a4:	700b      	strb	r3, [r1, #0]
 80042a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042ac:	4691      	mov	r9, r2
 80042ae:	f023 0820 	bic.w	r8, r3, #32
 80042b2:	bfbc      	itt	lt
 80042b4:	4622      	movlt	r2, r4
 80042b6:	4614      	movlt	r4, r2
 80042b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042bc:	d005      	beq.n	80042ca <__cvt+0x42>
 80042be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042c2:	d100      	bne.n	80042c6 <__cvt+0x3e>
 80042c4:	3601      	adds	r6, #1
 80042c6:	2102      	movs	r1, #2
 80042c8:	e000      	b.n	80042cc <__cvt+0x44>
 80042ca:	2103      	movs	r1, #3
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	ab02      	add	r3, sp, #8
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	ec45 4b10 	vmov	d0, r4, r5
 80042d8:	4653      	mov	r3, sl
 80042da:	4632      	mov	r2, r6
 80042dc:	f000 fe68 	bl	8004fb0 <_dtoa_r>
 80042e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042e4:	4607      	mov	r7, r0
 80042e6:	d102      	bne.n	80042ee <__cvt+0x66>
 80042e8:	f019 0f01 	tst.w	r9, #1
 80042ec:	d022      	beq.n	8004334 <__cvt+0xac>
 80042ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042f2:	eb07 0906 	add.w	r9, r7, r6
 80042f6:	d110      	bne.n	800431a <__cvt+0x92>
 80042f8:	783b      	ldrb	r3, [r7, #0]
 80042fa:	2b30      	cmp	r3, #48	; 0x30
 80042fc:	d10a      	bne.n	8004314 <__cvt+0x8c>
 80042fe:	2200      	movs	r2, #0
 8004300:	2300      	movs	r3, #0
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f7fc fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800430a:	b918      	cbnz	r0, 8004314 <__cvt+0x8c>
 800430c:	f1c6 0601 	rsb	r6, r6, #1
 8004310:	f8ca 6000 	str.w	r6, [sl]
 8004314:	f8da 3000 	ldr.w	r3, [sl]
 8004318:	4499      	add	r9, r3
 800431a:	2200      	movs	r2, #0
 800431c:	2300      	movs	r3, #0
 800431e:	4620      	mov	r0, r4
 8004320:	4629      	mov	r1, r5
 8004322:	f7fc fbd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004326:	b108      	cbz	r0, 800432c <__cvt+0xa4>
 8004328:	f8cd 900c 	str.w	r9, [sp, #12]
 800432c:	2230      	movs	r2, #48	; 0x30
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	454b      	cmp	r3, r9
 8004332:	d307      	bcc.n	8004344 <__cvt+0xbc>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004338:	1bdb      	subs	r3, r3, r7
 800433a:	4638      	mov	r0, r7
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	b004      	add	sp, #16
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	9103      	str	r1, [sp, #12]
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e7f0      	b.n	800432e <__cvt+0xa6>

0800434c <__exponent>:
 800434c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434e:	4603      	mov	r3, r0
 8004350:	2900      	cmp	r1, #0
 8004352:	bfb8      	it	lt
 8004354:	4249      	neglt	r1, r1
 8004356:	f803 2b02 	strb.w	r2, [r3], #2
 800435a:	bfb4      	ite	lt
 800435c:	222d      	movlt	r2, #45	; 0x2d
 800435e:	222b      	movge	r2, #43	; 0x2b
 8004360:	2909      	cmp	r1, #9
 8004362:	7042      	strb	r2, [r0, #1]
 8004364:	dd2a      	ble.n	80043bc <__exponent+0x70>
 8004366:	f10d 0207 	add.w	r2, sp, #7
 800436a:	4617      	mov	r7, r2
 800436c:	260a      	movs	r6, #10
 800436e:	4694      	mov	ip, r2
 8004370:	fb91 f5f6 	sdiv	r5, r1, r6
 8004374:	fb06 1415 	mls	r4, r6, r5, r1
 8004378:	3430      	adds	r4, #48	; 0x30
 800437a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800437e:	460c      	mov	r4, r1
 8004380:	2c63      	cmp	r4, #99	; 0x63
 8004382:	f102 32ff 	add.w	r2, r2, #4294967295
 8004386:	4629      	mov	r1, r5
 8004388:	dcf1      	bgt.n	800436e <__exponent+0x22>
 800438a:	3130      	adds	r1, #48	; 0x30
 800438c:	f1ac 0402 	sub.w	r4, ip, #2
 8004390:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004394:	1c41      	adds	r1, r0, #1
 8004396:	4622      	mov	r2, r4
 8004398:	42ba      	cmp	r2, r7
 800439a:	d30a      	bcc.n	80043b2 <__exponent+0x66>
 800439c:	f10d 0209 	add.w	r2, sp, #9
 80043a0:	eba2 020c 	sub.w	r2, r2, ip
 80043a4:	42bc      	cmp	r4, r7
 80043a6:	bf88      	it	hi
 80043a8:	2200      	movhi	r2, #0
 80043aa:	4413      	add	r3, r2
 80043ac:	1a18      	subs	r0, r3, r0
 80043ae:	b003      	add	sp, #12
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80043b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80043ba:	e7ed      	b.n	8004398 <__exponent+0x4c>
 80043bc:	2330      	movs	r3, #48	; 0x30
 80043be:	3130      	adds	r1, #48	; 0x30
 80043c0:	7083      	strb	r3, [r0, #2]
 80043c2:	70c1      	strb	r1, [r0, #3]
 80043c4:	1d03      	adds	r3, r0, #4
 80043c6:	e7f1      	b.n	80043ac <__exponent+0x60>

080043c8 <_printf_float>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	ed2d 8b02 	vpush	{d8}
 80043d0:	b08d      	sub	sp, #52	; 0x34
 80043d2:	460c      	mov	r4, r1
 80043d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043d8:	4616      	mov	r6, r2
 80043da:	461f      	mov	r7, r3
 80043dc:	4605      	mov	r5, r0
 80043de:	f000 fce9 	bl	8004db4 <_localeconv_r>
 80043e2:	f8d0 a000 	ldr.w	sl, [r0]
 80043e6:	4650      	mov	r0, sl
 80043e8:	f7fb ff4a 	bl	8000280 <strlen>
 80043ec:	2300      	movs	r3, #0
 80043ee:	930a      	str	r3, [sp, #40]	; 0x28
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	9305      	str	r3, [sp, #20]
 80043f4:	f8d8 3000 	ldr.w	r3, [r8]
 80043f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043fc:	3307      	adds	r3, #7
 80043fe:	f023 0307 	bic.w	r3, r3, #7
 8004402:	f103 0208 	add.w	r2, r3, #8
 8004406:	f8c8 2000 	str.w	r2, [r8]
 800440a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800440e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004412:	9307      	str	r3, [sp, #28]
 8004414:	f8cd 8018 	str.w	r8, [sp, #24]
 8004418:	ee08 0a10 	vmov	s16, r0
 800441c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004424:	4b9e      	ldr	r3, [pc, #632]	; (80046a0 <_printf_float+0x2d8>)
 8004426:	f04f 32ff 	mov.w	r2, #4294967295
 800442a:	f7fc fb87 	bl	8000b3c <__aeabi_dcmpun>
 800442e:	bb88      	cbnz	r0, 8004494 <_printf_float+0xcc>
 8004430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004434:	4b9a      	ldr	r3, [pc, #616]	; (80046a0 <_printf_float+0x2d8>)
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	f7fc fb61 	bl	8000b00 <__aeabi_dcmple>
 800443e:	bb48      	cbnz	r0, 8004494 <_printf_float+0xcc>
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	4640      	mov	r0, r8
 8004446:	4649      	mov	r1, r9
 8004448:	f7fc fb50 	bl	8000aec <__aeabi_dcmplt>
 800444c:	b110      	cbz	r0, 8004454 <_printf_float+0x8c>
 800444e:	232d      	movs	r3, #45	; 0x2d
 8004450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004454:	4a93      	ldr	r2, [pc, #588]	; (80046a4 <_printf_float+0x2dc>)
 8004456:	4b94      	ldr	r3, [pc, #592]	; (80046a8 <_printf_float+0x2e0>)
 8004458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800445c:	bf94      	ite	ls
 800445e:	4690      	movls	r8, r2
 8004460:	4698      	movhi	r8, r3
 8004462:	2303      	movs	r3, #3
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	9b05      	ldr	r3, [sp, #20]
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	f04f 0900 	mov.w	r9, #0
 8004472:	9700      	str	r7, [sp, #0]
 8004474:	4633      	mov	r3, r6
 8004476:	aa0b      	add	r2, sp, #44	; 0x2c
 8004478:	4621      	mov	r1, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f9da 	bl	8004834 <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	f040 8090 	bne.w	80045a6 <_printf_float+0x1de>
 8004486:	f04f 30ff 	mov.w	r0, #4294967295
 800448a:	b00d      	add	sp, #52	; 0x34
 800448c:	ecbd 8b02 	vpop	{d8}
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	4640      	mov	r0, r8
 800449a:	4649      	mov	r1, r9
 800449c:	f7fc fb4e 	bl	8000b3c <__aeabi_dcmpun>
 80044a0:	b140      	cbz	r0, 80044b4 <_printf_float+0xec>
 80044a2:	464b      	mov	r3, r9
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfbc      	itt	lt
 80044a8:	232d      	movlt	r3, #45	; 0x2d
 80044aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044ae:	4a7f      	ldr	r2, [pc, #508]	; (80046ac <_printf_float+0x2e4>)
 80044b0:	4b7f      	ldr	r3, [pc, #508]	; (80046b0 <_printf_float+0x2e8>)
 80044b2:	e7d1      	b.n	8004458 <_printf_float+0x90>
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044ba:	9206      	str	r2, [sp, #24]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	d13f      	bne.n	8004540 <_printf_float+0x178>
 80044c0:	2306      	movs	r3, #6
 80044c2:	6063      	str	r3, [r4, #4]
 80044c4:	9b05      	ldr	r3, [sp, #20]
 80044c6:	6861      	ldr	r1, [r4, #4]
 80044c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044cc:	2300      	movs	r3, #0
 80044ce:	9303      	str	r3, [sp, #12]
 80044d0:	ab0a      	add	r3, sp, #40	; 0x28
 80044d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044d6:	ab09      	add	r3, sp, #36	; 0x24
 80044d8:	ec49 8b10 	vmov	d0, r8, r9
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7ff fecf 	bl	8004288 <__cvt>
 80044ea:	9b06      	ldr	r3, [sp, #24]
 80044ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ee:	2b47      	cmp	r3, #71	; 0x47
 80044f0:	4680      	mov	r8, r0
 80044f2:	d108      	bne.n	8004506 <_printf_float+0x13e>
 80044f4:	1cc8      	adds	r0, r1, #3
 80044f6:	db02      	blt.n	80044fe <_printf_float+0x136>
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	4299      	cmp	r1, r3
 80044fc:	dd41      	ble.n	8004582 <_printf_float+0x1ba>
 80044fe:	f1ab 0302 	sub.w	r3, fp, #2
 8004502:	fa5f fb83 	uxtb.w	fp, r3
 8004506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800450a:	d820      	bhi.n	800454e <_printf_float+0x186>
 800450c:	3901      	subs	r1, #1
 800450e:	465a      	mov	r2, fp
 8004510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004514:	9109      	str	r1, [sp, #36]	; 0x24
 8004516:	f7ff ff19 	bl	800434c <__exponent>
 800451a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800451c:	1813      	adds	r3, r2, r0
 800451e:	2a01      	cmp	r2, #1
 8004520:	4681      	mov	r9, r0
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	dc02      	bgt.n	800452c <_printf_float+0x164>
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	07d2      	lsls	r2, r2, #31
 800452a:	d501      	bpl.n	8004530 <_printf_float+0x168>
 800452c:	3301      	adds	r3, #1
 800452e:	6123      	str	r3, [r4, #16]
 8004530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004534:	2b00      	cmp	r3, #0
 8004536:	d09c      	beq.n	8004472 <_printf_float+0xaa>
 8004538:	232d      	movs	r3, #45	; 0x2d
 800453a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453e:	e798      	b.n	8004472 <_printf_float+0xaa>
 8004540:	9a06      	ldr	r2, [sp, #24]
 8004542:	2a47      	cmp	r2, #71	; 0x47
 8004544:	d1be      	bne.n	80044c4 <_printf_float+0xfc>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1bc      	bne.n	80044c4 <_printf_float+0xfc>
 800454a:	2301      	movs	r3, #1
 800454c:	e7b9      	b.n	80044c2 <_printf_float+0xfa>
 800454e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004552:	d118      	bne.n	8004586 <_printf_float+0x1be>
 8004554:	2900      	cmp	r1, #0
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	dd0b      	ble.n	8004572 <_printf_float+0x1aa>
 800455a:	6121      	str	r1, [r4, #16]
 800455c:	b913      	cbnz	r3, 8004564 <_printf_float+0x19c>
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	07d0      	lsls	r0, r2, #31
 8004562:	d502      	bpl.n	800456a <_printf_float+0x1a2>
 8004564:	3301      	adds	r3, #1
 8004566:	440b      	add	r3, r1
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	65a1      	str	r1, [r4, #88]	; 0x58
 800456c:	f04f 0900 	mov.w	r9, #0
 8004570:	e7de      	b.n	8004530 <_printf_float+0x168>
 8004572:	b913      	cbnz	r3, 800457a <_printf_float+0x1b2>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	07d2      	lsls	r2, r2, #31
 8004578:	d501      	bpl.n	800457e <_printf_float+0x1b6>
 800457a:	3302      	adds	r3, #2
 800457c:	e7f4      	b.n	8004568 <_printf_float+0x1a0>
 800457e:	2301      	movs	r3, #1
 8004580:	e7f2      	b.n	8004568 <_printf_float+0x1a0>
 8004582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004588:	4299      	cmp	r1, r3
 800458a:	db05      	blt.n	8004598 <_printf_float+0x1d0>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	6121      	str	r1, [r4, #16]
 8004590:	07d8      	lsls	r0, r3, #31
 8004592:	d5ea      	bpl.n	800456a <_printf_float+0x1a2>
 8004594:	1c4b      	adds	r3, r1, #1
 8004596:	e7e7      	b.n	8004568 <_printf_float+0x1a0>
 8004598:	2900      	cmp	r1, #0
 800459a:	bfd4      	ite	le
 800459c:	f1c1 0202 	rsble	r2, r1, #2
 80045a0:	2201      	movgt	r2, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	e7e0      	b.n	8004568 <_printf_float+0x1a0>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	055a      	lsls	r2, r3, #21
 80045aa:	d407      	bmi.n	80045bc <_printf_float+0x1f4>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	4642      	mov	r2, r8
 80045b0:	4631      	mov	r1, r6
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	d12c      	bne.n	8004614 <_printf_float+0x24c>
 80045ba:	e764      	b.n	8004486 <_printf_float+0xbe>
 80045bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045c0:	f240 80e0 	bls.w	8004784 <_printf_float+0x3bc>
 80045c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045c8:	2200      	movs	r2, #0
 80045ca:	2300      	movs	r3, #0
 80045cc:	f7fc fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d034      	beq.n	800463e <_printf_float+0x276>
 80045d4:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <_printf_float+0x2ec>)
 80045d6:	2301      	movs	r3, #1
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f af51 	beq.w	8004486 <_printf_float+0xbe>
 80045e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e8:	429a      	cmp	r2, r3
 80045ea:	db02      	blt.n	80045f2 <_printf_float+0x22a>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	07d8      	lsls	r0, r3, #31
 80045f0:	d510      	bpl.n	8004614 <_printf_float+0x24c>
 80045f2:	ee18 3a10 	vmov	r3, s16
 80045f6:	4652      	mov	r2, sl
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af41 	beq.w	8004486 <_printf_float+0xbe>
 8004604:	f04f 0800 	mov.w	r8, #0
 8004608:	f104 091a 	add.w	r9, r4, #26
 800460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	4543      	cmp	r3, r8
 8004612:	dc09      	bgt.n	8004628 <_printf_float+0x260>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	f100 8107 	bmi.w	800482a <_printf_float+0x462>
 800461c:	68e0      	ldr	r0, [r4, #12]
 800461e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004620:	4298      	cmp	r0, r3
 8004622:	bfb8      	it	lt
 8004624:	4618      	movlt	r0, r3
 8004626:	e730      	b.n	800448a <_printf_float+0xc2>
 8004628:	2301      	movs	r3, #1
 800462a:	464a      	mov	r2, r9
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	47b8      	blx	r7
 8004632:	3001      	adds	r0, #1
 8004634:	f43f af27 	beq.w	8004486 <_printf_float+0xbe>
 8004638:	f108 0801 	add.w	r8, r8, #1
 800463c:	e7e6      	b.n	800460c <_printf_float+0x244>
 800463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	dc39      	bgt.n	80046b8 <_printf_float+0x2f0>
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <_printf_float+0x2ec>)
 8004646:	2301      	movs	r3, #1
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af19 	beq.w	8004486 <_printf_float+0xbe>
 8004654:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004658:	4313      	orrs	r3, r2
 800465a:	d102      	bne.n	8004662 <_printf_float+0x29a>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	07d9      	lsls	r1, r3, #31
 8004660:	d5d8      	bpl.n	8004614 <_printf_float+0x24c>
 8004662:	ee18 3a10 	vmov	r3, s16
 8004666:	4652      	mov	r2, sl
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	f43f af09 	beq.w	8004486 <_printf_float+0xbe>
 8004674:	f04f 0900 	mov.w	r9, #0
 8004678:	f104 0a1a 	add.w	sl, r4, #26
 800467c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467e:	425b      	negs	r3, r3
 8004680:	454b      	cmp	r3, r9
 8004682:	dc01      	bgt.n	8004688 <_printf_float+0x2c0>
 8004684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004686:	e792      	b.n	80045ae <_printf_float+0x1e6>
 8004688:	2301      	movs	r3, #1
 800468a:	4652      	mov	r2, sl
 800468c:	4631      	mov	r1, r6
 800468e:	4628      	mov	r0, r5
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	f43f aef7 	beq.w	8004486 <_printf_float+0xbe>
 8004698:	f109 0901 	add.w	r9, r9, #1
 800469c:	e7ee      	b.n	800467c <_printf_float+0x2b4>
 800469e:	bf00      	nop
 80046a0:	7fefffff 	.word	0x7fefffff
 80046a4:	08006fe0 	.word	0x08006fe0
 80046a8:	08006fe4 	.word	0x08006fe4
 80046ac:	08006fe8 	.word	0x08006fe8
 80046b0:	08006fec 	.word	0x08006fec
 80046b4:	08006ff0 	.word	0x08006ff0
 80046b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046bc:	429a      	cmp	r2, r3
 80046be:	bfa8      	it	ge
 80046c0:	461a      	movge	r2, r3
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	4691      	mov	r9, r2
 80046c6:	dc37      	bgt.n	8004738 <_printf_float+0x370>
 80046c8:	f04f 0b00 	mov.w	fp, #0
 80046cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046d0:	f104 021a 	add.w	r2, r4, #26
 80046d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d6:	9305      	str	r3, [sp, #20]
 80046d8:	eba3 0309 	sub.w	r3, r3, r9
 80046dc:	455b      	cmp	r3, fp
 80046de:	dc33      	bgt.n	8004748 <_printf_float+0x380>
 80046e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046e4:	429a      	cmp	r2, r3
 80046e6:	db3b      	blt.n	8004760 <_printf_float+0x398>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	07da      	lsls	r2, r3, #31
 80046ec:	d438      	bmi.n	8004760 <_printf_float+0x398>
 80046ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046f2:	eba2 0903 	sub.w	r9, r2, r3
 80046f6:	9b05      	ldr	r3, [sp, #20]
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	4591      	cmp	r9, r2
 80046fc:	bfa8      	it	ge
 80046fe:	4691      	movge	r9, r2
 8004700:	f1b9 0f00 	cmp.w	r9, #0
 8004704:	dc35      	bgt.n	8004772 <_printf_float+0x3aa>
 8004706:	f04f 0800 	mov.w	r8, #0
 800470a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800470e:	f104 0a1a 	add.w	sl, r4, #26
 8004712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	eba3 0309 	sub.w	r3, r3, r9
 800471c:	4543      	cmp	r3, r8
 800471e:	f77f af79 	ble.w	8004614 <_printf_float+0x24c>
 8004722:	2301      	movs	r3, #1
 8004724:	4652      	mov	r2, sl
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	f43f aeaa 	beq.w	8004486 <_printf_float+0xbe>
 8004732:	f108 0801 	add.w	r8, r8, #1
 8004736:	e7ec      	b.n	8004712 <_printf_float+0x34a>
 8004738:	4613      	mov	r3, r2
 800473a:	4631      	mov	r1, r6
 800473c:	4642      	mov	r2, r8
 800473e:	4628      	mov	r0, r5
 8004740:	47b8      	blx	r7
 8004742:	3001      	adds	r0, #1
 8004744:	d1c0      	bne.n	80046c8 <_printf_float+0x300>
 8004746:	e69e      	b.n	8004486 <_printf_float+0xbe>
 8004748:	2301      	movs	r3, #1
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	9205      	str	r2, [sp, #20]
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	f43f ae97 	beq.w	8004486 <_printf_float+0xbe>
 8004758:	9a05      	ldr	r2, [sp, #20]
 800475a:	f10b 0b01 	add.w	fp, fp, #1
 800475e:	e7b9      	b.n	80046d4 <_printf_float+0x30c>
 8004760:	ee18 3a10 	vmov	r3, s16
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	d1be      	bne.n	80046ee <_printf_float+0x326>
 8004770:	e689      	b.n	8004486 <_printf_float+0xbe>
 8004772:	9a05      	ldr	r2, [sp, #20]
 8004774:	464b      	mov	r3, r9
 8004776:	4442      	add	r2, r8
 8004778:	4631      	mov	r1, r6
 800477a:	4628      	mov	r0, r5
 800477c:	47b8      	blx	r7
 800477e:	3001      	adds	r0, #1
 8004780:	d1c1      	bne.n	8004706 <_printf_float+0x33e>
 8004782:	e680      	b.n	8004486 <_printf_float+0xbe>
 8004784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004786:	2a01      	cmp	r2, #1
 8004788:	dc01      	bgt.n	800478e <_printf_float+0x3c6>
 800478a:	07db      	lsls	r3, r3, #31
 800478c:	d53a      	bpl.n	8004804 <_printf_float+0x43c>
 800478e:	2301      	movs	r3, #1
 8004790:	4642      	mov	r2, r8
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f ae74 	beq.w	8004486 <_printf_float+0xbe>
 800479e:	ee18 3a10 	vmov	r3, s16
 80047a2:	4652      	mov	r2, sl
 80047a4:	4631      	mov	r1, r6
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f ae6b 	beq.w	8004486 <_printf_float+0xbe>
 80047b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b4:	2200      	movs	r2, #0
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80047bc:	f7fc f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80047c0:	b9d8      	cbnz	r0, 80047fa <_printf_float+0x432>
 80047c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80047c6:	f108 0201 	add.w	r2, r8, #1
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	d10e      	bne.n	80047f2 <_printf_float+0x42a>
 80047d4:	e657      	b.n	8004486 <_printf_float+0xbe>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f ae50 	beq.w	8004486 <_printf_float+0xbe>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	4543      	cmp	r3, r8
 80047f0:	dcf1      	bgt.n	80047d6 <_printf_float+0x40e>
 80047f2:	464b      	mov	r3, r9
 80047f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047f8:	e6da      	b.n	80045b0 <_printf_float+0x1e8>
 80047fa:	f04f 0800 	mov.w	r8, #0
 80047fe:	f104 0a1a 	add.w	sl, r4, #26
 8004802:	e7f2      	b.n	80047ea <_printf_float+0x422>
 8004804:	2301      	movs	r3, #1
 8004806:	4642      	mov	r2, r8
 8004808:	e7df      	b.n	80047ca <_printf_float+0x402>
 800480a:	2301      	movs	r3, #1
 800480c:	464a      	mov	r2, r9
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	f43f ae36 	beq.w	8004486 <_printf_float+0xbe>
 800481a:	f108 0801 	add.w	r8, r8, #1
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004822:	1a5b      	subs	r3, r3, r1
 8004824:	4543      	cmp	r3, r8
 8004826:	dcf0      	bgt.n	800480a <_printf_float+0x442>
 8004828:	e6f8      	b.n	800461c <_printf_float+0x254>
 800482a:	f04f 0800 	mov.w	r8, #0
 800482e:	f104 0919 	add.w	r9, r4, #25
 8004832:	e7f4      	b.n	800481e <_printf_float+0x456>

08004834 <_printf_common>:
 8004834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	4616      	mov	r6, r2
 800483a:	4699      	mov	r9, r3
 800483c:	688a      	ldr	r2, [r1, #8]
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004844:	4293      	cmp	r3, r2
 8004846:	bfb8      	it	lt
 8004848:	4613      	movlt	r3, r2
 800484a:	6033      	str	r3, [r6, #0]
 800484c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004850:	4607      	mov	r7, r0
 8004852:	460c      	mov	r4, r1
 8004854:	b10a      	cbz	r2, 800485a <_printf_common+0x26>
 8004856:	3301      	adds	r3, #1
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	0699      	lsls	r1, r3, #26
 800485e:	bf42      	ittt	mi
 8004860:	6833      	ldrmi	r3, [r6, #0]
 8004862:	3302      	addmi	r3, #2
 8004864:	6033      	strmi	r3, [r6, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	f015 0506 	ands.w	r5, r5, #6
 800486c:	d106      	bne.n	800487c <_printf_common+0x48>
 800486e:	f104 0a19 	add.w	sl, r4, #25
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	6832      	ldr	r2, [r6, #0]
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	42ab      	cmp	r3, r5
 800487a:	dc26      	bgt.n	80048ca <_printf_common+0x96>
 800487c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004880:	1e13      	subs	r3, r2, #0
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	bf18      	it	ne
 8004886:	2301      	movne	r3, #1
 8004888:	0692      	lsls	r2, r2, #26
 800488a:	d42b      	bmi.n	80048e4 <_printf_common+0xb0>
 800488c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004890:	4649      	mov	r1, r9
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	3001      	adds	r0, #1
 8004898:	d01e      	beq.n	80048d8 <_printf_common+0xa4>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf02      	ittt	eq
 80048a6:	68e5      	ldreq	r5, [r4, #12]
 80048a8:	6833      	ldreq	r3, [r6, #0]
 80048aa:	1aed      	subeq	r5, r5, r3
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	bf0c      	ite	eq
 80048b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b4:	2500      	movne	r5, #0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bfc4      	itt	gt
 80048ba:	1a9b      	subgt	r3, r3, r2
 80048bc:	18ed      	addgt	r5, r5, r3
 80048be:	2600      	movs	r6, #0
 80048c0:	341a      	adds	r4, #26
 80048c2:	42b5      	cmp	r5, r6
 80048c4:	d11a      	bne.n	80048fc <_printf_common+0xc8>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e008      	b.n	80048dc <_printf_common+0xa8>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	4649      	mov	r1, r9
 80048d0:	4638      	mov	r0, r7
 80048d2:	47c0      	blx	r8
 80048d4:	3001      	adds	r0, #1
 80048d6:	d103      	bne.n	80048e0 <_printf_common+0xac>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	3501      	adds	r5, #1
 80048e2:	e7c6      	b.n	8004872 <_printf_common+0x3e>
 80048e4:	18e1      	adds	r1, r4, r3
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	2030      	movs	r0, #48	; 0x30
 80048ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ee:	4422      	add	r2, r4
 80048f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f8:	3302      	adds	r3, #2
 80048fa:	e7c7      	b.n	800488c <_printf_common+0x58>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4622      	mov	r2, r4
 8004900:	4649      	mov	r1, r9
 8004902:	4638      	mov	r0, r7
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d0e6      	beq.n	80048d8 <_printf_common+0xa4>
 800490a:	3601      	adds	r6, #1
 800490c:	e7d9      	b.n	80048c2 <_printf_common+0x8e>
	...

08004910 <_printf_i>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	7e0f      	ldrb	r7, [r1, #24]
 8004916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004918:	2f78      	cmp	r7, #120	; 0x78
 800491a:	4691      	mov	r9, r2
 800491c:	4680      	mov	r8, r0
 800491e:	460c      	mov	r4, r1
 8004920:	469a      	mov	sl, r3
 8004922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004926:	d807      	bhi.n	8004938 <_printf_i+0x28>
 8004928:	2f62      	cmp	r7, #98	; 0x62
 800492a:	d80a      	bhi.n	8004942 <_printf_i+0x32>
 800492c:	2f00      	cmp	r7, #0
 800492e:	f000 80d4 	beq.w	8004ada <_printf_i+0x1ca>
 8004932:	2f58      	cmp	r7, #88	; 0x58
 8004934:	f000 80c0 	beq.w	8004ab8 <_printf_i+0x1a8>
 8004938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800493c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004940:	e03a      	b.n	80049b8 <_printf_i+0xa8>
 8004942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004946:	2b15      	cmp	r3, #21
 8004948:	d8f6      	bhi.n	8004938 <_printf_i+0x28>
 800494a:	a101      	add	r1, pc, #4	; (adr r1, 8004950 <_printf_i+0x40>)
 800494c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004939 	.word	0x08004939
 800495c:	08004939 	.word	0x08004939
 8004960:	08004939 	.word	0x08004939
 8004964:	08004939 	.word	0x08004939
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004939 	.word	0x08004939
 8004970:	08004939 	.word	0x08004939
 8004974:	08004939 	.word	0x08004939
 8004978:	08004939 	.word	0x08004939
 800497c:	08004ac1 	.word	0x08004ac1
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004a7b 	.word	0x08004a7b
 8004988:	08004939 	.word	0x08004939
 800498c:	08004939 	.word	0x08004939
 8004990:	08004ae3 	.word	0x08004ae3
 8004994:	08004939 	.word	0x08004939
 8004998:	080049e9 	.word	0x080049e9
 800499c:	08004939 	.word	0x08004939
 80049a0:	08004939 	.word	0x08004939
 80049a4:	08004a83 	.word	0x08004a83
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	602a      	str	r2, [r5, #0]
 80049b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b8:	2301      	movs	r3, #1
 80049ba:	e09f      	b.n	8004afc <_printf_i+0x1ec>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	0607      	lsls	r7, r0, #24
 80049c2:	f103 0104 	add.w	r1, r3, #4
 80049c6:	6029      	str	r1, [r5, #0]
 80049c8:	d501      	bpl.n	80049ce <_printf_i+0xbe>
 80049ca:	681e      	ldr	r6, [r3, #0]
 80049cc:	e003      	b.n	80049d6 <_printf_i+0xc6>
 80049ce:	0646      	lsls	r6, r0, #25
 80049d0:	d5fb      	bpl.n	80049ca <_printf_i+0xba>
 80049d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	da03      	bge.n	80049e2 <_printf_i+0xd2>
 80049da:	232d      	movs	r3, #45	; 0x2d
 80049dc:	4276      	negs	r6, r6
 80049de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e2:	485a      	ldr	r0, [pc, #360]	; (8004b4c <_printf_i+0x23c>)
 80049e4:	230a      	movs	r3, #10
 80049e6:	e012      	b.n	8004a0e <_printf_i+0xfe>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	1d19      	adds	r1, r3, #4
 80049ee:	6029      	str	r1, [r5, #0]
 80049f0:	0605      	lsls	r5, r0, #24
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0xe8>
 80049f4:	681e      	ldr	r6, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0xee>
 80049f8:	0641      	lsls	r1, r0, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0xe4>
 80049fc:	881e      	ldrh	r6, [r3, #0]
 80049fe:	4853      	ldr	r0, [pc, #332]	; (8004b4c <_printf_i+0x23c>)
 8004a00:	2f6f      	cmp	r7, #111	; 0x6f
 8004a02:	bf0c      	ite	eq
 8004a04:	2308      	moveq	r3, #8
 8004a06:	230a      	movne	r3, #10
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0e:	6865      	ldr	r5, [r4, #4]
 8004a10:	60a5      	str	r5, [r4, #8]
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	bfa2      	ittt	ge
 8004a16:	6821      	ldrge	r1, [r4, #0]
 8004a18:	f021 0104 	bicge.w	r1, r1, #4
 8004a1c:	6021      	strge	r1, [r4, #0]
 8004a1e:	b90e      	cbnz	r6, 8004a24 <_printf_i+0x114>
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	d04b      	beq.n	8004abc <_printf_i+0x1ac>
 8004a24:	4615      	mov	r5, r2
 8004a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a2e:	5dc7      	ldrb	r7, [r0, r7]
 8004a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a34:	4637      	mov	r7, r6
 8004a36:	42bb      	cmp	r3, r7
 8004a38:	460e      	mov	r6, r1
 8004a3a:	d9f4      	bls.n	8004a26 <_printf_i+0x116>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d10b      	bne.n	8004a58 <_printf_i+0x148>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07de      	lsls	r6, r3, #31
 8004a44:	d508      	bpl.n	8004a58 <_printf_i+0x148>
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	bfde      	ittt	le
 8004a4e:	2330      	movle	r3, #48	; 0x30
 8004a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a58:	1b52      	subs	r2, r2, r5
 8004a5a:	6122      	str	r2, [r4, #16]
 8004a5c:	f8cd a000 	str.w	sl, [sp]
 8004a60:	464b      	mov	r3, r9
 8004a62:	aa03      	add	r2, sp, #12
 8004a64:	4621      	mov	r1, r4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7ff fee4 	bl	8004834 <_printf_common>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d14a      	bne.n	8004b06 <_printf_i+0x1f6>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	b004      	add	sp, #16
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	f043 0320 	orr.w	r3, r3, #32
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	4833      	ldr	r0, [pc, #204]	; (8004b50 <_printf_i+0x240>)
 8004a84:	2778      	movs	r7, #120	; 0x78
 8004a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	6829      	ldr	r1, [r5, #0]
 8004a8e:	061f      	lsls	r7, r3, #24
 8004a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a94:	d402      	bmi.n	8004a9c <_printf_i+0x18c>
 8004a96:	065f      	lsls	r7, r3, #25
 8004a98:	bf48      	it	mi
 8004a9a:	b2b6      	uxthmi	r6, r6
 8004a9c:	07df      	lsls	r7, r3, #31
 8004a9e:	bf48      	it	mi
 8004aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa4:	6029      	str	r1, [r5, #0]
 8004aa6:	bf48      	it	mi
 8004aa8:	6023      	strmi	r3, [r4, #0]
 8004aaa:	b91e      	cbnz	r6, 8004ab4 <_printf_i+0x1a4>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f023 0320 	bic.w	r3, r3, #32
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	e7a7      	b.n	8004a08 <_printf_i+0xf8>
 8004ab8:	4824      	ldr	r0, [pc, #144]	; (8004b4c <_printf_i+0x23c>)
 8004aba:	e7e4      	b.n	8004a86 <_printf_i+0x176>
 8004abc:	4615      	mov	r5, r2
 8004abe:	e7bd      	b.n	8004a3c <_printf_i+0x12c>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6826      	ldr	r6, [r4, #0]
 8004ac4:	6961      	ldr	r1, [r4, #20]
 8004ac6:	1d18      	adds	r0, r3, #4
 8004ac8:	6028      	str	r0, [r5, #0]
 8004aca:	0635      	lsls	r5, r6, #24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0x1c4>
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0x1ca>
 8004ad4:	0670      	lsls	r0, r6, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0x1c0>
 8004ad8:	8019      	strh	r1, [r3, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	4615      	mov	r5, r2
 8004ae0:	e7bc      	b.n	8004a5c <_printf_i+0x14c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb fb76 	bl	80001e0 <memchr>
 8004af4:	b108      	cbz	r0, 8004afa <_printf_i+0x1ea>
 8004af6:	1b40      	subs	r0, r0, r5
 8004af8:	6060      	str	r0, [r4, #4]
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b04:	e7aa      	b.n	8004a5c <_printf_i+0x14c>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	47d0      	blx	sl
 8004b10:	3001      	adds	r0, #1
 8004b12:	d0ad      	beq.n	8004a70 <_printf_i+0x160>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	079b      	lsls	r3, r3, #30
 8004b18:	d413      	bmi.n	8004b42 <_printf_i+0x232>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	4298      	cmp	r0, r3
 8004b20:	bfb8      	it	lt
 8004b22:	4618      	movlt	r0, r3
 8004b24:	e7a6      	b.n	8004a74 <_printf_i+0x164>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4632      	mov	r2, r6
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	47d0      	blx	sl
 8004b30:	3001      	adds	r0, #1
 8004b32:	d09d      	beq.n	8004a70 <_printf_i+0x160>
 8004b34:	3501      	adds	r5, #1
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	9903      	ldr	r1, [sp, #12]
 8004b3a:	1a5b      	subs	r3, r3, r1
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dcf2      	bgt.n	8004b26 <_printf_i+0x216>
 8004b40:	e7eb      	b.n	8004b1a <_printf_i+0x20a>
 8004b42:	2500      	movs	r5, #0
 8004b44:	f104 0619 	add.w	r6, r4, #25
 8004b48:	e7f5      	b.n	8004b36 <_printf_i+0x226>
 8004b4a:	bf00      	nop
 8004b4c:	08006ff2 	.word	0x08006ff2
 8004b50:	08007003 	.word	0x08007003

08004b54 <std>:
 8004b54:	2300      	movs	r3, #0
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b62:	6083      	str	r3, [r0, #8]
 8004b64:	8181      	strh	r1, [r0, #12]
 8004b66:	6643      	str	r3, [r0, #100]	; 0x64
 8004b68:	81c2      	strh	r2, [r0, #14]
 8004b6a:	6183      	str	r3, [r0, #24]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2208      	movs	r2, #8
 8004b70:	305c      	adds	r0, #92	; 0x5c
 8004b72:	f000 f916 	bl	8004da2 <memset>
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <std+0x38>)
 8004b78:	6263      	str	r3, [r4, #36]	; 0x24
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <std+0x3c>)
 8004b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <std+0x40>)
 8004b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <std+0x44>)
 8004b84:	6224      	str	r4, [r4, #32]
 8004b86:	6323      	str	r3, [r4, #48]	; 0x30
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	08004d1d 	.word	0x08004d1d
 8004b90:	08004d3f 	.word	0x08004d3f
 8004b94:	08004d77 	.word	0x08004d77
 8004b98:	08004d9b 	.word	0x08004d9b

08004b9c <stdio_exit_handler>:
 8004b9c:	4a02      	ldr	r2, [pc, #8]	; (8004ba8 <stdio_exit_handler+0xc>)
 8004b9e:	4903      	ldr	r1, [pc, #12]	; (8004bac <stdio_exit_handler+0x10>)
 8004ba0:	4803      	ldr	r0, [pc, #12]	; (8004bb0 <stdio_exit_handler+0x14>)
 8004ba2:	f000 b869 	b.w	8004c78 <_fwalk_sglue>
 8004ba6:	bf00      	nop
 8004ba8:	20000034 	.word	0x20000034
 8004bac:	08006849 	.word	0x08006849
 8004bb0:	20000040 	.word	0x20000040

08004bb4 <cleanup_stdio>:
 8004bb4:	6841      	ldr	r1, [r0, #4]
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <cleanup_stdio+0x34>)
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	b510      	push	{r4, lr}
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	d001      	beq.n	8004bc4 <cleanup_stdio+0x10>
 8004bc0:	f001 fe42 	bl	8006848 <_fflush_r>
 8004bc4:	68a1      	ldr	r1, [r4, #8]
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <cleanup_stdio+0x38>)
 8004bc8:	4299      	cmp	r1, r3
 8004bca:	d002      	beq.n	8004bd2 <cleanup_stdio+0x1e>
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f001 fe3b 	bl	8006848 <_fflush_r>
 8004bd2:	68e1      	ldr	r1, [r4, #12]
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <cleanup_stdio+0x3c>)
 8004bd6:	4299      	cmp	r1, r3
 8004bd8:	d004      	beq.n	8004be4 <cleanup_stdio+0x30>
 8004bda:	4620      	mov	r0, r4
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f001 be32 	b.w	8006848 <_fflush_r>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop
 8004be8:	200002e0 	.word	0x200002e0
 8004bec:	20000348 	.word	0x20000348
 8004bf0:	200003b0 	.word	0x200003b0

08004bf4 <global_stdio_init.part.0>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <global_stdio_init.part.0+0x30>)
 8004bf8:	4c0b      	ldr	r4, [pc, #44]	; (8004c28 <global_stdio_init.part.0+0x34>)
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <global_stdio_init.part.0+0x38>)
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	2200      	movs	r2, #0
 8004c02:	2104      	movs	r1, #4
 8004c04:	f7ff ffa6 	bl	8004b54 <std>
 8004c08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2109      	movs	r1, #9
 8004c10:	f7ff ffa0 	bl	8004b54 <std>
 8004c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c18:	2202      	movs	r2, #2
 8004c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c1e:	2112      	movs	r1, #18
 8004c20:	f7ff bf98 	b.w	8004b54 <std>
 8004c24:	20000418 	.word	0x20000418
 8004c28:	200002e0 	.word	0x200002e0
 8004c2c:	08004b9d 	.word	0x08004b9d

08004c30 <__sfp_lock_acquire>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__sfp_lock_acquire+0x8>)
 8004c32:	f000 b933 	b.w	8004e9c <__retarget_lock_acquire_recursive>
 8004c36:	bf00      	nop
 8004c38:	20000421 	.word	0x20000421

08004c3c <__sfp_lock_release>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <__sfp_lock_release+0x8>)
 8004c3e:	f000 b92e 	b.w	8004e9e <__retarget_lock_release_recursive>
 8004c42:	bf00      	nop
 8004c44:	20000421 	.word	0x20000421

08004c48 <__sinit>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	f7ff fff0 	bl	8004c30 <__sfp_lock_acquire>
 8004c50:	6a23      	ldr	r3, [r4, #32]
 8004c52:	b11b      	cbz	r3, 8004c5c <__sinit+0x14>
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	f7ff bff0 	b.w	8004c3c <__sfp_lock_release>
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <__sinit+0x28>)
 8004c5e:	6223      	str	r3, [r4, #32]
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <__sinit+0x2c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f5      	bne.n	8004c54 <__sinit+0xc>
 8004c68:	f7ff ffc4 	bl	8004bf4 <global_stdio_init.part.0>
 8004c6c:	e7f2      	b.n	8004c54 <__sinit+0xc>
 8004c6e:	bf00      	nop
 8004c70:	08004bb5 	.word	0x08004bb5
 8004c74:	20000418 	.word	0x20000418

08004c78 <_fwalk_sglue>:
 8004c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	4688      	mov	r8, r1
 8004c80:	4614      	mov	r4, r2
 8004c82:	2600      	movs	r6, #0
 8004c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c88:	f1b9 0901 	subs.w	r9, r9, #1
 8004c8c:	d505      	bpl.n	8004c9a <_fwalk_sglue+0x22>
 8004c8e:	6824      	ldr	r4, [r4, #0]
 8004c90:	2c00      	cmp	r4, #0
 8004c92:	d1f7      	bne.n	8004c84 <_fwalk_sglue+0xc>
 8004c94:	4630      	mov	r0, r6
 8004c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9a:	89ab      	ldrh	r3, [r5, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d907      	bls.n	8004cb0 <_fwalk_sglue+0x38>
 8004ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	d003      	beq.n	8004cb0 <_fwalk_sglue+0x38>
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4638      	mov	r0, r7
 8004cac:	47c0      	blx	r8
 8004cae:	4306      	orrs	r6, r0
 8004cb0:	3568      	adds	r5, #104	; 0x68
 8004cb2:	e7e9      	b.n	8004c88 <_fwalk_sglue+0x10>

08004cb4 <sniprintf>:
 8004cb4:	b40c      	push	{r2, r3}
 8004cb6:	b530      	push	{r4, r5, lr}
 8004cb8:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <sniprintf+0x64>)
 8004cba:	1e0c      	subs	r4, r1, #0
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	b09d      	sub	sp, #116	; 0x74
 8004cc0:	da08      	bge.n	8004cd4 <sniprintf+0x20>
 8004cc2:	238b      	movs	r3, #139	; 0x8b
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	b01d      	add	sp, #116	; 0x74
 8004ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cd0:	b002      	add	sp, #8
 8004cd2:	4770      	bx	lr
 8004cd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004cd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004cdc:	bf14      	ite	ne
 8004cde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ce2:	4623      	moveq	r3, r4
 8004ce4:	9304      	str	r3, [sp, #16]
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cec:	9002      	str	r0, [sp, #8]
 8004cee:	9006      	str	r0, [sp, #24]
 8004cf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004cf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004cf6:	ab21      	add	r3, sp, #132	; 0x84
 8004cf8:	a902      	add	r1, sp, #8
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	f001 fc1f 	bl	8006540 <_svfiprintf_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	bfbc      	itt	lt
 8004d06:	238b      	movlt	r3, #139	; 0x8b
 8004d08:	602b      	strlt	r3, [r5, #0]
 8004d0a:	2c00      	cmp	r4, #0
 8004d0c:	d0dd      	beq.n	8004cca <sniprintf+0x16>
 8004d0e:	9b02      	ldr	r3, [sp, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e7d9      	b.n	8004cca <sniprintf+0x16>
 8004d16:	bf00      	nop
 8004d18:	2000008c 	.word	0x2000008c

08004d1c <__sread>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d24:	f000 f86c 	bl	8004e00 <_read_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	bfab      	itete	ge
 8004d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d30:	181b      	addge	r3, r3, r0
 8004d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d36:	bfac      	ite	ge
 8004d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d3a:	81a3      	strhlt	r3, [r4, #12]
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <__swrite>:
 8004d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	461f      	mov	r7, r3
 8004d44:	898b      	ldrh	r3, [r1, #12]
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	4605      	mov	r5, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	d505      	bpl.n	8004d5c <__swrite+0x1e>
 8004d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d54:	2302      	movs	r3, #2
 8004d56:	2200      	movs	r2, #0
 8004d58:	f000 f840 	bl	8004ddc <_lseek_r>
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	4632      	mov	r2, r6
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	f000 b857 	b.w	8004e24 <_write_r>

08004d76 <__sseek>:
 8004d76:	b510      	push	{r4, lr}
 8004d78:	460c      	mov	r4, r1
 8004d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7e:	f000 f82d 	bl	8004ddc <_lseek_r>
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	bf15      	itete	ne
 8004d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d92:	81a3      	strheq	r3, [r4, #12]
 8004d94:	bf18      	it	ne
 8004d96:	81a3      	strhne	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__sclose>:
 8004d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9e:	f000 b80d 	b.w	8004dbc <_close_r>

08004da2 <memset>:
 8004da2:	4402      	add	r2, r0
 8004da4:	4603      	mov	r3, r0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d100      	bne.n	8004dac <memset+0xa>
 8004daa:	4770      	bx	lr
 8004dac:	f803 1b01 	strb.w	r1, [r3], #1
 8004db0:	e7f9      	b.n	8004da6 <memset+0x4>
	...

08004db4 <_localeconv_r>:
 8004db4:	4800      	ldr	r0, [pc, #0]	; (8004db8 <_localeconv_r+0x4>)
 8004db6:	4770      	bx	lr
 8004db8:	20000180 	.word	0x20000180

08004dbc <_close_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_close_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fc ff1d 	bl	8001c06 <_close>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_close_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_close_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	2000041c 	.word	0x2000041c

08004ddc <_lseek_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d07      	ldr	r5, [pc, #28]	; (8004dfc <_lseek_r+0x20>)
 8004de0:	4604      	mov	r4, r0
 8004de2:	4608      	mov	r0, r1
 8004de4:	4611      	mov	r1, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f7fc ff32 	bl	8001c54 <_lseek>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_lseek_r+0x1e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_lseek_r+0x1e>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	2000041c 	.word	0x2000041c

08004e00 <_read_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	; (8004e20 <_read_r+0x20>)
 8004e04:	4604      	mov	r4, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7fc fec0 	bl	8001b94 <_read>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_read_r+0x1e>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_read_r+0x1e>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	2000041c 	.word	0x2000041c

08004e24 <_write_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	; (8004e44 <_write_r+0x20>)
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc fecb 	bl	8001bce <_write>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_write_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_write_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	2000041c 	.word	0x2000041c

08004e48 <__errno>:
 8004e48:	4b01      	ldr	r3, [pc, #4]	; (8004e50 <__errno+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2000008c 	.word	0x2000008c

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	; (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	; (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	; (8004e98 <__libc_init_array+0x44>)
 8004e68:	f002 f892 	bl	8006f90 <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	0800735c 	.word	0x0800735c
 8004e90:	0800735c 	.word	0x0800735c
 8004e94:	0800735c 	.word	0x0800735c
 8004e98:	08007360 	.word	0x08007360

08004e9c <__retarget_lock_acquire_recursive>:
 8004e9c:	4770      	bx	lr

08004e9e <__retarget_lock_release_recursive>:
 8004e9e:	4770      	bx	lr

08004ea0 <quorem>:
 8004ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	6903      	ldr	r3, [r0, #16]
 8004ea6:	690c      	ldr	r4, [r1, #16]
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	4607      	mov	r7, r0
 8004eac:	db7e      	blt.n	8004fac <quorem+0x10c>
 8004eae:	3c01      	subs	r4, #1
 8004eb0:	f101 0814 	add.w	r8, r1, #20
 8004eb4:	f100 0514 	add.w	r5, r0, #20
 8004eb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ece:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ed2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ed6:	d331      	bcc.n	8004f3c <quorem+0x9c>
 8004ed8:	f04f 0e00 	mov.w	lr, #0
 8004edc:	4640      	mov	r0, r8
 8004ede:	46ac      	mov	ip, r5
 8004ee0:	46f2      	mov	sl, lr
 8004ee2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ee6:	b293      	uxth	r3, r2
 8004ee8:	fb06 e303 	mla	r3, r6, r3, lr
 8004eec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ef0:	0c1a      	lsrs	r2, r3, #16
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ef8:	f8dc a000 	ldr.w	sl, [ip]
 8004efc:	fa13 f38a 	uxtah	r3, r3, sl
 8004f00:	fb06 220e 	mla	r2, r6, lr, r2
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f16:	f8bd 3000 	ldrh.w	r3, [sp]
 8004f1a:	4581      	cmp	r9, r0
 8004f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f20:	f84c 3b04 	str.w	r3, [ip], #4
 8004f24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f28:	d2db      	bcs.n	8004ee2 <quorem+0x42>
 8004f2a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f2e:	b92b      	cbnz	r3, 8004f3c <quorem+0x9c>
 8004f30:	9b01      	ldr	r3, [sp, #4]
 8004f32:	3b04      	subs	r3, #4
 8004f34:	429d      	cmp	r5, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	d32c      	bcc.n	8004f94 <quorem+0xf4>
 8004f3a:	613c      	str	r4, [r7, #16]
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f001 f9a5 	bl	800628c <__mcmp>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	db22      	blt.n	8004f8c <quorem+0xec>
 8004f46:	3601      	adds	r6, #1
 8004f48:	4629      	mov	r1, r5
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f50:	f8d1 c000 	ldr.w	ip, [r1]
 8004f54:	b293      	uxth	r3, r2
 8004f56:	1ac3      	subs	r3, r0, r3
 8004f58:	0c12      	lsrs	r2, r2, #16
 8004f5a:	fa13 f38c 	uxtah	r3, r3, ip
 8004f5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004f62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f6c:	45c1      	cmp	r9, r8
 8004f6e:	f841 3b04 	str.w	r3, [r1], #4
 8004f72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f76:	d2e9      	bcs.n	8004f4c <quorem+0xac>
 8004f78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f80:	b922      	cbnz	r2, 8004f8c <quorem+0xec>
 8004f82:	3b04      	subs	r3, #4
 8004f84:	429d      	cmp	r5, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	d30a      	bcc.n	8004fa0 <quorem+0x100>
 8004f8a:	613c      	str	r4, [r7, #16]
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	b003      	add	sp, #12
 8004f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	3b04      	subs	r3, #4
 8004f98:	2a00      	cmp	r2, #0
 8004f9a:	d1ce      	bne.n	8004f3a <quorem+0x9a>
 8004f9c:	3c01      	subs	r4, #1
 8004f9e:	e7c9      	b.n	8004f34 <quorem+0x94>
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d1f0      	bne.n	8004f8a <quorem+0xea>
 8004fa8:	3c01      	subs	r4, #1
 8004faa:	e7eb      	b.n	8004f84 <quorem+0xe4>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7ee      	b.n	8004f8e <quorem+0xee>

08004fb0 <_dtoa_r>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	ed2d 8b04 	vpush	{d8-d9}
 8004fb8:	69c5      	ldr	r5, [r0, #28]
 8004fba:	b093      	sub	sp, #76	; 0x4c
 8004fbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004fc0:	ec57 6b10 	vmov	r6, r7, d0
 8004fc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fc8:	9107      	str	r1, [sp, #28]
 8004fca:	4604      	mov	r4, r0
 8004fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8004fce:	930d      	str	r3, [sp, #52]	; 0x34
 8004fd0:	b975      	cbnz	r5, 8004ff0 <_dtoa_r+0x40>
 8004fd2:	2010      	movs	r0, #16
 8004fd4:	f000 fe2a 	bl	8005c2c <malloc>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	61e0      	str	r0, [r4, #28]
 8004fdc:	b920      	cbnz	r0, 8004fe8 <_dtoa_r+0x38>
 8004fde:	4bae      	ldr	r3, [pc, #696]	; (8005298 <_dtoa_r+0x2e8>)
 8004fe0:	21ef      	movs	r1, #239	; 0xef
 8004fe2:	48ae      	ldr	r0, [pc, #696]	; (800529c <_dtoa_r+0x2ec>)
 8004fe4:	f001 fc90 	bl	8006908 <__assert_func>
 8004fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fec:	6005      	str	r5, [r0, #0]
 8004fee:	60c5      	str	r5, [r0, #12]
 8004ff0:	69e3      	ldr	r3, [r4, #28]
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	b151      	cbz	r1, 800500c <_dtoa_r+0x5c>
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	604a      	str	r2, [r1, #4]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4093      	lsls	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]
 8005000:	4620      	mov	r0, r4
 8005002:	f000 ff07 	bl	8005e14 <_Bfree>
 8005006:	69e3      	ldr	r3, [r4, #28]
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	1e3b      	subs	r3, r7, #0
 800500e:	bfbb      	ittet	lt
 8005010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005014:	9303      	strlt	r3, [sp, #12]
 8005016:	2300      	movge	r3, #0
 8005018:	2201      	movlt	r2, #1
 800501a:	bfac      	ite	ge
 800501c:	f8c8 3000 	strge.w	r3, [r8]
 8005020:	f8c8 2000 	strlt.w	r2, [r8]
 8005024:	4b9e      	ldr	r3, [pc, #632]	; (80052a0 <_dtoa_r+0x2f0>)
 8005026:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800502a:	ea33 0308 	bics.w	r3, r3, r8
 800502e:	d11b      	bne.n	8005068 <_dtoa_r+0xb8>
 8005030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005032:	f242 730f 	movw	r3, #9999	; 0x270f
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800503c:	4333      	orrs	r3, r6
 800503e:	f000 8593 	beq.w	8005b68 <_dtoa_r+0xbb8>
 8005042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005044:	b963      	cbnz	r3, 8005060 <_dtoa_r+0xb0>
 8005046:	4b97      	ldr	r3, [pc, #604]	; (80052a4 <_dtoa_r+0x2f4>)
 8005048:	e027      	b.n	800509a <_dtoa_r+0xea>
 800504a:	4b97      	ldr	r3, [pc, #604]	; (80052a8 <_dtoa_r+0x2f8>)
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	9800      	ldr	r0, [sp, #0]
 8005056:	b013      	add	sp, #76	; 0x4c
 8005058:	ecbd 8b04 	vpop	{d8-d9}
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	4b90      	ldr	r3, [pc, #576]	; (80052a4 <_dtoa_r+0x2f4>)
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	3303      	adds	r3, #3
 8005066:	e7f3      	b.n	8005050 <_dtoa_r+0xa0>
 8005068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	ec51 0b17 	vmov	r0, r1, d7
 8005072:	eeb0 8a47 	vmov.f32	s16, s14
 8005076:	eef0 8a67 	vmov.f32	s17, s15
 800507a:	2300      	movs	r3, #0
 800507c:	f7fb fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005080:	4681      	mov	r9, r0
 8005082:	b160      	cbz	r0, 800509e <_dtoa_r+0xee>
 8005084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005086:	2301      	movs	r3, #1
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8568 	beq.w	8005b62 <_dtoa_r+0xbb2>
 8005092:	4b86      	ldr	r3, [pc, #536]	; (80052ac <_dtoa_r+0x2fc>)
 8005094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	3b01      	subs	r3, #1
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	e7da      	b.n	8005054 <_dtoa_r+0xa4>
 800509e:	aa10      	add	r2, sp, #64	; 0x40
 80050a0:	a911      	add	r1, sp, #68	; 0x44
 80050a2:	4620      	mov	r0, r4
 80050a4:	eeb0 0a48 	vmov.f32	s0, s16
 80050a8:	eef0 0a68 	vmov.f32	s1, s17
 80050ac:	f001 f994 	bl	80063d8 <__d2b>
 80050b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80050b4:	4682      	mov	sl, r0
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d07f      	beq.n	80051ba <_dtoa_r+0x20a>
 80050ba:	ee18 3a90 	vmov	r3, s17
 80050be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80050c6:	ec51 0b18 	vmov	r0, r1, d8
 80050ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80050d6:	4619      	mov	r1, r3
 80050d8:	2200      	movs	r2, #0
 80050da:	4b75      	ldr	r3, [pc, #468]	; (80052b0 <_dtoa_r+0x300>)
 80050dc:	f7fb f8dc 	bl	8000298 <__aeabi_dsub>
 80050e0:	a367      	add	r3, pc, #412	; (adr r3, 8005280 <_dtoa_r+0x2d0>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb fa8f 	bl	8000608 <__aeabi_dmul>
 80050ea:	a367      	add	r3, pc, #412	; (adr r3, 8005288 <_dtoa_r+0x2d8>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb f8d4 	bl	800029c <__adddf3>
 80050f4:	4606      	mov	r6, r0
 80050f6:	4628      	mov	r0, r5
 80050f8:	460f      	mov	r7, r1
 80050fa:	f7fb fa1b 	bl	8000534 <__aeabi_i2d>
 80050fe:	a364      	add	r3, pc, #400	; (adr r3, 8005290 <_dtoa_r+0x2e0>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb fa80 	bl	8000608 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	f7fb f8c4 	bl	800029c <__adddf3>
 8005114:	4606      	mov	r6, r0
 8005116:	460f      	mov	r7, r1
 8005118:	f7fb fd26 	bl	8000b68 <__aeabi_d2iz>
 800511c:	2200      	movs	r2, #0
 800511e:	4683      	mov	fp, r0
 8005120:	2300      	movs	r3, #0
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	f7fb fce1 	bl	8000aec <__aeabi_dcmplt>
 800512a:	b148      	cbz	r0, 8005140 <_dtoa_r+0x190>
 800512c:	4658      	mov	r0, fp
 800512e:	f7fb fa01 	bl	8000534 <__aeabi_i2d>
 8005132:	4632      	mov	r2, r6
 8005134:	463b      	mov	r3, r7
 8005136:	f7fb fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800513a:	b908      	cbnz	r0, 8005140 <_dtoa_r+0x190>
 800513c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005140:	f1bb 0f16 	cmp.w	fp, #22
 8005144:	d857      	bhi.n	80051f6 <_dtoa_r+0x246>
 8005146:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <_dtoa_r+0x304>)
 8005148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	ec51 0b18 	vmov	r0, r1, d8
 8005154:	f7fb fcca 	bl	8000aec <__aeabi_dcmplt>
 8005158:	2800      	cmp	r0, #0
 800515a:	d04e      	beq.n	80051fa <_dtoa_r+0x24a>
 800515c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005160:	2300      	movs	r3, #0
 8005162:	930c      	str	r3, [sp, #48]	; 0x30
 8005164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005166:	1b5b      	subs	r3, r3, r5
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	bf45      	ittet	mi
 800516c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005170:	9305      	strmi	r3, [sp, #20]
 8005172:	2300      	movpl	r3, #0
 8005174:	2300      	movmi	r3, #0
 8005176:	9206      	str	r2, [sp, #24]
 8005178:	bf54      	ite	pl
 800517a:	9305      	strpl	r3, [sp, #20]
 800517c:	9306      	strmi	r3, [sp, #24]
 800517e:	f1bb 0f00 	cmp.w	fp, #0
 8005182:	db3c      	blt.n	80051fe <_dtoa_r+0x24e>
 8005184:	9b06      	ldr	r3, [sp, #24]
 8005186:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800518a:	445b      	add	r3, fp
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	2300      	movs	r3, #0
 8005190:	9308      	str	r3, [sp, #32]
 8005192:	9b07      	ldr	r3, [sp, #28]
 8005194:	2b09      	cmp	r3, #9
 8005196:	d868      	bhi.n	800526a <_dtoa_r+0x2ba>
 8005198:	2b05      	cmp	r3, #5
 800519a:	bfc4      	itt	gt
 800519c:	3b04      	subgt	r3, #4
 800519e:	9307      	strgt	r3, [sp, #28]
 80051a0:	9b07      	ldr	r3, [sp, #28]
 80051a2:	f1a3 0302 	sub.w	r3, r3, #2
 80051a6:	bfcc      	ite	gt
 80051a8:	2500      	movgt	r5, #0
 80051aa:	2501      	movle	r5, #1
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	f200 8085 	bhi.w	80052bc <_dtoa_r+0x30c>
 80051b2:	e8df f003 	tbb	[pc, r3]
 80051b6:	3b2e      	.short	0x3b2e
 80051b8:	5839      	.short	0x5839
 80051ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051be:	441d      	add	r5, r3
 80051c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	bfc1      	itttt	gt
 80051c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80051d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80051d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80051d8:	bfd6      	itet	le
 80051da:	f1c3 0320 	rsble	r3, r3, #32
 80051de:	ea48 0003 	orrgt.w	r0, r8, r3
 80051e2:	fa06 f003 	lslle.w	r0, r6, r3
 80051e6:	f7fb f995 	bl	8000514 <__aeabi_ui2d>
 80051ea:	2201      	movs	r2, #1
 80051ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80051f0:	3d01      	subs	r5, #1
 80051f2:	920e      	str	r2, [sp, #56]	; 0x38
 80051f4:	e76f      	b.n	80050d6 <_dtoa_r+0x126>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e7b3      	b.n	8005162 <_dtoa_r+0x1b2>
 80051fa:	900c      	str	r0, [sp, #48]	; 0x30
 80051fc:	e7b2      	b.n	8005164 <_dtoa_r+0x1b4>
 80051fe:	9b05      	ldr	r3, [sp, #20]
 8005200:	eba3 030b 	sub.w	r3, r3, fp
 8005204:	9305      	str	r3, [sp, #20]
 8005206:	f1cb 0300 	rsb	r3, fp, #0
 800520a:	9308      	str	r3, [sp, #32]
 800520c:	2300      	movs	r3, #0
 800520e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005210:	e7bf      	b.n	8005192 <_dtoa_r+0x1e2>
 8005212:	2300      	movs	r3, #0
 8005214:	9309      	str	r3, [sp, #36]	; 0x24
 8005216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	dc52      	bgt.n	80052c2 <_dtoa_r+0x312>
 800521c:	2301      	movs	r3, #1
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	461a      	mov	r2, r3
 8005224:	920a      	str	r2, [sp, #40]	; 0x28
 8005226:	e00b      	b.n	8005240 <_dtoa_r+0x290>
 8005228:	2301      	movs	r3, #1
 800522a:	e7f3      	b.n	8005214 <_dtoa_r+0x264>
 800522c:	2300      	movs	r3, #0
 800522e:	9309      	str	r3, [sp, #36]	; 0x24
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	445b      	add	r3, fp
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	bfb8      	it	lt
 800523e:	2301      	movlt	r3, #1
 8005240:	69e0      	ldr	r0, [r4, #28]
 8005242:	2100      	movs	r1, #0
 8005244:	2204      	movs	r2, #4
 8005246:	f102 0614 	add.w	r6, r2, #20
 800524a:	429e      	cmp	r6, r3
 800524c:	d93d      	bls.n	80052ca <_dtoa_r+0x31a>
 800524e:	6041      	str	r1, [r0, #4]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fd9f 	bl	8005d94 <_Balloc>
 8005256:	9000      	str	r0, [sp, #0]
 8005258:	2800      	cmp	r0, #0
 800525a:	d139      	bne.n	80052d0 <_dtoa_r+0x320>
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <_dtoa_r+0x308>)
 800525e:	4602      	mov	r2, r0
 8005260:	f240 11af 	movw	r1, #431	; 0x1af
 8005264:	e6bd      	b.n	8004fe2 <_dtoa_r+0x32>
 8005266:	2301      	movs	r3, #1
 8005268:	e7e1      	b.n	800522e <_dtoa_r+0x27e>
 800526a:	2501      	movs	r5, #1
 800526c:	2300      	movs	r3, #0
 800526e:	9307      	str	r3, [sp, #28]
 8005270:	9509      	str	r5, [sp, #36]	; 0x24
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	2200      	movs	r2, #0
 800527c:	2312      	movs	r3, #18
 800527e:	e7d1      	b.n	8005224 <_dtoa_r+0x274>
 8005280:	636f4361 	.word	0x636f4361
 8005284:	3fd287a7 	.word	0x3fd287a7
 8005288:	8b60c8b3 	.word	0x8b60c8b3
 800528c:	3fc68a28 	.word	0x3fc68a28
 8005290:	509f79fb 	.word	0x509f79fb
 8005294:	3fd34413 	.word	0x3fd34413
 8005298:	08007021 	.word	0x08007021
 800529c:	08007038 	.word	0x08007038
 80052a0:	7ff00000 	.word	0x7ff00000
 80052a4:	0800701d 	.word	0x0800701d
 80052a8:	08007014 	.word	0x08007014
 80052ac:	08006ff1 	.word	0x08006ff1
 80052b0:	3ff80000 	.word	0x3ff80000
 80052b4:	08007128 	.word	0x08007128
 80052b8:	08007090 	.word	0x08007090
 80052bc:	2301      	movs	r3, #1
 80052be:	9309      	str	r3, [sp, #36]	; 0x24
 80052c0:	e7d7      	b.n	8005272 <_dtoa_r+0x2c2>
 80052c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	e7ba      	b.n	8005240 <_dtoa_r+0x290>
 80052ca:	3101      	adds	r1, #1
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	e7ba      	b.n	8005246 <_dtoa_r+0x296>
 80052d0:	69e3      	ldr	r3, [r4, #28]
 80052d2:	9a00      	ldr	r2, [sp, #0]
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	2b0e      	cmp	r3, #14
 80052da:	f200 80a8 	bhi.w	800542e <_dtoa_r+0x47e>
 80052de:	2d00      	cmp	r5, #0
 80052e0:	f000 80a5 	beq.w	800542e <_dtoa_r+0x47e>
 80052e4:	f1bb 0f00 	cmp.w	fp, #0
 80052e8:	dd38      	ble.n	800535c <_dtoa_r+0x3ac>
 80052ea:	4bc0      	ldr	r3, [pc, #768]	; (80055ec <_dtoa_r+0x63c>)
 80052ec:	f00b 020f 	and.w	r2, fp, #15
 80052f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80052f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005300:	d019      	beq.n	8005336 <_dtoa_r+0x386>
 8005302:	4bbb      	ldr	r3, [pc, #748]	; (80055f0 <_dtoa_r+0x640>)
 8005304:	ec51 0b18 	vmov	r0, r1, d8
 8005308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800530c:	f7fb faa6 	bl	800085c <__aeabi_ddiv>
 8005310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005314:	f008 080f 	and.w	r8, r8, #15
 8005318:	2503      	movs	r5, #3
 800531a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80055f0 <_dtoa_r+0x640>
 800531e:	f1b8 0f00 	cmp.w	r8, #0
 8005322:	d10a      	bne.n	800533a <_dtoa_r+0x38a>
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	4632      	mov	r2, r6
 800532a:	463b      	mov	r3, r7
 800532c:	f7fb fa96 	bl	800085c <__aeabi_ddiv>
 8005330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005334:	e02b      	b.n	800538e <_dtoa_r+0x3de>
 8005336:	2502      	movs	r5, #2
 8005338:	e7ef      	b.n	800531a <_dtoa_r+0x36a>
 800533a:	f018 0f01 	tst.w	r8, #1
 800533e:	d008      	beq.n	8005352 <_dtoa_r+0x3a2>
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005348:	f7fb f95e 	bl	8000608 <__aeabi_dmul>
 800534c:	3501      	adds	r5, #1
 800534e:	4606      	mov	r6, r0
 8005350:	460f      	mov	r7, r1
 8005352:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005356:	f109 0908 	add.w	r9, r9, #8
 800535a:	e7e0      	b.n	800531e <_dtoa_r+0x36e>
 800535c:	f000 809f 	beq.w	800549e <_dtoa_r+0x4ee>
 8005360:	f1cb 0600 	rsb	r6, fp, #0
 8005364:	4ba1      	ldr	r3, [pc, #644]	; (80055ec <_dtoa_r+0x63c>)
 8005366:	4fa2      	ldr	r7, [pc, #648]	; (80055f0 <_dtoa_r+0x640>)
 8005368:	f006 020f 	and.w	r2, r6, #15
 800536c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	ec51 0b18 	vmov	r0, r1, d8
 8005378:	f7fb f946 	bl	8000608 <__aeabi_dmul>
 800537c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005380:	1136      	asrs	r6, r6, #4
 8005382:	2300      	movs	r3, #0
 8005384:	2502      	movs	r5, #2
 8005386:	2e00      	cmp	r6, #0
 8005388:	d17e      	bne.n	8005488 <_dtoa_r+0x4d8>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1d0      	bne.n	8005330 <_dtoa_r+0x380>
 800538e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005390:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8084 	beq.w	80054a2 <_dtoa_r+0x4f2>
 800539a:	4b96      	ldr	r3, [pc, #600]	; (80055f4 <_dtoa_r+0x644>)
 800539c:	2200      	movs	r2, #0
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fb fba3 	bl	8000aec <__aeabi_dcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d07b      	beq.n	80054a2 <_dtoa_r+0x4f2>
 80053aa:	9b04      	ldr	r3, [sp, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d078      	beq.n	80054a2 <_dtoa_r+0x4f2>
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dd39      	ble.n	800542a <_dtoa_r+0x47a>
 80053b6:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <_dtoa_r+0x648>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	4640      	mov	r0, r8
 80053bc:	4649      	mov	r1, r9
 80053be:	f7fb f923 	bl	8000608 <__aeabi_dmul>
 80053c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c6:	9e01      	ldr	r6, [sp, #4]
 80053c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80053cc:	3501      	adds	r5, #1
 80053ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053d2:	4628      	mov	r0, r5
 80053d4:	f7fb f8ae 	bl	8000534 <__aeabi_i2d>
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	f7fb f914 	bl	8000608 <__aeabi_dmul>
 80053e0:	4b86      	ldr	r3, [pc, #536]	; (80055fc <_dtoa_r+0x64c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	f7fa ff5a 	bl	800029c <__adddf3>
 80053e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80053ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	d158      	bne.n	80054a8 <_dtoa_r+0x4f8>
 80053f6:	4b82      	ldr	r3, [pc, #520]	; (8005600 <_dtoa_r+0x650>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fa ff4b 	bl	8000298 <__aeabi_dsub>
 8005402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005406:	4680      	mov	r8, r0
 8005408:	4689      	mov	r9, r1
 800540a:	f7fb fb8d 	bl	8000b28 <__aeabi_dcmpgt>
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 8296 	bne.w	8005940 <_dtoa_r+0x990>
 8005414:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005418:	4640      	mov	r0, r8
 800541a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800541e:	4649      	mov	r1, r9
 8005420:	f7fb fb64 	bl	8000aec <__aeabi_dcmplt>
 8005424:	2800      	cmp	r0, #0
 8005426:	f040 8289 	bne.w	800593c <_dtoa_r+0x98c>
 800542a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800542e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005430:	2b00      	cmp	r3, #0
 8005432:	f2c0 814e 	blt.w	80056d2 <_dtoa_r+0x722>
 8005436:	f1bb 0f0e 	cmp.w	fp, #14
 800543a:	f300 814a 	bgt.w	80056d2 <_dtoa_r+0x722>
 800543e:	4b6b      	ldr	r3, [pc, #428]	; (80055ec <_dtoa_r+0x63c>)
 8005440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	f280 80dc 	bge.w	8005608 <_dtoa_r+0x658>
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f300 80d8 	bgt.w	8005608 <_dtoa_r+0x658>
 8005458:	f040 826f 	bne.w	800593a <_dtoa_r+0x98a>
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <_dtoa_r+0x650>)
 800545e:	2200      	movs	r2, #0
 8005460:	4640      	mov	r0, r8
 8005462:	4649      	mov	r1, r9
 8005464:	f7fb f8d0 	bl	8000608 <__aeabi_dmul>
 8005468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800546c:	f7fb fb52 	bl	8000b14 <__aeabi_dcmpge>
 8005470:	9e04      	ldr	r6, [sp, #16]
 8005472:	4637      	mov	r7, r6
 8005474:	2800      	cmp	r0, #0
 8005476:	f040 8245 	bne.w	8005904 <_dtoa_r+0x954>
 800547a:	9d00      	ldr	r5, [sp, #0]
 800547c:	2331      	movs	r3, #49	; 0x31
 800547e:	f805 3b01 	strb.w	r3, [r5], #1
 8005482:	f10b 0b01 	add.w	fp, fp, #1
 8005486:	e241      	b.n	800590c <_dtoa_r+0x95c>
 8005488:	07f2      	lsls	r2, r6, #31
 800548a:	d505      	bpl.n	8005498 <_dtoa_r+0x4e8>
 800548c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005490:	f7fb f8ba 	bl	8000608 <__aeabi_dmul>
 8005494:	3501      	adds	r5, #1
 8005496:	2301      	movs	r3, #1
 8005498:	1076      	asrs	r6, r6, #1
 800549a:	3708      	adds	r7, #8
 800549c:	e773      	b.n	8005386 <_dtoa_r+0x3d6>
 800549e:	2502      	movs	r5, #2
 80054a0:	e775      	b.n	800538e <_dtoa_r+0x3de>
 80054a2:	9e04      	ldr	r6, [sp, #16]
 80054a4:	465f      	mov	r7, fp
 80054a6:	e792      	b.n	80053ce <_dtoa_r+0x41e>
 80054a8:	9900      	ldr	r1, [sp, #0]
 80054aa:	4b50      	ldr	r3, [pc, #320]	; (80055ec <_dtoa_r+0x63c>)
 80054ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054b0:	4431      	add	r1, r6
 80054b2:	9102      	str	r1, [sp, #8]
 80054b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054b6:	eeb0 9a47 	vmov.f32	s18, s14
 80054ba:	eef0 9a67 	vmov.f32	s19, s15
 80054be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054c6:	2900      	cmp	r1, #0
 80054c8:	d044      	beq.n	8005554 <_dtoa_r+0x5a4>
 80054ca:	494e      	ldr	r1, [pc, #312]	; (8005604 <_dtoa_r+0x654>)
 80054cc:	2000      	movs	r0, #0
 80054ce:	f7fb f9c5 	bl	800085c <__aeabi_ddiv>
 80054d2:	ec53 2b19 	vmov	r2, r3, d9
 80054d6:	f7fa fedf 	bl	8000298 <__aeabi_dsub>
 80054da:	9d00      	ldr	r5, [sp, #0]
 80054dc:	ec41 0b19 	vmov	d9, r0, r1
 80054e0:	4649      	mov	r1, r9
 80054e2:	4640      	mov	r0, r8
 80054e4:	f7fb fb40 	bl	8000b68 <__aeabi_d2iz>
 80054e8:	4606      	mov	r6, r0
 80054ea:	f7fb f823 	bl	8000534 <__aeabi_i2d>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4640      	mov	r0, r8
 80054f4:	4649      	mov	r1, r9
 80054f6:	f7fa fecf 	bl	8000298 <__aeabi_dsub>
 80054fa:	3630      	adds	r6, #48	; 0x30
 80054fc:	f805 6b01 	strb.w	r6, [r5], #1
 8005500:	ec53 2b19 	vmov	r2, r3, d9
 8005504:	4680      	mov	r8, r0
 8005506:	4689      	mov	r9, r1
 8005508:	f7fb faf0 	bl	8000aec <__aeabi_dcmplt>
 800550c:	2800      	cmp	r0, #0
 800550e:	d164      	bne.n	80055da <_dtoa_r+0x62a>
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	4937      	ldr	r1, [pc, #220]	; (80055f4 <_dtoa_r+0x644>)
 8005516:	2000      	movs	r0, #0
 8005518:	f7fa febe 	bl	8000298 <__aeabi_dsub>
 800551c:	ec53 2b19 	vmov	r2, r3, d9
 8005520:	f7fb fae4 	bl	8000aec <__aeabi_dcmplt>
 8005524:	2800      	cmp	r0, #0
 8005526:	f040 80b6 	bne.w	8005696 <_dtoa_r+0x6e6>
 800552a:	9b02      	ldr	r3, [sp, #8]
 800552c:	429d      	cmp	r5, r3
 800552e:	f43f af7c 	beq.w	800542a <_dtoa_r+0x47a>
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <_dtoa_r+0x648>)
 8005534:	ec51 0b19 	vmov	r0, r1, d9
 8005538:	2200      	movs	r2, #0
 800553a:	f7fb f865 	bl	8000608 <__aeabi_dmul>
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <_dtoa_r+0x648>)
 8005540:	ec41 0b19 	vmov	d9, r0, r1
 8005544:	2200      	movs	r2, #0
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fb f85d 	bl	8000608 <__aeabi_dmul>
 800554e:	4680      	mov	r8, r0
 8005550:	4689      	mov	r9, r1
 8005552:	e7c5      	b.n	80054e0 <_dtoa_r+0x530>
 8005554:	ec51 0b17 	vmov	r0, r1, d7
 8005558:	f7fb f856 	bl	8000608 <__aeabi_dmul>
 800555c:	9b02      	ldr	r3, [sp, #8]
 800555e:	9d00      	ldr	r5, [sp, #0]
 8005560:	930f      	str	r3, [sp, #60]	; 0x3c
 8005562:	ec41 0b19 	vmov	d9, r0, r1
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	f7fb fafd 	bl	8000b68 <__aeabi_d2iz>
 800556e:	4606      	mov	r6, r0
 8005570:	f7fa ffe0 	bl	8000534 <__aeabi_i2d>
 8005574:	3630      	adds	r6, #48	; 0x30
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fa fe8b 	bl	8000298 <__aeabi_dsub>
 8005582:	f805 6b01 	strb.w	r6, [r5], #1
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	429d      	cmp	r5, r3
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	d124      	bne.n	80055de <_dtoa_r+0x62e>
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <_dtoa_r+0x654>)
 8005596:	ec51 0b19 	vmov	r0, r1, d9
 800559a:	f7fa fe7f 	bl	800029c <__adddf3>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	f7fb fabf 	bl	8000b28 <__aeabi_dcmpgt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d173      	bne.n	8005696 <_dtoa_r+0x6e6>
 80055ae:	ec53 2b19 	vmov	r2, r3, d9
 80055b2:	4914      	ldr	r1, [pc, #80]	; (8005604 <_dtoa_r+0x654>)
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fa fe6f 	bl	8000298 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4640      	mov	r0, r8
 80055c0:	4649      	mov	r1, r9
 80055c2:	f7fb fa93 	bl	8000aec <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f43f af2f 	beq.w	800542a <_dtoa_r+0x47a>
 80055cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055ce:	1e6b      	subs	r3, r5, #1
 80055d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d0f8      	beq.n	80055cc <_dtoa_r+0x61c>
 80055da:	46bb      	mov	fp, r7
 80055dc:	e04a      	b.n	8005674 <_dtoa_r+0x6c4>
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <_dtoa_r+0x648>)
 80055e0:	f7fb f812 	bl	8000608 <__aeabi_dmul>
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	e7bd      	b.n	8005566 <_dtoa_r+0x5b6>
 80055ea:	bf00      	nop
 80055ec:	08007128 	.word	0x08007128
 80055f0:	08007100 	.word	0x08007100
 80055f4:	3ff00000 	.word	0x3ff00000
 80055f8:	40240000 	.word	0x40240000
 80055fc:	401c0000 	.word	0x401c0000
 8005600:	40140000 	.word	0x40140000
 8005604:	3fe00000 	.word	0x3fe00000
 8005608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800560c:	9d00      	ldr	r5, [sp, #0]
 800560e:	4642      	mov	r2, r8
 8005610:	464b      	mov	r3, r9
 8005612:	4630      	mov	r0, r6
 8005614:	4639      	mov	r1, r7
 8005616:	f7fb f921 	bl	800085c <__aeabi_ddiv>
 800561a:	f7fb faa5 	bl	8000b68 <__aeabi_d2iz>
 800561e:	9001      	str	r0, [sp, #4]
 8005620:	f7fa ff88 	bl	8000534 <__aeabi_i2d>
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	f7fa ffee 	bl	8000608 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa fe30 	bl	8000298 <__aeabi_dsub>
 8005638:	9e01      	ldr	r6, [sp, #4]
 800563a:	9f04      	ldr	r7, [sp, #16]
 800563c:	3630      	adds	r6, #48	; 0x30
 800563e:	f805 6b01 	strb.w	r6, [r5], #1
 8005642:	9e00      	ldr	r6, [sp, #0]
 8005644:	1bae      	subs	r6, r5, r6
 8005646:	42b7      	cmp	r7, r6
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	d134      	bne.n	80056b8 <_dtoa_r+0x708>
 800564e:	f7fa fe25 	bl	800029c <__adddf3>
 8005652:	4642      	mov	r2, r8
 8005654:	464b      	mov	r3, r9
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	f7fb fa65 	bl	8000b28 <__aeabi_dcmpgt>
 800565e:	b9c8      	cbnz	r0, 8005694 <_dtoa_r+0x6e4>
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	4630      	mov	r0, r6
 8005666:	4639      	mov	r1, r7
 8005668:	f7fb fa36 	bl	8000ad8 <__aeabi_dcmpeq>
 800566c:	b110      	cbz	r0, 8005674 <_dtoa_r+0x6c4>
 800566e:	9b01      	ldr	r3, [sp, #4]
 8005670:	07db      	lsls	r3, r3, #31
 8005672:	d40f      	bmi.n	8005694 <_dtoa_r+0x6e4>
 8005674:	4651      	mov	r1, sl
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fbcc 	bl	8005e14 <_Bfree>
 800567c:	2300      	movs	r3, #0
 800567e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005680:	702b      	strb	r3, [r5, #0]
 8005682:	f10b 0301 	add.w	r3, fp, #1
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800568a:	2b00      	cmp	r3, #0
 800568c:	f43f ace2 	beq.w	8005054 <_dtoa_r+0xa4>
 8005690:	601d      	str	r5, [r3, #0]
 8005692:	e4df      	b.n	8005054 <_dtoa_r+0xa4>
 8005694:	465f      	mov	r7, fp
 8005696:	462b      	mov	r3, r5
 8005698:	461d      	mov	r5, r3
 800569a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800569e:	2a39      	cmp	r2, #57	; 0x39
 80056a0:	d106      	bne.n	80056b0 <_dtoa_r+0x700>
 80056a2:	9a00      	ldr	r2, [sp, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d1f7      	bne.n	8005698 <_dtoa_r+0x6e8>
 80056a8:	9900      	ldr	r1, [sp, #0]
 80056aa:	2230      	movs	r2, #48	; 0x30
 80056ac:	3701      	adds	r7, #1
 80056ae:	700a      	strb	r2, [r1, #0]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	3201      	adds	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e790      	b.n	80055da <_dtoa_r+0x62a>
 80056b8:	4ba3      	ldr	r3, [pc, #652]	; (8005948 <_dtoa_r+0x998>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	f7fa ffa4 	bl	8000608 <__aeabi_dmul>
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	f7fb fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d09e      	beq.n	800560e <_dtoa_r+0x65e>
 80056d0:	e7d0      	b.n	8005674 <_dtoa_r+0x6c4>
 80056d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	f000 80ca 	beq.w	800586e <_dtoa_r+0x8be>
 80056da:	9a07      	ldr	r2, [sp, #28]
 80056dc:	2a01      	cmp	r2, #1
 80056de:	f300 80ad 	bgt.w	800583c <_dtoa_r+0x88c>
 80056e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	f000 80a5 	beq.w	8005834 <_dtoa_r+0x884>
 80056ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056ee:	9e08      	ldr	r6, [sp, #32]
 80056f0:	9d05      	ldr	r5, [sp, #20]
 80056f2:	9a05      	ldr	r2, [sp, #20]
 80056f4:	441a      	add	r2, r3
 80056f6:	9205      	str	r2, [sp, #20]
 80056f8:	9a06      	ldr	r2, [sp, #24]
 80056fa:	2101      	movs	r1, #1
 80056fc:	441a      	add	r2, r3
 80056fe:	4620      	mov	r0, r4
 8005700:	9206      	str	r2, [sp, #24]
 8005702:	f000 fc3d 	bl	8005f80 <__i2b>
 8005706:	4607      	mov	r7, r0
 8005708:	b165      	cbz	r5, 8005724 <_dtoa_r+0x774>
 800570a:	9b06      	ldr	r3, [sp, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dd09      	ble.n	8005724 <_dtoa_r+0x774>
 8005710:	42ab      	cmp	r3, r5
 8005712:	9a05      	ldr	r2, [sp, #20]
 8005714:	bfa8      	it	ge
 8005716:	462b      	movge	r3, r5
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	9205      	str	r2, [sp, #20]
 800571c:	9a06      	ldr	r2, [sp, #24]
 800571e:	1aed      	subs	r5, r5, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	9306      	str	r3, [sp, #24]
 8005724:	9b08      	ldr	r3, [sp, #32]
 8005726:	b1f3      	cbz	r3, 8005766 <_dtoa_r+0x7b6>
 8005728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80a3 	beq.w	8005876 <_dtoa_r+0x8c6>
 8005730:	2e00      	cmp	r6, #0
 8005732:	dd10      	ble.n	8005756 <_dtoa_r+0x7a6>
 8005734:	4639      	mov	r1, r7
 8005736:	4632      	mov	r2, r6
 8005738:	4620      	mov	r0, r4
 800573a:	f000 fce1 	bl	8006100 <__pow5mult>
 800573e:	4652      	mov	r2, sl
 8005740:	4601      	mov	r1, r0
 8005742:	4607      	mov	r7, r0
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fc31 	bl	8005fac <__multiply>
 800574a:	4651      	mov	r1, sl
 800574c:	4680      	mov	r8, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fb60 	bl	8005e14 <_Bfree>
 8005754:	46c2      	mov	sl, r8
 8005756:	9b08      	ldr	r3, [sp, #32]
 8005758:	1b9a      	subs	r2, r3, r6
 800575a:	d004      	beq.n	8005766 <_dtoa_r+0x7b6>
 800575c:	4651      	mov	r1, sl
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fcce 	bl	8006100 <__pow5mult>
 8005764:	4682      	mov	sl, r0
 8005766:	2101      	movs	r1, #1
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fc09 	bl	8005f80 <__i2b>
 800576e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	4606      	mov	r6, r0
 8005774:	f340 8081 	ble.w	800587a <_dtoa_r+0x8ca>
 8005778:	461a      	mov	r2, r3
 800577a:	4601      	mov	r1, r0
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fcbf 	bl	8006100 <__pow5mult>
 8005782:	9b07      	ldr	r3, [sp, #28]
 8005784:	2b01      	cmp	r3, #1
 8005786:	4606      	mov	r6, r0
 8005788:	dd7a      	ble.n	8005880 <_dtoa_r+0x8d0>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	6933      	ldr	r3, [r6, #16]
 8005790:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005794:	6918      	ldr	r0, [r3, #16]
 8005796:	f000 fba5 	bl	8005ee4 <__hi0bits>
 800579a:	f1c0 0020 	rsb	r0, r0, #32
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	4418      	add	r0, r3
 80057a2:	f010 001f 	ands.w	r0, r0, #31
 80057a6:	f000 8094 	beq.w	80058d2 <_dtoa_r+0x922>
 80057aa:	f1c0 0320 	rsb	r3, r0, #32
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	f340 8085 	ble.w	80058be <_dtoa_r+0x90e>
 80057b4:	9b05      	ldr	r3, [sp, #20]
 80057b6:	f1c0 001c 	rsb	r0, r0, #28
 80057ba:	4403      	add	r3, r0
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	4403      	add	r3, r0
 80057c2:	4405      	add	r5, r0
 80057c4:	9306      	str	r3, [sp, #24]
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dd05      	ble.n	80057d8 <_dtoa_r+0x828>
 80057cc:	4651      	mov	r1, sl
 80057ce:	461a      	mov	r2, r3
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fcef 	bl	80061b4 <__lshift>
 80057d6:	4682      	mov	sl, r0
 80057d8:	9b06      	ldr	r3, [sp, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dd05      	ble.n	80057ea <_dtoa_r+0x83a>
 80057de:	4631      	mov	r1, r6
 80057e0:	461a      	mov	r2, r3
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fce6 	bl	80061b4 <__lshift>
 80057e8:	4606      	mov	r6, r0
 80057ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d072      	beq.n	80058d6 <_dtoa_r+0x926>
 80057f0:	4631      	mov	r1, r6
 80057f2:	4650      	mov	r0, sl
 80057f4:	f000 fd4a 	bl	800628c <__mcmp>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	da6c      	bge.n	80058d6 <_dtoa_r+0x926>
 80057fc:	2300      	movs	r3, #0
 80057fe:	4651      	mov	r1, sl
 8005800:	220a      	movs	r2, #10
 8005802:	4620      	mov	r0, r4
 8005804:	f000 fb28 	bl	8005e58 <__multadd>
 8005808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800580e:	4682      	mov	sl, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 81b0 	beq.w	8005b76 <_dtoa_r+0xbc6>
 8005816:	2300      	movs	r3, #0
 8005818:	4639      	mov	r1, r7
 800581a:	220a      	movs	r2, #10
 800581c:	4620      	mov	r0, r4
 800581e:	f000 fb1b 	bl	8005e58 <__multadd>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	4607      	mov	r7, r0
 8005828:	f300 8096 	bgt.w	8005958 <_dtoa_r+0x9a8>
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	2b02      	cmp	r3, #2
 8005830:	dc59      	bgt.n	80058e6 <_dtoa_r+0x936>
 8005832:	e091      	b.n	8005958 <_dtoa_r+0x9a8>
 8005834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800583a:	e758      	b.n	80056ee <_dtoa_r+0x73e>
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	1e5e      	subs	r6, r3, #1
 8005840:	9b08      	ldr	r3, [sp, #32]
 8005842:	42b3      	cmp	r3, r6
 8005844:	bfbf      	itttt	lt
 8005846:	9b08      	ldrlt	r3, [sp, #32]
 8005848:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800584a:	9608      	strlt	r6, [sp, #32]
 800584c:	1af3      	sublt	r3, r6, r3
 800584e:	bfb4      	ite	lt
 8005850:	18d2      	addlt	r2, r2, r3
 8005852:	1b9e      	subge	r6, r3, r6
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	bfbc      	itt	lt
 8005858:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800585a:	2600      	movlt	r6, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	bfb7      	itett	lt
 8005860:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005864:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005868:	1a9d      	sublt	r5, r3, r2
 800586a:	2300      	movlt	r3, #0
 800586c:	e741      	b.n	80056f2 <_dtoa_r+0x742>
 800586e:	9e08      	ldr	r6, [sp, #32]
 8005870:	9d05      	ldr	r5, [sp, #20]
 8005872:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005874:	e748      	b.n	8005708 <_dtoa_r+0x758>
 8005876:	9a08      	ldr	r2, [sp, #32]
 8005878:	e770      	b.n	800575c <_dtoa_r+0x7ac>
 800587a:	9b07      	ldr	r3, [sp, #28]
 800587c:	2b01      	cmp	r3, #1
 800587e:	dc19      	bgt.n	80058b4 <_dtoa_r+0x904>
 8005880:	9b02      	ldr	r3, [sp, #8]
 8005882:	b9bb      	cbnz	r3, 80058b4 <_dtoa_r+0x904>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800588a:	b99b      	cbnz	r3, 80058b4 <_dtoa_r+0x904>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005892:	0d1b      	lsrs	r3, r3, #20
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	b183      	cbz	r3, 80058ba <_dtoa_r+0x90a>
 8005898:	9b05      	ldr	r3, [sp, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	9b06      	ldr	r3, [sp, #24]
 80058a0:	3301      	adds	r3, #1
 80058a2:	9306      	str	r3, [sp, #24]
 80058a4:	f04f 0801 	mov.w	r8, #1
 80058a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f47f af6f 	bne.w	800578e <_dtoa_r+0x7de>
 80058b0:	2001      	movs	r0, #1
 80058b2:	e774      	b.n	800579e <_dtoa_r+0x7ee>
 80058b4:	f04f 0800 	mov.w	r8, #0
 80058b8:	e7f6      	b.n	80058a8 <_dtoa_r+0x8f8>
 80058ba:	4698      	mov	r8, r3
 80058bc:	e7f4      	b.n	80058a8 <_dtoa_r+0x8f8>
 80058be:	d082      	beq.n	80057c6 <_dtoa_r+0x816>
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	331c      	adds	r3, #28
 80058c4:	441a      	add	r2, r3
 80058c6:	9205      	str	r2, [sp, #20]
 80058c8:	9a06      	ldr	r2, [sp, #24]
 80058ca:	441a      	add	r2, r3
 80058cc:	441d      	add	r5, r3
 80058ce:	9206      	str	r2, [sp, #24]
 80058d0:	e779      	b.n	80057c6 <_dtoa_r+0x816>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e7f4      	b.n	80058c0 <_dtoa_r+0x910>
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dc37      	bgt.n	800594c <_dtoa_r+0x99c>
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	dd34      	ble.n	800594c <_dtoa_r+0x99c>
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	b963      	cbnz	r3, 8005904 <_dtoa_r+0x954>
 80058ea:	4631      	mov	r1, r6
 80058ec:	2205      	movs	r2, #5
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fab2 	bl	8005e58 <__multadd>
 80058f4:	4601      	mov	r1, r0
 80058f6:	4606      	mov	r6, r0
 80058f8:	4650      	mov	r0, sl
 80058fa:	f000 fcc7 	bl	800628c <__mcmp>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f73f adbb 	bgt.w	800547a <_dtoa_r+0x4ca>
 8005904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005906:	9d00      	ldr	r5, [sp, #0]
 8005908:	ea6f 0b03 	mvn.w	fp, r3
 800590c:	f04f 0800 	mov.w	r8, #0
 8005910:	4631      	mov	r1, r6
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fa7e 	bl	8005e14 <_Bfree>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f43f aeab 	beq.w	8005674 <_dtoa_r+0x6c4>
 800591e:	f1b8 0f00 	cmp.w	r8, #0
 8005922:	d005      	beq.n	8005930 <_dtoa_r+0x980>
 8005924:	45b8      	cmp	r8, r7
 8005926:	d003      	beq.n	8005930 <_dtoa_r+0x980>
 8005928:	4641      	mov	r1, r8
 800592a:	4620      	mov	r0, r4
 800592c:	f000 fa72 	bl	8005e14 <_Bfree>
 8005930:	4639      	mov	r1, r7
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fa6e 	bl	8005e14 <_Bfree>
 8005938:	e69c      	b.n	8005674 <_dtoa_r+0x6c4>
 800593a:	2600      	movs	r6, #0
 800593c:	4637      	mov	r7, r6
 800593e:	e7e1      	b.n	8005904 <_dtoa_r+0x954>
 8005940:	46bb      	mov	fp, r7
 8005942:	4637      	mov	r7, r6
 8005944:	e599      	b.n	800547a <_dtoa_r+0x4ca>
 8005946:	bf00      	nop
 8005948:	40240000 	.word	0x40240000
 800594c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80c8 	beq.w	8005ae4 <_dtoa_r+0xb34>
 8005954:	9b04      	ldr	r3, [sp, #16]
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	2d00      	cmp	r5, #0
 800595a:	dd05      	ble.n	8005968 <_dtoa_r+0x9b8>
 800595c:	4639      	mov	r1, r7
 800595e:	462a      	mov	r2, r5
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fc27 	bl	80061b4 <__lshift>
 8005966:	4607      	mov	r7, r0
 8005968:	f1b8 0f00 	cmp.w	r8, #0
 800596c:	d05b      	beq.n	8005a26 <_dtoa_r+0xa76>
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fa0f 	bl	8005d94 <_Balloc>
 8005976:	4605      	mov	r5, r0
 8005978:	b928      	cbnz	r0, 8005986 <_dtoa_r+0x9d6>
 800597a:	4b83      	ldr	r3, [pc, #524]	; (8005b88 <_dtoa_r+0xbd8>)
 800597c:	4602      	mov	r2, r0
 800597e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005982:	f7ff bb2e 	b.w	8004fe2 <_dtoa_r+0x32>
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	3202      	adds	r2, #2
 800598a:	0092      	lsls	r2, r2, #2
 800598c:	f107 010c 	add.w	r1, r7, #12
 8005990:	300c      	adds	r0, #12
 8005992:	f000 ffab 	bl	80068ec <memcpy>
 8005996:	2201      	movs	r2, #1
 8005998:	4629      	mov	r1, r5
 800599a:	4620      	mov	r0, r4
 800599c:	f000 fc0a 	bl	80061b4 <__lshift>
 80059a0:	9b00      	ldr	r3, [sp, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059aa:	4413      	add	r3, r2
 80059ac:	9308      	str	r3, [sp, #32]
 80059ae:	9b02      	ldr	r3, [sp, #8]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	46b8      	mov	r8, r7
 80059b6:	9306      	str	r3, [sp, #24]
 80059b8:	4607      	mov	r7, r0
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	4631      	mov	r1, r6
 80059be:	3b01      	subs	r3, #1
 80059c0:	4650      	mov	r0, sl
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	f7ff fa6c 	bl	8004ea0 <quorem>
 80059c8:	4641      	mov	r1, r8
 80059ca:	9002      	str	r0, [sp, #8]
 80059cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059d0:	4650      	mov	r0, sl
 80059d2:	f000 fc5b 	bl	800628c <__mcmp>
 80059d6:	463a      	mov	r2, r7
 80059d8:	9005      	str	r0, [sp, #20]
 80059da:	4631      	mov	r1, r6
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 fc71 	bl	80062c4 <__mdiff>
 80059e2:	68c2      	ldr	r2, [r0, #12]
 80059e4:	4605      	mov	r5, r0
 80059e6:	bb02      	cbnz	r2, 8005a2a <_dtoa_r+0xa7a>
 80059e8:	4601      	mov	r1, r0
 80059ea:	4650      	mov	r0, sl
 80059ec:	f000 fc4e 	bl	800628c <__mcmp>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4629      	mov	r1, r5
 80059f4:	4620      	mov	r0, r4
 80059f6:	9209      	str	r2, [sp, #36]	; 0x24
 80059f8:	f000 fa0c 	bl	8005e14 <_Bfree>
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a00:	9d04      	ldr	r5, [sp, #16]
 8005a02:	ea43 0102 	orr.w	r1, r3, r2
 8005a06:	9b06      	ldr	r3, [sp, #24]
 8005a08:	4319      	orrs	r1, r3
 8005a0a:	d110      	bne.n	8005a2e <_dtoa_r+0xa7e>
 8005a0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a10:	d029      	beq.n	8005a66 <_dtoa_r+0xab6>
 8005a12:	9b05      	ldr	r3, [sp, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dd02      	ble.n	8005a1e <_dtoa_r+0xa6e>
 8005a18:	9b02      	ldr	r3, [sp, #8]
 8005a1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	f883 9000 	strb.w	r9, [r3]
 8005a24:	e774      	b.n	8005910 <_dtoa_r+0x960>
 8005a26:	4638      	mov	r0, r7
 8005a28:	e7ba      	b.n	80059a0 <_dtoa_r+0x9f0>
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	e7e1      	b.n	80059f2 <_dtoa_r+0xa42>
 8005a2e:	9b05      	ldr	r3, [sp, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	db04      	blt.n	8005a3e <_dtoa_r+0xa8e>
 8005a34:	9907      	ldr	r1, [sp, #28]
 8005a36:	430b      	orrs	r3, r1
 8005a38:	9906      	ldr	r1, [sp, #24]
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	d120      	bne.n	8005a80 <_dtoa_r+0xad0>
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	dded      	ble.n	8005a1e <_dtoa_r+0xa6e>
 8005a42:	4651      	mov	r1, sl
 8005a44:	2201      	movs	r2, #1
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 fbb4 	bl	80061b4 <__lshift>
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4682      	mov	sl, r0
 8005a50:	f000 fc1c 	bl	800628c <__mcmp>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	dc03      	bgt.n	8005a60 <_dtoa_r+0xab0>
 8005a58:	d1e1      	bne.n	8005a1e <_dtoa_r+0xa6e>
 8005a5a:	f019 0f01 	tst.w	r9, #1
 8005a5e:	d0de      	beq.n	8005a1e <_dtoa_r+0xa6e>
 8005a60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a64:	d1d8      	bne.n	8005a18 <_dtoa_r+0xa68>
 8005a66:	9a01      	ldr	r2, [sp, #4]
 8005a68:	2339      	movs	r3, #57	; 0x39
 8005a6a:	7013      	strb	r3, [r2, #0]
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	461d      	mov	r5, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a76:	2a39      	cmp	r2, #57	; 0x39
 8005a78:	d06c      	beq.n	8005b54 <_dtoa_r+0xba4>
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e747      	b.n	8005910 <_dtoa_r+0x960>
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	dd07      	ble.n	8005a94 <_dtoa_r+0xae4>
 8005a84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a88:	d0ed      	beq.n	8005a66 <_dtoa_r+0xab6>
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	f109 0301 	add.w	r3, r9, #1
 8005a90:	7013      	strb	r3, [r2, #0]
 8005a92:	e73d      	b.n	8005910 <_dtoa_r+0x960>
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	9a08      	ldr	r2, [sp, #32]
 8005a98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d043      	beq.n	8005b28 <_dtoa_r+0xb78>
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	220a      	movs	r2, #10
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f9d6 	bl	8005e58 <__multadd>
 8005aac:	45b8      	cmp	r8, r7
 8005aae:	4682      	mov	sl, r0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	f04f 020a 	mov.w	r2, #10
 8005ab8:	4641      	mov	r1, r8
 8005aba:	4620      	mov	r0, r4
 8005abc:	d107      	bne.n	8005ace <_dtoa_r+0xb1e>
 8005abe:	f000 f9cb 	bl	8005e58 <__multadd>
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	e775      	b.n	80059ba <_dtoa_r+0xa0a>
 8005ace:	f000 f9c3 	bl	8005e58 <__multadd>
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	220a      	movs	r2, #10
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f9bc 	bl	8005e58 <__multadd>
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	e7f0      	b.n	8005ac6 <_dtoa_r+0xb16>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	9d00      	ldr	r5, [sp, #0]
 8005aea:	4631      	mov	r1, r6
 8005aec:	4650      	mov	r0, sl
 8005aee:	f7ff f9d7 	bl	8004ea0 <quorem>
 8005af2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	f805 9b01 	strb.w	r9, [r5], #1
 8005afc:	1aea      	subs	r2, r5, r3
 8005afe:	9b01      	ldr	r3, [sp, #4]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	dd07      	ble.n	8005b14 <_dtoa_r+0xb64>
 8005b04:	4651      	mov	r1, sl
 8005b06:	2300      	movs	r3, #0
 8005b08:	220a      	movs	r2, #10
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 f9a4 	bl	8005e58 <__multadd>
 8005b10:	4682      	mov	sl, r0
 8005b12:	e7ea      	b.n	8005aea <_dtoa_r+0xb3a>
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfc8      	it	gt
 8005b1a:	461d      	movgt	r5, r3
 8005b1c:	9b00      	ldr	r3, [sp, #0]
 8005b1e:	bfd8      	it	le
 8005b20:	2501      	movle	r5, #1
 8005b22:	441d      	add	r5, r3
 8005b24:	f04f 0800 	mov.w	r8, #0
 8005b28:	4651      	mov	r1, sl
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fb41 	bl	80061b4 <__lshift>
 8005b32:	4631      	mov	r1, r6
 8005b34:	4682      	mov	sl, r0
 8005b36:	f000 fba9 	bl	800628c <__mcmp>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	dc96      	bgt.n	8005a6c <_dtoa_r+0xabc>
 8005b3e:	d102      	bne.n	8005b46 <_dtoa_r+0xb96>
 8005b40:	f019 0f01 	tst.w	r9, #1
 8005b44:	d192      	bne.n	8005a6c <_dtoa_r+0xabc>
 8005b46:	462b      	mov	r3, r5
 8005b48:	461d      	mov	r5, r3
 8005b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b4e:	2a30      	cmp	r2, #48	; 0x30
 8005b50:	d0fa      	beq.n	8005b48 <_dtoa_r+0xb98>
 8005b52:	e6dd      	b.n	8005910 <_dtoa_r+0x960>
 8005b54:	9a00      	ldr	r2, [sp, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d189      	bne.n	8005a6e <_dtoa_r+0xabe>
 8005b5a:	f10b 0b01 	add.w	fp, fp, #1
 8005b5e:	2331      	movs	r3, #49	; 0x31
 8005b60:	e796      	b.n	8005a90 <_dtoa_r+0xae0>
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <_dtoa_r+0xbdc>)
 8005b64:	f7ff ba99 	b.w	800509a <_dtoa_r+0xea>
 8005b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f47f aa6d 	bne.w	800504a <_dtoa_r+0x9a>
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <_dtoa_r+0xbe0>)
 8005b72:	f7ff ba92 	b.w	800509a <_dtoa_r+0xea>
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dcb5      	bgt.n	8005ae8 <_dtoa_r+0xb38>
 8005b7c:	9b07      	ldr	r3, [sp, #28]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f73f aeb1 	bgt.w	80058e6 <_dtoa_r+0x936>
 8005b84:	e7b0      	b.n	8005ae8 <_dtoa_r+0xb38>
 8005b86:	bf00      	nop
 8005b88:	08007090 	.word	0x08007090
 8005b8c:	08006ff0 	.word	0x08006ff0
 8005b90:	08007014 	.word	0x08007014

08005b94 <_free_r>:
 8005b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d044      	beq.n	8005c24 <_free_r+0x90>
 8005b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9e:	9001      	str	r0, [sp, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba6:	bfb8      	it	lt
 8005ba8:	18e4      	addlt	r4, r4, r3
 8005baa:	f000 f8e7 	bl	8005d7c <__malloc_lock>
 8005bae:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <_free_r+0x94>)
 8005bb0:	9801      	ldr	r0, [sp, #4]
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x30>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	b003      	add	sp, #12
 8005bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bc0:	f000 b8e2 	b.w	8005d88 <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x46>
 8005bc8:	6825      	ldr	r5, [r4, #0]
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1949      	addeq	r1, r1, r5
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x22>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x50>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x46>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1855      	adds	r5, r2, r1
 8005be8:	42a5      	cmp	r5, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x70>
 8005bec:	6824      	ldr	r4, [r4, #0]
 8005bee:	4421      	add	r1, r4
 8005bf0:	1854      	adds	r4, r2, r1
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x26>
 8005bf8:	681c      	ldr	r4, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	440c      	add	r4, r1
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x26>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x78>
 8005c06:	230c      	movs	r3, #12
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x26>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1949      	addeq	r1, r1, r5
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x26>
 8005c24:	b003      	add	sp, #12
 8005c26:	bd30      	pop	{r4, r5, pc}
 8005c28:	20000424 	.word	0x20000424

08005c2c <malloc>:
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <malloc+0xc>)
 8005c2e:	4601      	mov	r1, r0
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	f000 b823 	b.w	8005c7c <_malloc_r>
 8005c36:	bf00      	nop
 8005c38:	2000008c 	.word	0x2000008c

08005c3c <sbrk_aligned>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4e0e      	ldr	r6, [pc, #56]	; (8005c78 <sbrk_aligned+0x3c>)
 8005c40:	460c      	mov	r4, r1
 8005c42:	6831      	ldr	r1, [r6, #0]
 8005c44:	4605      	mov	r5, r0
 8005c46:	b911      	cbnz	r1, 8005c4e <sbrk_aligned+0x12>
 8005c48:	f000 fe40 	bl	80068cc <_sbrk_r>
 8005c4c:	6030      	str	r0, [r6, #0]
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 fe3b 	bl	80068cc <_sbrk_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d00a      	beq.n	8005c70 <sbrk_aligned+0x34>
 8005c5a:	1cc4      	adds	r4, r0, #3
 8005c5c:	f024 0403 	bic.w	r4, r4, #3
 8005c60:	42a0      	cmp	r0, r4
 8005c62:	d007      	beq.n	8005c74 <sbrk_aligned+0x38>
 8005c64:	1a21      	subs	r1, r4, r0
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fe30 	bl	80068cc <_sbrk_r>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d101      	bne.n	8005c74 <sbrk_aligned+0x38>
 8005c70:	f04f 34ff 	mov.w	r4, #4294967295
 8005c74:	4620      	mov	r0, r4
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	20000428 	.word	0x20000428

08005c7c <_malloc_r>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	1ccd      	adds	r5, r1, #3
 8005c82:	f025 0503 	bic.w	r5, r5, #3
 8005c86:	3508      	adds	r5, #8
 8005c88:	2d0c      	cmp	r5, #12
 8005c8a:	bf38      	it	cc
 8005c8c:	250c      	movcc	r5, #12
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	4607      	mov	r7, r0
 8005c92:	db01      	blt.n	8005c98 <_malloc_r+0x1c>
 8005c94:	42a9      	cmp	r1, r5
 8005c96:	d905      	bls.n	8005ca4 <_malloc_r+0x28>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d78 <_malloc_r+0xfc>
 8005ca8:	f000 f868 	bl	8005d7c <__malloc_lock>
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	bb5c      	cbnz	r4, 8005d0c <_malloc_r+0x90>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ffc0 	bl	8005c3c <sbrk_aligned>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	d155      	bne.n	8005d6e <_malloc_r+0xf2>
 8005cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005cc6:	4626      	mov	r6, r4
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	d145      	bne.n	8005d58 <_malloc_r+0xdc>
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d048      	beq.n	8005d62 <_malloc_r+0xe6>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	eb04 0903 	add.w	r9, r4, r3
 8005cda:	f000 fdf7 	bl	80068cc <_sbrk_r>
 8005cde:	4581      	cmp	r9, r0
 8005ce0:	d13f      	bne.n	8005d62 <_malloc_r+0xe6>
 8005ce2:	6821      	ldr	r1, [r4, #0]
 8005ce4:	1a6d      	subs	r5, r5, r1
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7ff ffa7 	bl	8005c3c <sbrk_aligned>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d037      	beq.n	8005d62 <_malloc_r+0xe6>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	442b      	add	r3, r5
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d038      	beq.n	8005d72 <_malloc_r+0xf6>
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	42a2      	cmp	r2, r4
 8005d04:	d12b      	bne.n	8005d5e <_malloc_r+0xe2>
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	e00f      	b.n	8005d2c <_malloc_r+0xb0>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	1b52      	subs	r2, r2, r5
 8005d10:	d41f      	bmi.n	8005d52 <_malloc_r+0xd6>
 8005d12:	2a0b      	cmp	r2, #11
 8005d14:	d917      	bls.n	8005d46 <_malloc_r+0xca>
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	6025      	str	r5, [r4, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	6059      	strne	r1, [r3, #4]
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	bf08      	it	eq
 8005d24:	f8c8 1000 	streq.w	r1, [r8]
 8005d28:	5162      	str	r2, [r4, r5]
 8005d2a:	604b      	str	r3, [r1, #4]
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f104 060b 	add.w	r6, r4, #11
 8005d32:	f000 f829 	bl	8005d88 <__malloc_unlock>
 8005d36:	f026 0607 	bic.w	r6, r6, #7
 8005d3a:	1d23      	adds	r3, r4, #4
 8005d3c:	1af2      	subs	r2, r6, r3
 8005d3e:	d0ae      	beq.n	8005c9e <_malloc_r+0x22>
 8005d40:	1b9b      	subs	r3, r3, r6
 8005d42:	50a3      	str	r3, [r4, r2]
 8005d44:	e7ab      	b.n	8005c9e <_malloc_r+0x22>
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	d1dd      	bne.n	8005d08 <_malloc_r+0x8c>
 8005d4c:	f8c8 2000 	str.w	r2, [r8]
 8005d50:	e7ec      	b.n	8005d2c <_malloc_r+0xb0>
 8005d52:	4623      	mov	r3, r4
 8005d54:	6864      	ldr	r4, [r4, #4]
 8005d56:	e7ac      	b.n	8005cb2 <_malloc_r+0x36>
 8005d58:	4634      	mov	r4, r6
 8005d5a:	6876      	ldr	r6, [r6, #4]
 8005d5c:	e7b4      	b.n	8005cc8 <_malloc_r+0x4c>
 8005d5e:	4613      	mov	r3, r2
 8005d60:	e7cc      	b.n	8005cfc <_malloc_r+0x80>
 8005d62:	230c      	movs	r3, #12
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4638      	mov	r0, r7
 8005d68:	f000 f80e 	bl	8005d88 <__malloc_unlock>
 8005d6c:	e797      	b.n	8005c9e <_malloc_r+0x22>
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	e7dc      	b.n	8005d2c <_malloc_r+0xb0>
 8005d72:	605b      	str	r3, [r3, #4]
 8005d74:	deff      	udf	#255	; 0xff
 8005d76:	bf00      	nop
 8005d78:	20000424 	.word	0x20000424

08005d7c <__malloc_lock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_lock+0x8>)
 8005d7e:	f7ff b88d 	b.w	8004e9c <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000420 	.word	0x20000420

08005d88 <__malloc_unlock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__malloc_unlock+0x8>)
 8005d8a:	f7ff b888 	b.w	8004e9e <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20000420 	.word	0x20000420

08005d94 <_Balloc>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	69c6      	ldr	r6, [r0, #28]
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	b976      	cbnz	r6, 8005dbc <_Balloc+0x28>
 8005d9e:	2010      	movs	r0, #16
 8005da0:	f7ff ff44 	bl	8005c2c <malloc>
 8005da4:	4602      	mov	r2, r0
 8005da6:	61e0      	str	r0, [r4, #28]
 8005da8:	b920      	cbnz	r0, 8005db4 <_Balloc+0x20>
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <_Balloc+0x78>)
 8005dac:	4818      	ldr	r0, [pc, #96]	; (8005e10 <_Balloc+0x7c>)
 8005dae:	216b      	movs	r1, #107	; 0x6b
 8005db0:	f000 fdaa 	bl	8006908 <__assert_func>
 8005db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005db8:	6006      	str	r6, [r0, #0]
 8005dba:	60c6      	str	r6, [r0, #12]
 8005dbc:	69e6      	ldr	r6, [r4, #28]
 8005dbe:	68f3      	ldr	r3, [r6, #12]
 8005dc0:	b183      	cbz	r3, 8005de4 <_Balloc+0x50>
 8005dc2:	69e3      	ldr	r3, [r4, #28]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dca:	b9b8      	cbnz	r0, 8005dfc <_Balloc+0x68>
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f605 	lsl.w	r6, r1, r5
 8005dd2:	1d72      	adds	r2, r6, #5
 8005dd4:	0092      	lsls	r2, r2, #2
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 fdb4 	bl	8006944 <_calloc_r>
 8005ddc:	b160      	cbz	r0, 8005df8 <_Balloc+0x64>
 8005dde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005de2:	e00e      	b.n	8005e02 <_Balloc+0x6e>
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	2104      	movs	r1, #4
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fdab 	bl	8006944 <_calloc_r>
 8005dee:	69e3      	ldr	r3, [r4, #28]
 8005df0:	60f0      	str	r0, [r6, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e4      	bne.n	8005dc2 <_Balloc+0x2e>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	6802      	ldr	r2, [r0, #0]
 8005dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e02:	2300      	movs	r3, #0
 8005e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e08:	e7f7      	b.n	8005dfa <_Balloc+0x66>
 8005e0a:	bf00      	nop
 8005e0c:	08007021 	.word	0x08007021
 8005e10:	080070a1 	.word	0x080070a1

08005e14 <_Bfree>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	69c6      	ldr	r6, [r0, #28]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b976      	cbnz	r6, 8005e3c <_Bfree+0x28>
 8005e1e:	2010      	movs	r0, #16
 8005e20:	f7ff ff04 	bl	8005c2c <malloc>
 8005e24:	4602      	mov	r2, r0
 8005e26:	61e8      	str	r0, [r5, #28]
 8005e28:	b920      	cbnz	r0, 8005e34 <_Bfree+0x20>
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <_Bfree+0x3c>)
 8005e2c:	4809      	ldr	r0, [pc, #36]	; (8005e54 <_Bfree+0x40>)
 8005e2e:	218f      	movs	r1, #143	; 0x8f
 8005e30:	f000 fd6a 	bl	8006908 <__assert_func>
 8005e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e38:	6006      	str	r6, [r0, #0]
 8005e3a:	60c6      	str	r6, [r0, #12]
 8005e3c:	b13c      	cbz	r4, 8005e4e <_Bfree+0x3a>
 8005e3e:	69eb      	ldr	r3, [r5, #28]
 8005e40:	6862      	ldr	r2, [r4, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e48:	6021      	str	r1, [r4, #0]
 8005e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	08007021 	.word	0x08007021
 8005e54:	080070a1 	.word	0x080070a1

08005e58 <__multadd>:
 8005e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5c:	690d      	ldr	r5, [r1, #16]
 8005e5e:	4607      	mov	r7, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	461e      	mov	r6, r3
 8005e64:	f101 0c14 	add.w	ip, r1, #20
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e6e:	b299      	uxth	r1, r3
 8005e70:	fb02 6101 	mla	r1, r2, r1, r6
 8005e74:	0c1e      	lsrs	r6, r3, #16
 8005e76:	0c0b      	lsrs	r3, r1, #16
 8005e78:	fb02 3306 	mla	r3, r2, r6, r3
 8005e7c:	b289      	uxth	r1, r1
 8005e7e:	3001      	adds	r0, #1
 8005e80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e84:	4285      	cmp	r5, r0
 8005e86:	f84c 1b04 	str.w	r1, [ip], #4
 8005e8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e8e:	dcec      	bgt.n	8005e6a <__multadd+0x12>
 8005e90:	b30e      	cbz	r6, 8005ed6 <__multadd+0x7e>
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	42ab      	cmp	r3, r5
 8005e96:	dc19      	bgt.n	8005ecc <__multadd+0x74>
 8005e98:	6861      	ldr	r1, [r4, #4]
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	f7ff ff79 	bl	8005d94 <_Balloc>
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	b928      	cbnz	r0, 8005eb2 <__multadd+0x5a>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <__multadd+0x84>)
 8005eaa:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <__multadd+0x88>)
 8005eac:	21ba      	movs	r1, #186	; 0xba
 8005eae:	f000 fd2b 	bl	8006908 <__assert_func>
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	3202      	adds	r2, #2
 8005eb6:	f104 010c 	add.w	r1, r4, #12
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	300c      	adds	r0, #12
 8005ebe:	f000 fd15 	bl	80068ec <memcpy>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ffa5 	bl	8005e14 <_Bfree>
 8005eca:	4644      	mov	r4, r8
 8005ecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	615e      	str	r6, [r3, #20]
 8005ed4:	6125      	str	r5, [r4, #16]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005edc:	08007090 	.word	0x08007090
 8005ee0:	080070a1 	.word	0x080070a1

08005ee4 <__hi0bits>:
 8005ee4:	0c03      	lsrs	r3, r0, #16
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	b9d3      	cbnz	r3, 8005f20 <__hi0bits+0x3c>
 8005eea:	0400      	lsls	r0, r0, #16
 8005eec:	2310      	movs	r3, #16
 8005eee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ef2:	bf04      	itt	eq
 8005ef4:	0200      	lsleq	r0, r0, #8
 8005ef6:	3308      	addeq	r3, #8
 8005ef8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005efc:	bf04      	itt	eq
 8005efe:	0100      	lsleq	r0, r0, #4
 8005f00:	3304      	addeq	r3, #4
 8005f02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f06:	bf04      	itt	eq
 8005f08:	0080      	lsleq	r0, r0, #2
 8005f0a:	3302      	addeq	r3, #2
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	db05      	blt.n	8005f1c <__hi0bits+0x38>
 8005f10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f14:	f103 0301 	add.w	r3, r3, #1
 8005f18:	bf08      	it	eq
 8005f1a:	2320      	moveq	r3, #32
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	4770      	bx	lr
 8005f20:	2300      	movs	r3, #0
 8005f22:	e7e4      	b.n	8005eee <__hi0bits+0xa>

08005f24 <__lo0bits>:
 8005f24:	6803      	ldr	r3, [r0, #0]
 8005f26:	f013 0207 	ands.w	r2, r3, #7
 8005f2a:	d00c      	beq.n	8005f46 <__lo0bits+0x22>
 8005f2c:	07d9      	lsls	r1, r3, #31
 8005f2e:	d422      	bmi.n	8005f76 <__lo0bits+0x52>
 8005f30:	079a      	lsls	r2, r3, #30
 8005f32:	bf49      	itett	mi
 8005f34:	085b      	lsrmi	r3, r3, #1
 8005f36:	089b      	lsrpl	r3, r3, #2
 8005f38:	6003      	strmi	r3, [r0, #0]
 8005f3a:	2201      	movmi	r2, #1
 8005f3c:	bf5c      	itt	pl
 8005f3e:	6003      	strpl	r3, [r0, #0]
 8005f40:	2202      	movpl	r2, #2
 8005f42:	4610      	mov	r0, r2
 8005f44:	4770      	bx	lr
 8005f46:	b299      	uxth	r1, r3
 8005f48:	b909      	cbnz	r1, 8005f4e <__lo0bits+0x2a>
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	b2d9      	uxtb	r1, r3
 8005f50:	b909      	cbnz	r1, 8005f56 <__lo0bits+0x32>
 8005f52:	3208      	adds	r2, #8
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	0719      	lsls	r1, r3, #28
 8005f58:	bf04      	itt	eq
 8005f5a:	091b      	lsreq	r3, r3, #4
 8005f5c:	3204      	addeq	r2, #4
 8005f5e:	0799      	lsls	r1, r3, #30
 8005f60:	bf04      	itt	eq
 8005f62:	089b      	lsreq	r3, r3, #2
 8005f64:	3202      	addeq	r2, #2
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	d403      	bmi.n	8005f72 <__lo0bits+0x4e>
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	f102 0201 	add.w	r2, r2, #1
 8005f70:	d003      	beq.n	8005f7a <__lo0bits+0x56>
 8005f72:	6003      	str	r3, [r0, #0]
 8005f74:	e7e5      	b.n	8005f42 <__lo0bits+0x1e>
 8005f76:	2200      	movs	r2, #0
 8005f78:	e7e3      	b.n	8005f42 <__lo0bits+0x1e>
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	e7e1      	b.n	8005f42 <__lo0bits+0x1e>
	...

08005f80 <__i2b>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	2101      	movs	r1, #1
 8005f86:	f7ff ff05 	bl	8005d94 <_Balloc>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	b928      	cbnz	r0, 8005f9a <__i2b+0x1a>
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <__i2b+0x24>)
 8005f90:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <__i2b+0x28>)
 8005f92:	f240 1145 	movw	r1, #325	; 0x145
 8005f96:	f000 fcb7 	bl	8006908 <__assert_func>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	6144      	str	r4, [r0, #20]
 8005f9e:	6103      	str	r3, [r0, #16]
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	bf00      	nop
 8005fa4:	08007090 	.word	0x08007090
 8005fa8:	080070a1 	.word	0x080070a1

08005fac <__multiply>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	4691      	mov	r9, r2
 8005fb2:	690a      	ldr	r2, [r1, #16]
 8005fb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	bfb8      	it	lt
 8005fbc:	460b      	movlt	r3, r1
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	bfbc      	itt	lt
 8005fc2:	464c      	movlt	r4, r9
 8005fc4:	4699      	movlt	r9, r3
 8005fc6:	6927      	ldr	r7, [r4, #16]
 8005fc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	6861      	ldr	r1, [r4, #4]
 8005fd0:	eb07 060a 	add.w	r6, r7, sl
 8005fd4:	42b3      	cmp	r3, r6
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	bfb8      	it	lt
 8005fda:	3101      	addlt	r1, #1
 8005fdc:	f7ff feda 	bl	8005d94 <_Balloc>
 8005fe0:	b930      	cbnz	r0, 8005ff0 <__multiply+0x44>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b44      	ldr	r3, [pc, #272]	; (80060f8 <__multiply+0x14c>)
 8005fe6:	4845      	ldr	r0, [pc, #276]	; (80060fc <__multiply+0x150>)
 8005fe8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005fec:	f000 fc8c 	bl	8006908 <__assert_func>
 8005ff0:	f100 0514 	add.w	r5, r0, #20
 8005ff4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	d321      	bcc.n	8006044 <__multiply+0x98>
 8006000:	f104 0314 	add.w	r3, r4, #20
 8006004:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006008:	f109 0314 	add.w	r3, r9, #20
 800600c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006010:	9202      	str	r2, [sp, #8]
 8006012:	1b3a      	subs	r2, r7, r4
 8006014:	3a15      	subs	r2, #21
 8006016:	f022 0203 	bic.w	r2, r2, #3
 800601a:	3204      	adds	r2, #4
 800601c:	f104 0115 	add.w	r1, r4, #21
 8006020:	428f      	cmp	r7, r1
 8006022:	bf38      	it	cc
 8006024:	2204      	movcc	r2, #4
 8006026:	9201      	str	r2, [sp, #4]
 8006028:	9a02      	ldr	r2, [sp, #8]
 800602a:	9303      	str	r3, [sp, #12]
 800602c:	429a      	cmp	r2, r3
 800602e:	d80c      	bhi.n	800604a <__multiply+0x9e>
 8006030:	2e00      	cmp	r6, #0
 8006032:	dd03      	ble.n	800603c <__multiply+0x90>
 8006034:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05b      	beq.n	80060f4 <__multiply+0x148>
 800603c:	6106      	str	r6, [r0, #16]
 800603e:	b005      	add	sp, #20
 8006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006044:	f843 2b04 	str.w	r2, [r3], #4
 8006048:	e7d8      	b.n	8005ffc <__multiply+0x50>
 800604a:	f8b3 a000 	ldrh.w	sl, [r3]
 800604e:	f1ba 0f00 	cmp.w	sl, #0
 8006052:	d024      	beq.n	800609e <__multiply+0xf2>
 8006054:	f104 0e14 	add.w	lr, r4, #20
 8006058:	46a9      	mov	r9, r5
 800605a:	f04f 0c00 	mov.w	ip, #0
 800605e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006062:	f8d9 1000 	ldr.w	r1, [r9]
 8006066:	fa1f fb82 	uxth.w	fp, r2
 800606a:	b289      	uxth	r1, r1
 800606c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006070:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006074:	f8d9 2000 	ldr.w	r2, [r9]
 8006078:	4461      	add	r1, ip
 800607a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800607e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006086:	b289      	uxth	r1, r1
 8006088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800608c:	4577      	cmp	r7, lr
 800608e:	f849 1b04 	str.w	r1, [r9], #4
 8006092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006096:	d8e2      	bhi.n	800605e <__multiply+0xb2>
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	f845 c002 	str.w	ip, [r5, r2]
 800609e:	9a03      	ldr	r2, [sp, #12]
 80060a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060a4:	3304      	adds	r3, #4
 80060a6:	f1b9 0f00 	cmp.w	r9, #0
 80060aa:	d021      	beq.n	80060f0 <__multiply+0x144>
 80060ac:	6829      	ldr	r1, [r5, #0]
 80060ae:	f104 0c14 	add.w	ip, r4, #20
 80060b2:	46ae      	mov	lr, r5
 80060b4:	f04f 0a00 	mov.w	sl, #0
 80060b8:	f8bc b000 	ldrh.w	fp, [ip]
 80060bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060c0:	fb09 220b 	mla	r2, r9, fp, r2
 80060c4:	4452      	add	r2, sl
 80060c6:	b289      	uxth	r1, r1
 80060c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060cc:	f84e 1b04 	str.w	r1, [lr], #4
 80060d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80060d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060d8:	f8be 1000 	ldrh.w	r1, [lr]
 80060dc:	fb09 110a 	mla	r1, r9, sl, r1
 80060e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80060e4:	4567      	cmp	r7, ip
 80060e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060ea:	d8e5      	bhi.n	80060b8 <__multiply+0x10c>
 80060ec:	9a01      	ldr	r2, [sp, #4]
 80060ee:	50a9      	str	r1, [r5, r2]
 80060f0:	3504      	adds	r5, #4
 80060f2:	e799      	b.n	8006028 <__multiply+0x7c>
 80060f4:	3e01      	subs	r6, #1
 80060f6:	e79b      	b.n	8006030 <__multiply+0x84>
 80060f8:	08007090 	.word	0x08007090
 80060fc:	080070a1 	.word	0x080070a1

08006100 <__pow5mult>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4615      	mov	r5, r2
 8006106:	f012 0203 	ands.w	r2, r2, #3
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	d007      	beq.n	8006120 <__pow5mult+0x20>
 8006110:	4c25      	ldr	r4, [pc, #148]	; (80061a8 <__pow5mult+0xa8>)
 8006112:	3a01      	subs	r2, #1
 8006114:	2300      	movs	r3, #0
 8006116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800611a:	f7ff fe9d 	bl	8005e58 <__multadd>
 800611e:	4607      	mov	r7, r0
 8006120:	10ad      	asrs	r5, r5, #2
 8006122:	d03d      	beq.n	80061a0 <__pow5mult+0xa0>
 8006124:	69f4      	ldr	r4, [r6, #28]
 8006126:	b97c      	cbnz	r4, 8006148 <__pow5mult+0x48>
 8006128:	2010      	movs	r0, #16
 800612a:	f7ff fd7f 	bl	8005c2c <malloc>
 800612e:	4602      	mov	r2, r0
 8006130:	61f0      	str	r0, [r6, #28]
 8006132:	b928      	cbnz	r0, 8006140 <__pow5mult+0x40>
 8006134:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <__pow5mult+0xac>)
 8006136:	481e      	ldr	r0, [pc, #120]	; (80061b0 <__pow5mult+0xb0>)
 8006138:	f240 11b3 	movw	r1, #435	; 0x1b3
 800613c:	f000 fbe4 	bl	8006908 <__assert_func>
 8006140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006144:	6004      	str	r4, [r0, #0]
 8006146:	60c4      	str	r4, [r0, #12]
 8006148:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800614c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006150:	b94c      	cbnz	r4, 8006166 <__pow5mult+0x66>
 8006152:	f240 2171 	movw	r1, #625	; 0x271
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff ff12 	bl	8005f80 <__i2b>
 800615c:	2300      	movs	r3, #0
 800615e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006162:	4604      	mov	r4, r0
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	f04f 0900 	mov.w	r9, #0
 800616a:	07eb      	lsls	r3, r5, #31
 800616c:	d50a      	bpl.n	8006184 <__pow5mult+0x84>
 800616e:	4639      	mov	r1, r7
 8006170:	4622      	mov	r2, r4
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ff1a 	bl	8005fac <__multiply>
 8006178:	4639      	mov	r1, r7
 800617a:	4680      	mov	r8, r0
 800617c:	4630      	mov	r0, r6
 800617e:	f7ff fe49 	bl	8005e14 <_Bfree>
 8006182:	4647      	mov	r7, r8
 8006184:	106d      	asrs	r5, r5, #1
 8006186:	d00b      	beq.n	80061a0 <__pow5mult+0xa0>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	b938      	cbnz	r0, 800619c <__pow5mult+0x9c>
 800618c:	4622      	mov	r2, r4
 800618e:	4621      	mov	r1, r4
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff ff0b 	bl	8005fac <__multiply>
 8006196:	6020      	str	r0, [r4, #0]
 8006198:	f8c0 9000 	str.w	r9, [r0]
 800619c:	4604      	mov	r4, r0
 800619e:	e7e4      	b.n	800616a <__pow5mult+0x6a>
 80061a0:	4638      	mov	r0, r7
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a6:	bf00      	nop
 80061a8:	080071f0 	.word	0x080071f0
 80061ac:	08007021 	.word	0x08007021
 80061b0:	080070a1 	.word	0x080070a1

080061b4 <__lshift>:
 80061b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	460c      	mov	r4, r1
 80061ba:	6849      	ldr	r1, [r1, #4]
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	4607      	mov	r7, r0
 80061c6:	4691      	mov	r9, r2
 80061c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061cc:	f108 0601 	add.w	r6, r8, #1
 80061d0:	42b3      	cmp	r3, r6
 80061d2:	db0b      	blt.n	80061ec <__lshift+0x38>
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff fddd 	bl	8005d94 <_Balloc>
 80061da:	4605      	mov	r5, r0
 80061dc:	b948      	cbnz	r0, 80061f2 <__lshift+0x3e>
 80061de:	4602      	mov	r2, r0
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <__lshift+0xd0>)
 80061e2:	4829      	ldr	r0, [pc, #164]	; (8006288 <__lshift+0xd4>)
 80061e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80061e8:	f000 fb8e 	bl	8006908 <__assert_func>
 80061ec:	3101      	adds	r1, #1
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	e7ee      	b.n	80061d0 <__lshift+0x1c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f100 0114 	add.w	r1, r0, #20
 80061f8:	f100 0210 	add.w	r2, r0, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	4553      	cmp	r3, sl
 8006200:	db33      	blt.n	800626a <__lshift+0xb6>
 8006202:	6920      	ldr	r0, [r4, #16]
 8006204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006208:	f104 0314 	add.w	r3, r4, #20
 800620c:	f019 091f 	ands.w	r9, r9, #31
 8006210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006218:	d02b      	beq.n	8006272 <__lshift+0xbe>
 800621a:	f1c9 0e20 	rsb	lr, r9, #32
 800621e:	468a      	mov	sl, r1
 8006220:	2200      	movs	r2, #0
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	fa00 f009 	lsl.w	r0, r0, r9
 8006228:	4310      	orrs	r0, r2
 800622a:	f84a 0b04 	str.w	r0, [sl], #4
 800622e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006232:	459c      	cmp	ip, r3
 8006234:	fa22 f20e 	lsr.w	r2, r2, lr
 8006238:	d8f3      	bhi.n	8006222 <__lshift+0x6e>
 800623a:	ebac 0304 	sub.w	r3, ip, r4
 800623e:	3b15      	subs	r3, #21
 8006240:	f023 0303 	bic.w	r3, r3, #3
 8006244:	3304      	adds	r3, #4
 8006246:	f104 0015 	add.w	r0, r4, #21
 800624a:	4584      	cmp	ip, r0
 800624c:	bf38      	it	cc
 800624e:	2304      	movcc	r3, #4
 8006250:	50ca      	str	r2, [r1, r3]
 8006252:	b10a      	cbz	r2, 8006258 <__lshift+0xa4>
 8006254:	f108 0602 	add.w	r6, r8, #2
 8006258:	3e01      	subs	r6, #1
 800625a:	4638      	mov	r0, r7
 800625c:	612e      	str	r6, [r5, #16]
 800625e:	4621      	mov	r1, r4
 8006260:	f7ff fdd8 	bl	8005e14 <_Bfree>
 8006264:	4628      	mov	r0, r5
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	f842 0f04 	str.w	r0, [r2, #4]!
 800626e:	3301      	adds	r3, #1
 8006270:	e7c5      	b.n	80061fe <__lshift+0x4a>
 8006272:	3904      	subs	r1, #4
 8006274:	f853 2b04 	ldr.w	r2, [r3], #4
 8006278:	f841 2f04 	str.w	r2, [r1, #4]!
 800627c:	459c      	cmp	ip, r3
 800627e:	d8f9      	bhi.n	8006274 <__lshift+0xc0>
 8006280:	e7ea      	b.n	8006258 <__lshift+0xa4>
 8006282:	bf00      	nop
 8006284:	08007090 	.word	0x08007090
 8006288:	080070a1 	.word	0x080070a1

0800628c <__mcmp>:
 800628c:	b530      	push	{r4, r5, lr}
 800628e:	6902      	ldr	r2, [r0, #16]
 8006290:	690c      	ldr	r4, [r1, #16]
 8006292:	1b12      	subs	r2, r2, r4
 8006294:	d10e      	bne.n	80062b4 <__mcmp+0x28>
 8006296:	f100 0314 	add.w	r3, r0, #20
 800629a:	3114      	adds	r1, #20
 800629c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80062a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80062a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80062a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80062ac:	42a5      	cmp	r5, r4
 80062ae:	d003      	beq.n	80062b8 <__mcmp+0x2c>
 80062b0:	d305      	bcc.n	80062be <__mcmp+0x32>
 80062b2:	2201      	movs	r2, #1
 80062b4:	4610      	mov	r0, r2
 80062b6:	bd30      	pop	{r4, r5, pc}
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d3f3      	bcc.n	80062a4 <__mcmp+0x18>
 80062bc:	e7fa      	b.n	80062b4 <__mcmp+0x28>
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	e7f7      	b.n	80062b4 <__mcmp+0x28>

080062c4 <__mdiff>:
 80062c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	4606      	mov	r6, r0
 80062cc:	4611      	mov	r1, r2
 80062ce:	4620      	mov	r0, r4
 80062d0:	4690      	mov	r8, r2
 80062d2:	f7ff ffdb 	bl	800628c <__mcmp>
 80062d6:	1e05      	subs	r5, r0, #0
 80062d8:	d110      	bne.n	80062fc <__mdiff+0x38>
 80062da:	4629      	mov	r1, r5
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff fd59 	bl	8005d94 <_Balloc>
 80062e2:	b930      	cbnz	r0, 80062f2 <__mdiff+0x2e>
 80062e4:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <__mdiff+0x10c>)
 80062e6:	4602      	mov	r2, r0
 80062e8:	f240 2137 	movw	r1, #567	; 0x237
 80062ec:	4839      	ldr	r0, [pc, #228]	; (80063d4 <__mdiff+0x110>)
 80062ee:	f000 fb0b 	bl	8006908 <__assert_func>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	bfa4      	itt	ge
 80062fe:	4643      	movge	r3, r8
 8006300:	46a0      	movge	r8, r4
 8006302:	4630      	mov	r0, r6
 8006304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006308:	bfa6      	itte	ge
 800630a:	461c      	movge	r4, r3
 800630c:	2500      	movge	r5, #0
 800630e:	2501      	movlt	r5, #1
 8006310:	f7ff fd40 	bl	8005d94 <_Balloc>
 8006314:	b920      	cbnz	r0, 8006320 <__mdiff+0x5c>
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <__mdiff+0x10c>)
 8006318:	4602      	mov	r2, r0
 800631a:	f240 2145 	movw	r1, #581	; 0x245
 800631e:	e7e5      	b.n	80062ec <__mdiff+0x28>
 8006320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006324:	6926      	ldr	r6, [r4, #16]
 8006326:	60c5      	str	r5, [r0, #12]
 8006328:	f104 0914 	add.w	r9, r4, #20
 800632c:	f108 0514 	add.w	r5, r8, #20
 8006330:	f100 0e14 	add.w	lr, r0, #20
 8006334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800633c:	f108 0210 	add.w	r2, r8, #16
 8006340:	46f2      	mov	sl, lr
 8006342:	2100      	movs	r1, #0
 8006344:	f859 3b04 	ldr.w	r3, [r9], #4
 8006348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800634c:	fa11 f88b 	uxtah	r8, r1, fp
 8006350:	b299      	uxth	r1, r3
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	eba8 0801 	sub.w	r8, r8, r1
 8006358:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800635c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006360:	fa1f f888 	uxth.w	r8, r8
 8006364:	1419      	asrs	r1, r3, #16
 8006366:	454e      	cmp	r6, r9
 8006368:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800636c:	f84a 3b04 	str.w	r3, [sl], #4
 8006370:	d8e8      	bhi.n	8006344 <__mdiff+0x80>
 8006372:	1b33      	subs	r3, r6, r4
 8006374:	3b15      	subs	r3, #21
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	3304      	adds	r3, #4
 800637c:	3415      	adds	r4, #21
 800637e:	42a6      	cmp	r6, r4
 8006380:	bf38      	it	cc
 8006382:	2304      	movcc	r3, #4
 8006384:	441d      	add	r5, r3
 8006386:	4473      	add	r3, lr
 8006388:	469e      	mov	lr, r3
 800638a:	462e      	mov	r6, r5
 800638c:	4566      	cmp	r6, ip
 800638e:	d30e      	bcc.n	80063ae <__mdiff+0xea>
 8006390:	f10c 0203 	add.w	r2, ip, #3
 8006394:	1b52      	subs	r2, r2, r5
 8006396:	f022 0203 	bic.w	r2, r2, #3
 800639a:	3d03      	subs	r5, #3
 800639c:	45ac      	cmp	ip, r5
 800639e:	bf38      	it	cc
 80063a0:	2200      	movcc	r2, #0
 80063a2:	4413      	add	r3, r2
 80063a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80063a8:	b17a      	cbz	r2, 80063ca <__mdiff+0x106>
 80063aa:	6107      	str	r7, [r0, #16]
 80063ac:	e7a4      	b.n	80062f8 <__mdiff+0x34>
 80063ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80063b2:	fa11 f288 	uxtah	r2, r1, r8
 80063b6:	1414      	asrs	r4, r2, #16
 80063b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063bc:	b292      	uxth	r2, r2
 80063be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80063c2:	f84e 2b04 	str.w	r2, [lr], #4
 80063c6:	1421      	asrs	r1, r4, #16
 80063c8:	e7e0      	b.n	800638c <__mdiff+0xc8>
 80063ca:	3f01      	subs	r7, #1
 80063cc:	e7ea      	b.n	80063a4 <__mdiff+0xe0>
 80063ce:	bf00      	nop
 80063d0:	08007090 	.word	0x08007090
 80063d4:	080070a1 	.word	0x080070a1

080063d8 <__d2b>:
 80063d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063dc:	460f      	mov	r7, r1
 80063de:	2101      	movs	r1, #1
 80063e0:	ec59 8b10 	vmov	r8, r9, d0
 80063e4:	4616      	mov	r6, r2
 80063e6:	f7ff fcd5 	bl	8005d94 <_Balloc>
 80063ea:	4604      	mov	r4, r0
 80063ec:	b930      	cbnz	r0, 80063fc <__d2b+0x24>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <__d2b+0xac>)
 80063f2:	4825      	ldr	r0, [pc, #148]	; (8006488 <__d2b+0xb0>)
 80063f4:	f240 310f 	movw	r1, #783	; 0x30f
 80063f8:	f000 fa86 	bl	8006908 <__assert_func>
 80063fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006404:	bb2d      	cbnz	r5, 8006452 <__d2b+0x7a>
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	f1b8 0300 	subs.w	r3, r8, #0
 800640c:	d026      	beq.n	800645c <__d2b+0x84>
 800640e:	4668      	mov	r0, sp
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f7ff fd87 	bl	8005f24 <__lo0bits>
 8006416:	e9dd 1200 	ldrd	r1, r2, [sp]
 800641a:	b1e8      	cbz	r0, 8006458 <__d2b+0x80>
 800641c:	f1c0 0320 	rsb	r3, r0, #32
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	430b      	orrs	r3, r1
 8006426:	40c2      	lsrs	r2, r0
 8006428:	6163      	str	r3, [r4, #20]
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	61a3      	str	r3, [r4, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf14      	ite	ne
 8006434:	2202      	movne	r2, #2
 8006436:	2201      	moveq	r2, #1
 8006438:	6122      	str	r2, [r4, #16]
 800643a:	b1bd      	cbz	r5, 800646c <__d2b+0x94>
 800643c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006440:	4405      	add	r5, r0
 8006442:	603d      	str	r5, [r7, #0]
 8006444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	4620      	mov	r0, r4
 800644c:	b003      	add	sp, #12
 800644e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006456:	e7d6      	b.n	8006406 <__d2b+0x2e>
 8006458:	6161      	str	r1, [r4, #20]
 800645a:	e7e7      	b.n	800642c <__d2b+0x54>
 800645c:	a801      	add	r0, sp, #4
 800645e:	f7ff fd61 	bl	8005f24 <__lo0bits>
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	6163      	str	r3, [r4, #20]
 8006466:	3020      	adds	r0, #32
 8006468:	2201      	movs	r2, #1
 800646a:	e7e5      	b.n	8006438 <__d2b+0x60>
 800646c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006474:	6038      	str	r0, [r7, #0]
 8006476:	6918      	ldr	r0, [r3, #16]
 8006478:	f7ff fd34 	bl	8005ee4 <__hi0bits>
 800647c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006480:	e7e2      	b.n	8006448 <__d2b+0x70>
 8006482:	bf00      	nop
 8006484:	08007090 	.word	0x08007090
 8006488:	080070a1 	.word	0x080070a1

0800648c <__ssputs_r>:
 800648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	688e      	ldr	r6, [r1, #8]
 8006492:	461f      	mov	r7, r3
 8006494:	42be      	cmp	r6, r7
 8006496:	680b      	ldr	r3, [r1, #0]
 8006498:	4682      	mov	sl, r0
 800649a:	460c      	mov	r4, r1
 800649c:	4690      	mov	r8, r2
 800649e:	d82c      	bhi.n	80064fa <__ssputs_r+0x6e>
 80064a0:	898a      	ldrh	r2, [r1, #12]
 80064a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064a6:	d026      	beq.n	80064f6 <__ssputs_r+0x6a>
 80064a8:	6965      	ldr	r5, [r4, #20]
 80064aa:	6909      	ldr	r1, [r1, #16]
 80064ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064b0:	eba3 0901 	sub.w	r9, r3, r1
 80064b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064b8:	1c7b      	adds	r3, r7, #1
 80064ba:	444b      	add	r3, r9
 80064bc:	106d      	asrs	r5, r5, #1
 80064be:	429d      	cmp	r5, r3
 80064c0:	bf38      	it	cc
 80064c2:	461d      	movcc	r5, r3
 80064c4:	0553      	lsls	r3, r2, #21
 80064c6:	d527      	bpl.n	8006518 <__ssputs_r+0x8c>
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7ff fbd7 	bl	8005c7c <_malloc_r>
 80064ce:	4606      	mov	r6, r0
 80064d0:	b360      	cbz	r0, 800652c <__ssputs_r+0xa0>
 80064d2:	6921      	ldr	r1, [r4, #16]
 80064d4:	464a      	mov	r2, r9
 80064d6:	f000 fa09 	bl	80068ec <memcpy>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	6126      	str	r6, [r4, #16]
 80064e8:	6165      	str	r5, [r4, #20]
 80064ea:	444e      	add	r6, r9
 80064ec:	eba5 0509 	sub.w	r5, r5, r9
 80064f0:	6026      	str	r6, [r4, #0]
 80064f2:	60a5      	str	r5, [r4, #8]
 80064f4:	463e      	mov	r6, r7
 80064f6:	42be      	cmp	r6, r7
 80064f8:	d900      	bls.n	80064fc <__ssputs_r+0x70>
 80064fa:	463e      	mov	r6, r7
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	4632      	mov	r2, r6
 8006500:	4641      	mov	r1, r8
 8006502:	f000 f9c9 	bl	8006898 <memmove>
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	1b9b      	subs	r3, r3, r6
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	4433      	add	r3, r6
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	2000      	movs	r0, #0
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	462a      	mov	r2, r5
 800651a:	f000 fa3b 	bl	8006994 <_realloc_r>
 800651e:	4606      	mov	r6, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	d1e0      	bne.n	80064e6 <__ssputs_r+0x5a>
 8006524:	6921      	ldr	r1, [r4, #16]
 8006526:	4650      	mov	r0, sl
 8006528:	f7ff fb34 	bl	8005b94 <_free_r>
 800652c:	230c      	movs	r3, #12
 800652e:	f8ca 3000 	str.w	r3, [sl]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
 800653e:	e7e9      	b.n	8006514 <__ssputs_r+0x88>

08006540 <_svfiprintf_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	4698      	mov	r8, r3
 8006546:	898b      	ldrh	r3, [r1, #12]
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	b09d      	sub	sp, #116	; 0x74
 800654c:	4607      	mov	r7, r0
 800654e:	460d      	mov	r5, r1
 8006550:	4614      	mov	r4, r2
 8006552:	d50e      	bpl.n	8006572 <_svfiprintf_r+0x32>
 8006554:	690b      	ldr	r3, [r1, #16]
 8006556:	b963      	cbnz	r3, 8006572 <_svfiprintf_r+0x32>
 8006558:	2140      	movs	r1, #64	; 0x40
 800655a:	f7ff fb8f 	bl	8005c7c <_malloc_r>
 800655e:	6028      	str	r0, [r5, #0]
 8006560:	6128      	str	r0, [r5, #16]
 8006562:	b920      	cbnz	r0, 800656e <_svfiprintf_r+0x2e>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e0d0      	b.n	8006710 <_svfiprintf_r+0x1d0>
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	616b      	str	r3, [r5, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	2320      	movs	r3, #32
 8006578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800657c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006580:	2330      	movs	r3, #48	; 0x30
 8006582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006728 <_svfiprintf_r+0x1e8>
 8006586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800658a:	f04f 0901 	mov.w	r9, #1
 800658e:	4623      	mov	r3, r4
 8006590:	469a      	mov	sl, r3
 8006592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006596:	b10a      	cbz	r2, 800659c <_svfiprintf_r+0x5c>
 8006598:	2a25      	cmp	r2, #37	; 0x25
 800659a:	d1f9      	bne.n	8006590 <_svfiprintf_r+0x50>
 800659c:	ebba 0b04 	subs.w	fp, sl, r4
 80065a0:	d00b      	beq.n	80065ba <_svfiprintf_r+0x7a>
 80065a2:	465b      	mov	r3, fp
 80065a4:	4622      	mov	r2, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ff6f 	bl	800648c <__ssputs_r>
 80065ae:	3001      	adds	r0, #1
 80065b0:	f000 80a9 	beq.w	8006706 <_svfiprintf_r+0x1c6>
 80065b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b6:	445a      	add	r2, fp
 80065b8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a1 	beq.w	8006706 <_svfiprintf_r+0x1c6>
 80065c4:	2300      	movs	r3, #0
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ce:	f10a 0a01 	add.w	sl, sl, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065da:	931a      	str	r3, [sp, #104]	; 0x68
 80065dc:	4654      	mov	r4, sl
 80065de:	2205      	movs	r2, #5
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	4850      	ldr	r0, [pc, #320]	; (8006728 <_svfiprintf_r+0x1e8>)
 80065e6:	f7f9 fdfb 	bl	80001e0 <memchr>
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	b9d8      	cbnz	r0, 8006626 <_svfiprintf_r+0xe6>
 80065ee:	06d0      	lsls	r0, r2, #27
 80065f0:	bf44      	itt	mi
 80065f2:	2320      	movmi	r3, #32
 80065f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f8:	0711      	lsls	r1, r2, #28
 80065fa:	bf44      	itt	mi
 80065fc:	232b      	movmi	r3, #43	; 0x2b
 80065fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006602:	f89a 3000 	ldrb.w	r3, [sl]
 8006606:	2b2a      	cmp	r3, #42	; 0x2a
 8006608:	d015      	beq.n	8006636 <_svfiprintf_r+0xf6>
 800660a:	9a07      	ldr	r2, [sp, #28]
 800660c:	4654      	mov	r4, sl
 800660e:	2000      	movs	r0, #0
 8006610:	f04f 0c0a 	mov.w	ip, #10
 8006614:	4621      	mov	r1, r4
 8006616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661a:	3b30      	subs	r3, #48	; 0x30
 800661c:	2b09      	cmp	r3, #9
 800661e:	d94d      	bls.n	80066bc <_svfiprintf_r+0x17c>
 8006620:	b1b0      	cbz	r0, 8006650 <_svfiprintf_r+0x110>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e014      	b.n	8006650 <_svfiprintf_r+0x110>
 8006626:	eba0 0308 	sub.w	r3, r0, r8
 800662a:	fa09 f303 	lsl.w	r3, r9, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	46a2      	mov	sl, r4
 8006634:	e7d2      	b.n	80065dc <_svfiprintf_r+0x9c>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	9103      	str	r1, [sp, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbb      	ittet	lt
 8006642:	425b      	neglt	r3, r3
 8006644:	f042 0202 	orrlt.w	r2, r2, #2
 8006648:	9307      	strge	r3, [sp, #28]
 800664a:	9307      	strlt	r3, [sp, #28]
 800664c:	bfb8      	it	lt
 800664e:	9204      	strlt	r2, [sp, #16]
 8006650:	7823      	ldrb	r3, [r4, #0]
 8006652:	2b2e      	cmp	r3, #46	; 0x2e
 8006654:	d10c      	bne.n	8006670 <_svfiprintf_r+0x130>
 8006656:	7863      	ldrb	r3, [r4, #1]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d134      	bne.n	80066c6 <_svfiprintf_r+0x186>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	1d1a      	adds	r2, r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	9203      	str	r2, [sp, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	bfb8      	it	lt
 8006668:	f04f 33ff 	movlt.w	r3, #4294967295
 800666c:	3402      	adds	r4, #2
 800666e:	9305      	str	r3, [sp, #20]
 8006670:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006738 <_svfiprintf_r+0x1f8>
 8006674:	7821      	ldrb	r1, [r4, #0]
 8006676:	2203      	movs	r2, #3
 8006678:	4650      	mov	r0, sl
 800667a:	f7f9 fdb1 	bl	80001e0 <memchr>
 800667e:	b138      	cbz	r0, 8006690 <_svfiprintf_r+0x150>
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	eba0 000a 	sub.w	r0, r0, sl
 8006686:	2240      	movs	r2, #64	; 0x40
 8006688:	4082      	lsls	r2, r0
 800668a:	4313      	orrs	r3, r2
 800668c:	3401      	adds	r4, #1
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006694:	4825      	ldr	r0, [pc, #148]	; (800672c <_svfiprintf_r+0x1ec>)
 8006696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800669a:	2206      	movs	r2, #6
 800669c:	f7f9 fda0 	bl	80001e0 <memchr>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d038      	beq.n	8006716 <_svfiprintf_r+0x1d6>
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <_svfiprintf_r+0x1f0>)
 80066a6:	bb1b      	cbnz	r3, 80066f0 <_svfiprintf_r+0x1b0>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	3307      	adds	r3, #7
 80066ac:	f023 0307 	bic.w	r3, r3, #7
 80066b0:	3308      	adds	r3, #8
 80066b2:	9303      	str	r3, [sp, #12]
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	4433      	add	r3, r6
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	e768      	b.n	800658e <_svfiprintf_r+0x4e>
 80066bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c0:	460c      	mov	r4, r1
 80066c2:	2001      	movs	r0, #1
 80066c4:	e7a6      	b.n	8006614 <_svfiprintf_r+0xd4>
 80066c6:	2300      	movs	r3, #0
 80066c8:	3401      	adds	r4, #1
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	4619      	mov	r1, r3
 80066ce:	f04f 0c0a 	mov.w	ip, #10
 80066d2:	4620      	mov	r0, r4
 80066d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d8:	3a30      	subs	r2, #48	; 0x30
 80066da:	2a09      	cmp	r2, #9
 80066dc:	d903      	bls.n	80066e6 <_svfiprintf_r+0x1a6>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0c6      	beq.n	8006670 <_svfiprintf_r+0x130>
 80066e2:	9105      	str	r1, [sp, #20]
 80066e4:	e7c4      	b.n	8006670 <_svfiprintf_r+0x130>
 80066e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ea:	4604      	mov	r4, r0
 80066ec:	2301      	movs	r3, #1
 80066ee:	e7f0      	b.n	80066d2 <_svfiprintf_r+0x192>
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	462a      	mov	r2, r5
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <_svfiprintf_r+0x1f4>)
 80066f8:	a904      	add	r1, sp, #16
 80066fa:	4638      	mov	r0, r7
 80066fc:	f7fd fe64 	bl	80043c8 <_printf_float>
 8006700:	1c42      	adds	r2, r0, #1
 8006702:	4606      	mov	r6, r0
 8006704:	d1d6      	bne.n	80066b4 <_svfiprintf_r+0x174>
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	065b      	lsls	r3, r3, #25
 800670a:	f53f af2d 	bmi.w	8006568 <_svfiprintf_r+0x28>
 800670e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006710:	b01d      	add	sp, #116	; 0x74
 8006712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006716:	ab03      	add	r3, sp, #12
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	462a      	mov	r2, r5
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <_svfiprintf_r+0x1f4>)
 800671e:	a904      	add	r1, sp, #16
 8006720:	4638      	mov	r0, r7
 8006722:	f7fe f8f5 	bl	8004910 <_printf_i>
 8006726:	e7eb      	b.n	8006700 <_svfiprintf_r+0x1c0>
 8006728:	080071fc 	.word	0x080071fc
 800672c:	08007206 	.word	0x08007206
 8006730:	080043c9 	.word	0x080043c9
 8006734:	0800648d 	.word	0x0800648d
 8006738:	08007202 	.word	0x08007202

0800673c <__sflush_r>:
 800673c:	898a      	ldrh	r2, [r1, #12]
 800673e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006742:	4605      	mov	r5, r0
 8006744:	0710      	lsls	r0, r2, #28
 8006746:	460c      	mov	r4, r1
 8006748:	d458      	bmi.n	80067fc <__sflush_r+0xc0>
 800674a:	684b      	ldr	r3, [r1, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc05      	bgt.n	800675c <__sflush_r+0x20>
 8006750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	dc02      	bgt.n	800675c <__sflush_r+0x20>
 8006756:	2000      	movs	r0, #0
 8006758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800675e:	2e00      	cmp	r6, #0
 8006760:	d0f9      	beq.n	8006756 <__sflush_r+0x1a>
 8006762:	2300      	movs	r3, #0
 8006764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006768:	682f      	ldr	r7, [r5, #0]
 800676a:	6a21      	ldr	r1, [r4, #32]
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	d032      	beq.n	80067d6 <__sflush_r+0x9a>
 8006770:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	075a      	lsls	r2, r3, #29
 8006776:	d505      	bpl.n	8006784 <__sflush_r+0x48>
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	1ac0      	subs	r0, r0, r3
 800677c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800677e:	b10b      	cbz	r3, 8006784 <__sflush_r+0x48>
 8006780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006782:	1ac0      	subs	r0, r0, r3
 8006784:	2300      	movs	r3, #0
 8006786:	4602      	mov	r2, r0
 8006788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800678a:	6a21      	ldr	r1, [r4, #32]
 800678c:	4628      	mov	r0, r5
 800678e:	47b0      	blx	r6
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	d106      	bne.n	80067a4 <__sflush_r+0x68>
 8006796:	6829      	ldr	r1, [r5, #0]
 8006798:	291d      	cmp	r1, #29
 800679a:	d82b      	bhi.n	80067f4 <__sflush_r+0xb8>
 800679c:	4a29      	ldr	r2, [pc, #164]	; (8006844 <__sflush_r+0x108>)
 800679e:	410a      	asrs	r2, r1
 80067a0:	07d6      	lsls	r6, r2, #31
 80067a2:	d427      	bmi.n	80067f4 <__sflush_r+0xb8>
 80067a4:	2200      	movs	r2, #0
 80067a6:	6062      	str	r2, [r4, #4]
 80067a8:	04d9      	lsls	r1, r3, #19
 80067aa:	6922      	ldr	r2, [r4, #16]
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	d504      	bpl.n	80067ba <__sflush_r+0x7e>
 80067b0:	1c42      	adds	r2, r0, #1
 80067b2:	d101      	bne.n	80067b8 <__sflush_r+0x7c>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b903      	cbnz	r3, 80067ba <__sflush_r+0x7e>
 80067b8:	6560      	str	r0, [r4, #84]	; 0x54
 80067ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067bc:	602f      	str	r7, [r5, #0]
 80067be:	2900      	cmp	r1, #0
 80067c0:	d0c9      	beq.n	8006756 <__sflush_r+0x1a>
 80067c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c6:	4299      	cmp	r1, r3
 80067c8:	d002      	beq.n	80067d0 <__sflush_r+0x94>
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7ff f9e2 	bl	8005b94 <_free_r>
 80067d0:	2000      	movs	r0, #0
 80067d2:	6360      	str	r0, [r4, #52]	; 0x34
 80067d4:	e7c0      	b.n	8006758 <__sflush_r+0x1c>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4628      	mov	r0, r5
 80067da:	47b0      	blx	r6
 80067dc:	1c41      	adds	r1, r0, #1
 80067de:	d1c8      	bne.n	8006772 <__sflush_r+0x36>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0c5      	beq.n	8006772 <__sflush_r+0x36>
 80067e6:	2b1d      	cmp	r3, #29
 80067e8:	d001      	beq.n	80067ee <__sflush_r+0xb2>
 80067ea:	2b16      	cmp	r3, #22
 80067ec:	d101      	bne.n	80067f2 <__sflush_r+0xb6>
 80067ee:	602f      	str	r7, [r5, #0]
 80067f0:	e7b1      	b.n	8006756 <__sflush_r+0x1a>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	e7ad      	b.n	8006758 <__sflush_r+0x1c>
 80067fc:	690f      	ldr	r7, [r1, #16]
 80067fe:	2f00      	cmp	r7, #0
 8006800:	d0a9      	beq.n	8006756 <__sflush_r+0x1a>
 8006802:	0793      	lsls	r3, r2, #30
 8006804:	680e      	ldr	r6, [r1, #0]
 8006806:	bf08      	it	eq
 8006808:	694b      	ldreq	r3, [r1, #20]
 800680a:	600f      	str	r7, [r1, #0]
 800680c:	bf18      	it	ne
 800680e:	2300      	movne	r3, #0
 8006810:	eba6 0807 	sub.w	r8, r6, r7
 8006814:	608b      	str	r3, [r1, #8]
 8006816:	f1b8 0f00 	cmp.w	r8, #0
 800681a:	dd9c      	ble.n	8006756 <__sflush_r+0x1a>
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006820:	4643      	mov	r3, r8
 8006822:	463a      	mov	r2, r7
 8006824:	4628      	mov	r0, r5
 8006826:	47b0      	blx	r6
 8006828:	2800      	cmp	r0, #0
 800682a:	dc06      	bgt.n	800683a <__sflush_r+0xfe>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	e78e      	b.n	8006758 <__sflush_r+0x1c>
 800683a:	4407      	add	r7, r0
 800683c:	eba8 0800 	sub.w	r8, r8, r0
 8006840:	e7e9      	b.n	8006816 <__sflush_r+0xda>
 8006842:	bf00      	nop
 8006844:	dfbffffe 	.word	0xdfbffffe

08006848 <_fflush_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	690b      	ldr	r3, [r1, #16]
 800684c:	4605      	mov	r5, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b913      	cbnz	r3, 8006858 <_fflush_r+0x10>
 8006852:	2500      	movs	r5, #0
 8006854:	4628      	mov	r0, r5
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	b118      	cbz	r0, 8006862 <_fflush_r+0x1a>
 800685a:	6a03      	ldr	r3, [r0, #32]
 800685c:	b90b      	cbnz	r3, 8006862 <_fflush_r+0x1a>
 800685e:	f7fe f9f3 	bl	8004c48 <__sinit>
 8006862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f3      	beq.n	8006852 <_fflush_r+0xa>
 800686a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800686c:	07d0      	lsls	r0, r2, #31
 800686e:	d404      	bmi.n	800687a <_fflush_r+0x32>
 8006870:	0599      	lsls	r1, r3, #22
 8006872:	d402      	bmi.n	800687a <_fflush_r+0x32>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f7fe fb11 	bl	8004e9c <__retarget_lock_acquire_recursive>
 800687a:	4628      	mov	r0, r5
 800687c:	4621      	mov	r1, r4
 800687e:	f7ff ff5d 	bl	800673c <__sflush_r>
 8006882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006884:	07da      	lsls	r2, r3, #31
 8006886:	4605      	mov	r5, r0
 8006888:	d4e4      	bmi.n	8006854 <_fflush_r+0xc>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	d4e1      	bmi.n	8006854 <_fflush_r+0xc>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f7fe fb04 	bl	8004e9e <__retarget_lock_release_recursive>
 8006896:	e7dd      	b.n	8006854 <_fflush_r+0xc>

08006898 <memmove>:
 8006898:	4288      	cmp	r0, r1
 800689a:	b510      	push	{r4, lr}
 800689c:	eb01 0402 	add.w	r4, r1, r2
 80068a0:	d902      	bls.n	80068a8 <memmove+0x10>
 80068a2:	4284      	cmp	r4, r0
 80068a4:	4623      	mov	r3, r4
 80068a6:	d807      	bhi.n	80068b8 <memmove+0x20>
 80068a8:	1e43      	subs	r3, r0, #1
 80068aa:	42a1      	cmp	r1, r4
 80068ac:	d008      	beq.n	80068c0 <memmove+0x28>
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068b6:	e7f8      	b.n	80068aa <memmove+0x12>
 80068b8:	4402      	add	r2, r0
 80068ba:	4601      	mov	r1, r0
 80068bc:	428a      	cmp	r2, r1
 80068be:	d100      	bne.n	80068c2 <memmove+0x2a>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ca:	e7f7      	b.n	80068bc <memmove+0x24>

080068cc <_sbrk_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d06      	ldr	r5, [pc, #24]	; (80068e8 <_sbrk_r+0x1c>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	f7fb f9ca 	bl	8001c70 <_sbrk>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_sbrk_r+0x1a>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_sbrk_r+0x1a>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	2000041c 	.word	0x2000041c

080068ec <memcpy>:
 80068ec:	440a      	add	r2, r1
 80068ee:	4291      	cmp	r1, r2
 80068f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f4:	d100      	bne.n	80068f8 <memcpy+0xc>
 80068f6:	4770      	bx	lr
 80068f8:	b510      	push	{r4, lr}
 80068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006902:	4291      	cmp	r1, r2
 8006904:	d1f9      	bne.n	80068fa <memcpy+0xe>
 8006906:	bd10      	pop	{r4, pc}

08006908 <__assert_func>:
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	4614      	mov	r4, r2
 800690c:	461a      	mov	r2, r3
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <__assert_func+0x2c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4605      	mov	r5, r0
 8006914:	68d8      	ldr	r0, [r3, #12]
 8006916:	b14c      	cbz	r4, 800692c <__assert_func+0x24>
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <__assert_func+0x30>)
 800691a:	9100      	str	r1, [sp, #0]
 800691c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006920:	4906      	ldr	r1, [pc, #24]	; (800693c <__assert_func+0x34>)
 8006922:	462b      	mov	r3, r5
 8006924:	f000 f872 	bl	8006a0c <fiprintf>
 8006928:	f000 f882 	bl	8006a30 <abort>
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <__assert_func+0x38>)
 800692e:	461c      	mov	r4, r3
 8006930:	e7f3      	b.n	800691a <__assert_func+0x12>
 8006932:	bf00      	nop
 8006934:	2000008c 	.word	0x2000008c
 8006938:	08007217 	.word	0x08007217
 800693c:	08007224 	.word	0x08007224
 8006940:	08007252 	.word	0x08007252

08006944 <_calloc_r>:
 8006944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006946:	fba1 2402 	umull	r2, r4, r1, r2
 800694a:	b94c      	cbnz	r4, 8006960 <_calloc_r+0x1c>
 800694c:	4611      	mov	r1, r2
 800694e:	9201      	str	r2, [sp, #4]
 8006950:	f7ff f994 	bl	8005c7c <_malloc_r>
 8006954:	9a01      	ldr	r2, [sp, #4]
 8006956:	4605      	mov	r5, r0
 8006958:	b930      	cbnz	r0, 8006968 <_calloc_r+0x24>
 800695a:	4628      	mov	r0, r5
 800695c:	b003      	add	sp, #12
 800695e:	bd30      	pop	{r4, r5, pc}
 8006960:	220c      	movs	r2, #12
 8006962:	6002      	str	r2, [r0, #0]
 8006964:	2500      	movs	r5, #0
 8006966:	e7f8      	b.n	800695a <_calloc_r+0x16>
 8006968:	4621      	mov	r1, r4
 800696a:	f7fe fa1a 	bl	8004da2 <memset>
 800696e:	e7f4      	b.n	800695a <_calloc_r+0x16>

08006970 <__ascii_mbtowc>:
 8006970:	b082      	sub	sp, #8
 8006972:	b901      	cbnz	r1, 8006976 <__ascii_mbtowc+0x6>
 8006974:	a901      	add	r1, sp, #4
 8006976:	b142      	cbz	r2, 800698a <__ascii_mbtowc+0x1a>
 8006978:	b14b      	cbz	r3, 800698e <__ascii_mbtowc+0x1e>
 800697a:	7813      	ldrb	r3, [r2, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	1e10      	subs	r0, r2, #0
 8006982:	bf18      	it	ne
 8006984:	2001      	movne	r0, #1
 8006986:	b002      	add	sp, #8
 8006988:	4770      	bx	lr
 800698a:	4610      	mov	r0, r2
 800698c:	e7fb      	b.n	8006986 <__ascii_mbtowc+0x16>
 800698e:	f06f 0001 	mvn.w	r0, #1
 8006992:	e7f8      	b.n	8006986 <__ascii_mbtowc+0x16>

08006994 <_realloc_r>:
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006998:	4680      	mov	r8, r0
 800699a:	4614      	mov	r4, r2
 800699c:	460e      	mov	r6, r1
 800699e:	b921      	cbnz	r1, 80069aa <_realloc_r+0x16>
 80069a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a4:	4611      	mov	r1, r2
 80069a6:	f7ff b969 	b.w	8005c7c <_malloc_r>
 80069aa:	b92a      	cbnz	r2, 80069b8 <_realloc_r+0x24>
 80069ac:	f7ff f8f2 	bl	8005b94 <_free_r>
 80069b0:	4625      	mov	r5, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	f000 f841 	bl	8006a3e <_malloc_usable_size_r>
 80069bc:	4284      	cmp	r4, r0
 80069be:	4607      	mov	r7, r0
 80069c0:	d802      	bhi.n	80069c8 <_realloc_r+0x34>
 80069c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069c6:	d812      	bhi.n	80069ee <_realloc_r+0x5a>
 80069c8:	4621      	mov	r1, r4
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7ff f956 	bl	8005c7c <_malloc_r>
 80069d0:	4605      	mov	r5, r0
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0ed      	beq.n	80069b2 <_realloc_r+0x1e>
 80069d6:	42bc      	cmp	r4, r7
 80069d8:	4622      	mov	r2, r4
 80069da:	4631      	mov	r1, r6
 80069dc:	bf28      	it	cs
 80069de:	463a      	movcs	r2, r7
 80069e0:	f7ff ff84 	bl	80068ec <memcpy>
 80069e4:	4631      	mov	r1, r6
 80069e6:	4640      	mov	r0, r8
 80069e8:	f7ff f8d4 	bl	8005b94 <_free_r>
 80069ec:	e7e1      	b.n	80069b2 <_realloc_r+0x1e>
 80069ee:	4635      	mov	r5, r6
 80069f0:	e7df      	b.n	80069b2 <_realloc_r+0x1e>

080069f2 <__ascii_wctomb>:
 80069f2:	b149      	cbz	r1, 8006a08 <__ascii_wctomb+0x16>
 80069f4:	2aff      	cmp	r2, #255	; 0xff
 80069f6:	bf85      	ittet	hi
 80069f8:	238a      	movhi	r3, #138	; 0x8a
 80069fa:	6003      	strhi	r3, [r0, #0]
 80069fc:	700a      	strbls	r2, [r1, #0]
 80069fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a02:	bf98      	it	ls
 8006a04:	2001      	movls	r0, #1
 8006a06:	4770      	bx	lr
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4770      	bx	lr

08006a0c <fiprintf>:
 8006a0c:	b40e      	push	{r1, r2, r3}
 8006a0e:	b503      	push	{r0, r1, lr}
 8006a10:	4601      	mov	r1, r0
 8006a12:	ab03      	add	r3, sp, #12
 8006a14:	4805      	ldr	r0, [pc, #20]	; (8006a2c <fiprintf+0x20>)
 8006a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f000 f83f 	bl	8006aa0 <_vfiprintf_r>
 8006a22:	b002      	add	sp, #8
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	2000008c 	.word	0x2000008c

08006a30 <abort>:
 8006a30:	b508      	push	{r3, lr}
 8006a32:	2006      	movs	r0, #6
 8006a34:	f000 fa0c 	bl	8006e50 <raise>
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7fb f8a1 	bl	8001b80 <_exit>

08006a3e <_malloc_usable_size_r>:
 8006a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a42:	1f18      	subs	r0, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bfbc      	itt	lt
 8006a48:	580b      	ldrlt	r3, [r1, r0]
 8006a4a:	18c0      	addlt	r0, r0, r3
 8006a4c:	4770      	bx	lr

08006a4e <__sfputc_r>:
 8006a4e:	6893      	ldr	r3, [r2, #8]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	b410      	push	{r4}
 8006a56:	6093      	str	r3, [r2, #8]
 8006a58:	da08      	bge.n	8006a6c <__sfputc_r+0x1e>
 8006a5a:	6994      	ldr	r4, [r2, #24]
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	db01      	blt.n	8006a64 <__sfputc_r+0x16>
 8006a60:	290a      	cmp	r1, #10
 8006a62:	d103      	bne.n	8006a6c <__sfputc_r+0x1e>
 8006a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a68:	f000 b934 	b.w	8006cd4 <__swbuf_r>
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	1c58      	adds	r0, r3, #1
 8006a70:	6010      	str	r0, [r2, #0]
 8006a72:	7019      	strb	r1, [r3, #0]
 8006a74:	4608      	mov	r0, r1
 8006a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <__sfputs_r>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	4614      	mov	r4, r2
 8006a84:	18d5      	adds	r5, r2, r3
 8006a86:	42ac      	cmp	r4, r5
 8006a88:	d101      	bne.n	8006a8e <__sfputs_r+0x12>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e007      	b.n	8006a9e <__sfputs_r+0x22>
 8006a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a92:	463a      	mov	r2, r7
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff ffda 	bl	8006a4e <__sfputc_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d1f3      	bne.n	8006a86 <__sfputs_r+0xa>
 8006a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006aa0 <_vfiprintf_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	b09d      	sub	sp, #116	; 0x74
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	4698      	mov	r8, r3
 8006aac:	4606      	mov	r6, r0
 8006aae:	b118      	cbz	r0, 8006ab8 <_vfiprintf_r+0x18>
 8006ab0:	6a03      	ldr	r3, [r0, #32]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <_vfiprintf_r+0x18>
 8006ab4:	f7fe f8c8 	bl	8004c48 <__sinit>
 8006ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aba:	07d9      	lsls	r1, r3, #31
 8006abc:	d405      	bmi.n	8006aca <_vfiprintf_r+0x2a>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	059a      	lsls	r2, r3, #22
 8006ac2:	d402      	bmi.n	8006aca <_vfiprintf_r+0x2a>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac6:	f7fe f9e9 	bl	8004e9c <__retarget_lock_acquire_recursive>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	071b      	lsls	r3, r3, #28
 8006ace:	d501      	bpl.n	8006ad4 <_vfiprintf_r+0x34>
 8006ad0:	692b      	ldr	r3, [r5, #16]
 8006ad2:	b99b      	cbnz	r3, 8006afc <_vfiprintf_r+0x5c>
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f000 f93a 	bl	8006d50 <__swsetup_r>
 8006adc:	b170      	cbz	r0, 8006afc <_vfiprintf_r+0x5c>
 8006ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae0:	07dc      	lsls	r4, r3, #31
 8006ae2:	d504      	bpl.n	8006aee <_vfiprintf_r+0x4e>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	b01d      	add	sp, #116	; 0x74
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	0598      	lsls	r0, r3, #22
 8006af2:	d4f7      	bmi.n	8006ae4 <_vfiprintf_r+0x44>
 8006af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af6:	f7fe f9d2 	bl	8004e9e <__retarget_lock_release_recursive>
 8006afa:	e7f3      	b.n	8006ae4 <_vfiprintf_r+0x44>
 8006afc:	2300      	movs	r3, #0
 8006afe:	9309      	str	r3, [sp, #36]	; 0x24
 8006b00:	2320      	movs	r3, #32
 8006b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b0a:	2330      	movs	r3, #48	; 0x30
 8006b0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006cc0 <_vfiprintf_r+0x220>
 8006b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b14:	f04f 0901 	mov.w	r9, #1
 8006b18:	4623      	mov	r3, r4
 8006b1a:	469a      	mov	sl, r3
 8006b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b20:	b10a      	cbz	r2, 8006b26 <_vfiprintf_r+0x86>
 8006b22:	2a25      	cmp	r2, #37	; 0x25
 8006b24:	d1f9      	bne.n	8006b1a <_vfiprintf_r+0x7a>
 8006b26:	ebba 0b04 	subs.w	fp, sl, r4
 8006b2a:	d00b      	beq.n	8006b44 <_vfiprintf_r+0xa4>
 8006b2c:	465b      	mov	r3, fp
 8006b2e:	4622      	mov	r2, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ffa2 	bl	8006a7c <__sfputs_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f000 80a9 	beq.w	8006c90 <_vfiprintf_r+0x1f0>
 8006b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b40:	445a      	add	r2, fp
 8006b42:	9209      	str	r2, [sp, #36]	; 0x24
 8006b44:	f89a 3000 	ldrb.w	r3, [sl]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80a1 	beq.w	8006c90 <_vfiprintf_r+0x1f0>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b58:	f10a 0a01 	add.w	sl, sl, #1
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	9307      	str	r3, [sp, #28]
 8006b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b64:	931a      	str	r3, [sp, #104]	; 0x68
 8006b66:	4654      	mov	r4, sl
 8006b68:	2205      	movs	r2, #5
 8006b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6e:	4854      	ldr	r0, [pc, #336]	; (8006cc0 <_vfiprintf_r+0x220>)
 8006b70:	f7f9 fb36 	bl	80001e0 <memchr>
 8006b74:	9a04      	ldr	r2, [sp, #16]
 8006b76:	b9d8      	cbnz	r0, 8006bb0 <_vfiprintf_r+0x110>
 8006b78:	06d1      	lsls	r1, r2, #27
 8006b7a:	bf44      	itt	mi
 8006b7c:	2320      	movmi	r3, #32
 8006b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b82:	0713      	lsls	r3, r2, #28
 8006b84:	bf44      	itt	mi
 8006b86:	232b      	movmi	r3, #43	; 0x2b
 8006b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b90:	2b2a      	cmp	r3, #42	; 0x2a
 8006b92:	d015      	beq.n	8006bc0 <_vfiprintf_r+0x120>
 8006b94:	9a07      	ldr	r2, [sp, #28]
 8006b96:	4654      	mov	r4, sl
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f04f 0c0a 	mov.w	ip, #10
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba4:	3b30      	subs	r3, #48	; 0x30
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d94d      	bls.n	8006c46 <_vfiprintf_r+0x1a6>
 8006baa:	b1b0      	cbz	r0, 8006bda <_vfiprintf_r+0x13a>
 8006bac:	9207      	str	r2, [sp, #28]
 8006bae:	e014      	b.n	8006bda <_vfiprintf_r+0x13a>
 8006bb0:	eba0 0308 	sub.w	r3, r0, r8
 8006bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	46a2      	mov	sl, r4
 8006bbe:	e7d2      	b.n	8006b66 <_vfiprintf_r+0xc6>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	1d19      	adds	r1, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9103      	str	r1, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfbb      	ittet	lt
 8006bcc:	425b      	neglt	r3, r3
 8006bce:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd2:	9307      	strge	r3, [sp, #28]
 8006bd4:	9307      	strlt	r3, [sp, #28]
 8006bd6:	bfb8      	it	lt
 8006bd8:	9204      	strlt	r2, [sp, #16]
 8006bda:	7823      	ldrb	r3, [r4, #0]
 8006bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bde:	d10c      	bne.n	8006bfa <_vfiprintf_r+0x15a>
 8006be0:	7863      	ldrb	r3, [r4, #1]
 8006be2:	2b2a      	cmp	r3, #42	; 0x2a
 8006be4:	d134      	bne.n	8006c50 <_vfiprintf_r+0x1b0>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	9203      	str	r2, [sp, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bfb8      	it	lt
 8006bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf6:	3402      	adds	r4, #2
 8006bf8:	9305      	str	r3, [sp, #20]
 8006bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006cd0 <_vfiprintf_r+0x230>
 8006bfe:	7821      	ldrb	r1, [r4, #0]
 8006c00:	2203      	movs	r2, #3
 8006c02:	4650      	mov	r0, sl
 8006c04:	f7f9 faec 	bl	80001e0 <memchr>
 8006c08:	b138      	cbz	r0, 8006c1a <_vfiprintf_r+0x17a>
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	eba0 000a 	sub.w	r0, r0, sl
 8006c10:	2240      	movs	r2, #64	; 0x40
 8006c12:	4082      	lsls	r2, r0
 8006c14:	4313      	orrs	r3, r2
 8006c16:	3401      	adds	r4, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	4829      	ldr	r0, [pc, #164]	; (8006cc4 <_vfiprintf_r+0x224>)
 8006c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c24:	2206      	movs	r2, #6
 8006c26:	f7f9 fadb 	bl	80001e0 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d03f      	beq.n	8006cae <_vfiprintf_r+0x20e>
 8006c2e:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <_vfiprintf_r+0x228>)
 8006c30:	bb1b      	cbnz	r3, 8006c7a <_vfiprintf_r+0x1da>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	443b      	add	r3, r7
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	e768      	b.n	8006b18 <_vfiprintf_r+0x78>
 8006c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7a6      	b.n	8006b9e <_vfiprintf_r+0xfe>
 8006c50:	2300      	movs	r3, #0
 8006c52:	3401      	adds	r4, #1
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	4619      	mov	r1, r3
 8006c58:	f04f 0c0a 	mov.w	ip, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c62:	3a30      	subs	r2, #48	; 0x30
 8006c64:	2a09      	cmp	r2, #9
 8006c66:	d903      	bls.n	8006c70 <_vfiprintf_r+0x1d0>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0c6      	beq.n	8006bfa <_vfiprintf_r+0x15a>
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	e7c4      	b.n	8006bfa <_vfiprintf_r+0x15a>
 8006c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c74:	4604      	mov	r4, r0
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7f0      	b.n	8006c5c <_vfiprintf_r+0x1bc>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <_vfiprintf_r+0x22c>)
 8006c82:	a904      	add	r1, sp, #16
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7fd fb9f 	bl	80043c8 <_printf_float>
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	1c78      	adds	r0, r7, #1
 8006c8e:	d1d6      	bne.n	8006c3e <_vfiprintf_r+0x19e>
 8006c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c92:	07d9      	lsls	r1, r3, #31
 8006c94:	d405      	bmi.n	8006ca2 <_vfiprintf_r+0x202>
 8006c96:	89ab      	ldrh	r3, [r5, #12]
 8006c98:	059a      	lsls	r2, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_vfiprintf_r+0x202>
 8006c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c9e:	f7fe f8fe 	bl	8004e9e <__retarget_lock_release_recursive>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	065b      	lsls	r3, r3, #25
 8006ca6:	f53f af1d 	bmi.w	8006ae4 <_vfiprintf_r+0x44>
 8006caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cac:	e71c      	b.n	8006ae8 <_vfiprintf_r+0x48>
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <_vfiprintf_r+0x22c>)
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7fd fe29 	bl	8004910 <_printf_i>
 8006cbe:	e7e4      	b.n	8006c8a <_vfiprintf_r+0x1ea>
 8006cc0:	080071fc 	.word	0x080071fc
 8006cc4:	08007206 	.word	0x08007206
 8006cc8:	080043c9 	.word	0x080043c9
 8006ccc:	08006a7d 	.word	0x08006a7d
 8006cd0:	08007202 	.word	0x08007202

08006cd4 <__swbuf_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b118      	cbz	r0, 8006ce6 <__swbuf_r+0x12>
 8006cde:	6a03      	ldr	r3, [r0, #32]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <__swbuf_r+0x12>
 8006ce2:	f7fd ffb1 	bl	8004c48 <__sinit>
 8006ce6:	69a3      	ldr	r3, [r4, #24]
 8006ce8:	60a3      	str	r3, [r4, #8]
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	071a      	lsls	r2, r3, #28
 8006cee:	d525      	bpl.n	8006d3c <__swbuf_r+0x68>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	b31b      	cbz	r3, 8006d3c <__swbuf_r+0x68>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	6922      	ldr	r2, [r4, #16]
 8006cf8:	1a98      	subs	r0, r3, r2
 8006cfa:	6963      	ldr	r3, [r4, #20]
 8006cfc:	b2f6      	uxtb	r6, r6
 8006cfe:	4283      	cmp	r3, r0
 8006d00:	4637      	mov	r7, r6
 8006d02:	dc04      	bgt.n	8006d0e <__swbuf_r+0x3a>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f7ff fd9e 	bl	8006848 <_fflush_r>
 8006d0c:	b9e0      	cbnz	r0, 8006d48 <__swbuf_r+0x74>
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	701e      	strb	r6, [r3, #0]
 8006d1c:	6962      	ldr	r2, [r4, #20]
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d004      	beq.n	8006d2e <__swbuf_r+0x5a>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	07db      	lsls	r3, r3, #31
 8006d28:	d506      	bpl.n	8006d38 <__swbuf_r+0x64>
 8006d2a:	2e0a      	cmp	r6, #10
 8006d2c:	d104      	bne.n	8006d38 <__swbuf_r+0x64>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7ff fd89 	bl	8006848 <_fflush_r>
 8006d36:	b938      	cbnz	r0, 8006d48 <__swbuf_r+0x74>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f806 	bl	8006d50 <__swsetup_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0d5      	beq.n	8006cf4 <__swbuf_r+0x20>
 8006d48:	f04f 37ff 	mov.w	r7, #4294967295
 8006d4c:	e7f4      	b.n	8006d38 <__swbuf_r+0x64>
	...

08006d50 <__swsetup_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <__swsetup_r+0xac>)
 8006d54:	4605      	mov	r5, r0
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	460c      	mov	r4, r1
 8006d5a:	b118      	cbz	r0, 8006d64 <__swsetup_r+0x14>
 8006d5c:	6a03      	ldr	r3, [r0, #32]
 8006d5e:	b90b      	cbnz	r3, 8006d64 <__swsetup_r+0x14>
 8006d60:	f7fd ff72 	bl	8004c48 <__sinit>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d6a:	0718      	lsls	r0, r3, #28
 8006d6c:	d422      	bmi.n	8006db4 <__swsetup_r+0x64>
 8006d6e:	06d9      	lsls	r1, r3, #27
 8006d70:	d407      	bmi.n	8006d82 <__swsetup_r+0x32>
 8006d72:	2309      	movs	r3, #9
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	e034      	b.n	8006dec <__swsetup_r+0x9c>
 8006d82:	0758      	lsls	r0, r3, #29
 8006d84:	d512      	bpl.n	8006dac <__swsetup_r+0x5c>
 8006d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d88:	b141      	cbz	r1, 8006d9c <__swsetup_r+0x4c>
 8006d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	d002      	beq.n	8006d98 <__swsetup_r+0x48>
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7fe fefe 	bl	8005b94 <_free_r>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	2300      	movs	r3, #0
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f043 0308 	orr.w	r3, r3, #8
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b94b      	cbnz	r3, 8006dcc <__swsetup_r+0x7c>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc2:	d003      	beq.n	8006dcc <__swsetup_r+0x7c>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f884 	bl	8006ed4 <__smakebuf_r>
 8006dcc:	89a0      	ldrh	r0, [r4, #12]
 8006dce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd2:	f010 0301 	ands.w	r3, r0, #1
 8006dd6:	d00a      	beq.n	8006dee <__swsetup_r+0x9e>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	425b      	negs	r3, r3
 8006de0:	61a3      	str	r3, [r4, #24]
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	b943      	cbnz	r3, 8006df8 <__swsetup_r+0xa8>
 8006de6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dea:	d1c4      	bne.n	8006d76 <__swsetup_r+0x26>
 8006dec:	bd38      	pop	{r3, r4, r5, pc}
 8006dee:	0781      	lsls	r1, r0, #30
 8006df0:	bf58      	it	pl
 8006df2:	6963      	ldrpl	r3, [r4, #20]
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	e7f4      	b.n	8006de2 <__swsetup_r+0x92>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e7f7      	b.n	8006dec <__swsetup_r+0x9c>
 8006dfc:	2000008c 	.word	0x2000008c

08006e00 <_raise_r>:
 8006e00:	291f      	cmp	r1, #31
 8006e02:	b538      	push	{r3, r4, r5, lr}
 8006e04:	4604      	mov	r4, r0
 8006e06:	460d      	mov	r5, r1
 8006e08:	d904      	bls.n	8006e14 <_raise_r+0x14>
 8006e0a:	2316      	movs	r3, #22
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e16:	b112      	cbz	r2, 8006e1e <_raise_r+0x1e>
 8006e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e1c:	b94b      	cbnz	r3, 8006e32 <_raise_r+0x32>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f830 	bl	8006e84 <_getpid_r>
 8006e24:	462a      	mov	r2, r5
 8006e26:	4601      	mov	r1, r0
 8006e28:	4620      	mov	r0, r4
 8006e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2e:	f000 b817 	b.w	8006e60 <_kill_r>
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d00a      	beq.n	8006e4c <_raise_r+0x4c>
 8006e36:	1c59      	adds	r1, r3, #1
 8006e38:	d103      	bne.n	8006e42 <_raise_r+0x42>
 8006e3a:	2316      	movs	r3, #22
 8006e3c:	6003      	str	r3, [r0, #0]
 8006e3e:	2001      	movs	r0, #1
 8006e40:	e7e7      	b.n	8006e12 <_raise_r+0x12>
 8006e42:	2400      	movs	r4, #0
 8006e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e48:	4628      	mov	r0, r5
 8006e4a:	4798      	blx	r3
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e7e0      	b.n	8006e12 <_raise_r+0x12>

08006e50 <raise>:
 8006e50:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <raise+0xc>)
 8006e52:	4601      	mov	r1, r0
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	f7ff bfd3 	b.w	8006e00 <_raise_r>
 8006e5a:	bf00      	nop
 8006e5c:	2000008c 	.word	0x2000008c

08006e60 <_kill_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d07      	ldr	r5, [pc, #28]	; (8006e80 <_kill_r+0x20>)
 8006e64:	2300      	movs	r3, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	f7fa fe77 	bl	8001b60 <_kill>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	d102      	bne.n	8006e7c <_kill_r+0x1c>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	b103      	cbz	r3, 8006e7c <_kill_r+0x1c>
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	bf00      	nop
 8006e80:	2000041c 	.word	0x2000041c

08006e84 <_getpid_r>:
 8006e84:	f7fa be64 	b.w	8001b50 <_getpid>

08006e88 <__swhatbuf_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	2900      	cmp	r1, #0
 8006e92:	b096      	sub	sp, #88	; 0x58
 8006e94:	4615      	mov	r5, r2
 8006e96:	461e      	mov	r6, r3
 8006e98:	da0d      	bge.n	8006eb6 <__swhatbuf_r+0x2e>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	bf0c      	ite	eq
 8006ea6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006eaa:	2340      	movne	r3, #64	; 0x40
 8006eac:	2000      	movs	r0, #0
 8006eae:	6031      	str	r1, [r6, #0]
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	b016      	add	sp, #88	; 0x58
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	466a      	mov	r2, sp
 8006eb8:	f000 f848 	bl	8006f4c <_fstat_r>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	dbec      	blt.n	8006e9a <__swhatbuf_r+0x12>
 8006ec0:	9901      	ldr	r1, [sp, #4]
 8006ec2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ec6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006eca:	4259      	negs	r1, r3
 8006ecc:	4159      	adcs	r1, r3
 8006ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed2:	e7eb      	b.n	8006eac <__swhatbuf_r+0x24>

08006ed4 <__smakebuf_r>:
 8006ed4:	898b      	ldrh	r3, [r1, #12]
 8006ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed8:	079d      	lsls	r5, r3, #30
 8006eda:	4606      	mov	r6, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	d507      	bpl.n	8006ef0 <__smakebuf_r+0x1c>
 8006ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	b002      	add	sp, #8
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	ab01      	add	r3, sp, #4
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	f7ff ffc8 	bl	8006e88 <__swhatbuf_r>
 8006ef8:	9900      	ldr	r1, [sp, #0]
 8006efa:	4605      	mov	r5, r0
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7fe febd 	bl	8005c7c <_malloc_r>
 8006f02:	b948      	cbnz	r0, 8006f18 <__smakebuf_r+0x44>
 8006f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f08:	059a      	lsls	r2, r3, #22
 8006f0a:	d4ef      	bmi.n	8006eec <__smakebuf_r+0x18>
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	e7e3      	b.n	8006ee0 <__smakebuf_r+0xc>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	9b00      	ldr	r3, [sp, #0]
 8006f24:	6163      	str	r3, [r4, #20]
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	6120      	str	r0, [r4, #16]
 8006f2a:	b15b      	cbz	r3, 8006f44 <__smakebuf_r+0x70>
 8006f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f81d 	bl	8006f70 <_isatty_r>
 8006f36:	b128      	cbz	r0, 8006f44 <__smakebuf_r+0x70>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	431d      	orrs	r5, r3
 8006f48:	81a5      	strh	r5, [r4, #12]
 8006f4a:	e7cf      	b.n	8006eec <__smakebuf_r+0x18>

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa fe60 	bl	8001c1e <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000041c 	.word	0x2000041c

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	; (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa fe5f 	bl	8001c3e <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	2000041c 	.word	0x2000041c

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
