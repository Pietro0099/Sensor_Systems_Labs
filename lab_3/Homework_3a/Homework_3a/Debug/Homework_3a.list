
Homework_3a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d68  08003d68  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d70  08003d70  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08003dd4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003dd4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084d2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001716  00000000  00000000  000285a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00029cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000531  00000000  00000000  0002a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015618  00000000  00000000  0002a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fe7  00000000  00000000  0003fed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084c7e  00000000  00000000  00048eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fc4  00000000  00000000  000cdb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000cfafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ce4 	.word	0x08003ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003ce4 	.word	0x08003ce4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 faae 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f828 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8dc 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f8ba 	bl	8000704 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f88e 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = snprintf(identity, sizeof(identity), "Francesco Pallotto %d\n\r", 1999);
 8000594:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0x4c>)
 800059a:	211a      	movs	r1, #26
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <main+0x50>)
 800059e:	f002 fee9 	bl	8003374 <sniprintf>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <main+0x54>)
 80005a8:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)identity, uart_buf_len);
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <main+0x54>)
 80005ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	4905      	ldr	r1, [pc, #20]	; (80005cc <main+0x50>)
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <main+0x58>)
 80005b8:	f001 fec0 	bl	800233c <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c0:	f000 fb00 	bl	8000bc4 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)identity, uart_buf_len);
 80005c4:	e7f1      	b.n	80005aa <main+0x2e>
 80005c6:	bf00      	nop
 80005c8:	08003cfc 	.word	0x08003cfc
 80005cc:	2000011c 	.word	0x2000011c
 80005d0:	20000136 	.word	0x20000136
 80005d4:	20000078 	.word	0x20000078

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fef8 	bl	80033dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd4>)
 8000626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f984 	bl	8001970 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066e:	f000 f8d7 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fbe6 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 f8c1 	bl	8000820 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART2_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e8:	f001 fdda 	bl	80022a0 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f895 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000078 	.word	0x20000078
 8000700:	40004400 	.word	0x40004400

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_DMA_Init+0x3c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MX_DMA_Init+0x3c>)
 8000714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2011      	movs	r0, #17
 800072c:	f000 fb49 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000730:	2011      	movs	r0, #17
 8000732:	f000 fb62 	bl	8000dfa <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_GPIO_Init+0xd4>)
 80007d0:	f001 f8b4 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_GPIO_Init+0xd8>)
 80007ec:	f000 ff22 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xd4>)
 8000808:	f000 ff14 	bl	8001634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fa9e 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a34      	ldr	r2, [pc, #208]	; (800096c <HAL_UART_MspInit+0xf0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d162      	bne.n	8000964 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a32      	ldr	r2, [pc, #200]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_UART_MspInit+0xf4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4820      	ldr	r0, [pc, #128]	; (8000974 <HAL_UART_MspInit+0xf8>)
 80008f2:	f000 fe9f 	bl	8001634 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_UART_MspInit+0xfc>)
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_UART_MspInit+0x100>)
 80008fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_UART_MspInit+0xfc>)
 80008fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000902:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_UART_MspInit+0xfc>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000916:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0xfc>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_UART_MspInit+0xfc>)
 800092c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000930:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000938:	480f      	ldr	r0, [pc, #60]	; (8000978 <HAL_UART_MspInit+0xfc>)
 800093a:	f000 fa79 	bl	8000e30 <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000944:	f7ff ff6c 	bl	8000820 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_UART_MspInit+0xfc>)
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_UART_MspInit+0xfc>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2026      	movs	r0, #38	; 0x26
 800095a:	f000 fa32 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f000 fa4b 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	200000bc 	.word	0x200000bc
 800097c:	400260a0 	.word	0x400260a0

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f8da 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <DMA1_Stream6_IRQHandler+0x10>)
 80009da:	f000 fbc1 	bl	8001160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000bc 	.word	0x200000bc

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USART2_IRQHandler+0x10>)
 80009ee:	f001 fd23 	bl	8002438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f002 fcde 	bl	80033ec <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20018000 	.word	0x20018000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	20000138 	.word	0x20000138
 8000a64:	20000288 	.word	0x20000288

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ffd7 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f002 fc9d 	bl	80033f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fd5d 	bl	800057c <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ad0:	08003d78 	.word	0x08003d78
  ldr r2, =_sbss
 8000ad4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ad8:	20000288 	.word	0x20000288

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f94f 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe8a 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f967 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f92f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000013c 	.word	0x2000013c

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000013c 	.word	0x2000013c

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff feb6 	bl	8000bac <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e099      	b.n	8000f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0201 	bic.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6c:	e00f      	b.n	8000e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6e:	f7ff fe9d 	bl	8000bac <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d908      	bls.n	8000e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2220      	movs	r2, #32
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e078      	b.n	8000f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e8      	bne.n	8000e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <HAL_DMA_Init+0x158>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d107      	bne.n	8000ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f023 0307 	bic.w	r3, r3, #7
 8000f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d117      	bne.n	8000f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00e      	beq.n	8000f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fb01 	bl	800153c <DMA_CheckFifoParam>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e016      	b.n	8000f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fab8 	bl	80014d0 <DMA_CalcBaseAndBitshift>
 8000f60:	4603      	mov	r3, r0
 8000f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	223f      	movs	r2, #63	; 0x3f
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	f010803f 	.word	0xf010803f

08000f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_DMA_Start_IT+0x26>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e040      	b.n	8001034 <HAL_DMA_Start_IT+0xa8>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d12f      	bne.n	8001026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fa4a 	bl	8001474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe4:	223f      	movs	r2, #63	; 0x3f
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0216 	orr.w	r2, r2, #22
 8000ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0208 	orr.w	r2, r2, #8
 8001012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e005      	b.n	8001032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800102e:	2302      	movs	r3, #2
 8001030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800104a:	f7ff fdaf 	bl	8000bac <HAL_GetTick>
 800104e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d008      	beq.n	800106e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e052      	b.n	8001114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0216 	bic.w	r2, r2, #22
 800107c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800108c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <HAL_DMA_Abort+0x62>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0208 	bic.w	r2, r2, #8
 80010ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0201 	bic.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	e013      	b.n	80010e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c0:	f7ff fd74 	bl	8000bac <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d90c      	bls.n	80010e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2220      	movs	r2, #32
 80010d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e015      	b.n	8001114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1e4      	bne.n	80010c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	223f      	movs	r2, #63	; 0x3f
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d004      	beq.n	800113a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00c      	b.n	8001154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800116c:	4b8e      	ldr	r3, [pc, #568]	; (80013a8 <HAL_DMA_IRQHandler+0x248>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a8e      	ldr	r2, [pc, #568]	; (80013ac <HAL_DMA_IRQHandler+0x24c>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0a9b      	lsrs	r3, r3, #10
 8001178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2208      	movs	r2, #8
 800118c:	409a      	lsls	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01a      	beq.n	80011cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	2208      	movs	r2, #8
 80011ba:	409a      	lsls	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2201      	movs	r2, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d012      	beq.n	8001202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ee:	2201      	movs	r2, #1
 80011f0:	409a      	lsls	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f043 0202 	orr.w	r2, r3, #2
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2204      	movs	r2, #4
 8001208:	409a      	lsls	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d012      	beq.n	8001238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	2204      	movs	r2, #4
 8001226:	409a      	lsls	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	f043 0204 	orr.w	r2, r3, #4
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	2210      	movs	r2, #16
 800123e:	409a      	lsls	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d043      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d03c      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125a:	2210      	movs	r2, #16
 800125c:	409a      	lsls	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d018      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d108      	bne.n	8001290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d024      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
 800128e:	e01f      	b.n	80012d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01b      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
 80012a0:	e016      	b.n	80012d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d107      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0208 	bic.w	r2, r2, #8
 80012be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d4:	2220      	movs	r2, #32
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 808f 	beq.w	8001400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8087 	beq.w	8001400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2220      	movs	r2, #32
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b05      	cmp	r3, #5
 8001308:	d136      	bne.n	8001378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0216 	bic.w	r2, r2, #22
 8001318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <HAL_DMA_IRQHandler+0x1da>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0208 	bic.w	r2, r2, #8
 8001348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134e:	223f      	movs	r2, #63	; 0x3f
 8001350:	409a      	lsls	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136a:	2b00      	cmp	r3, #0
 800136c:	d07e      	beq.n	800146c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	4798      	blx	r3
        }
        return;
 8001376:	e079      	b.n	800146c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01d      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10d      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	2b00      	cmp	r3, #0
 800139a:	d031      	beq.n	8001400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	4798      	blx	r3
 80013a4:	e02c      	b.n	8001400 <HAL_DMA_IRQHandler+0x2a0>
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000
 80013ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d023      	beq.n	8001400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
 80013c0:	e01e      	b.n	8001400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0210 	bic.w	r2, r2, #16
 80013de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	2b00      	cmp	r3, #0
 8001406:	d032      	beq.n	800146e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d022      	beq.n	800145a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2205      	movs	r2, #5
 8001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d307      	bcc.n	8001448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f2      	bne.n	800142c <HAL_DMA_IRQHandler+0x2cc>
 8001446:	e000      	b.n	800144a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4798      	blx	r3
 800146a:	e000      	b.n	800146e <HAL_DMA_IRQHandler+0x30e>
        return;
 800146c:	bf00      	nop
    }
  }
}
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b40      	cmp	r3, #64	; 0x40
 80014a0:	d108      	bne.n	80014b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014b2:	e007      	b.n	80014c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3b10      	subs	r3, #16
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <DMA_CalcBaseAndBitshift+0x64>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <DMA_CalcBaseAndBitshift+0x68>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d909      	bls.n	8001512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	1d1a      	adds	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
 8001510:	e007      	b.n	8001522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	aaaaaaab 	.word	0xaaaaaaab
 8001538:	08003d2c 	.word	0x08003d2c

0800153c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d11f      	bne.n	8001596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d856      	bhi.n	800160a <DMA_CheckFifoParam+0xce>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <DMA_CheckFifoParam+0x28>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001587 	.word	0x08001587
 800156c:	08001575 	.word	0x08001575
 8001570:	0800160b 	.word	0x0800160b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d046      	beq.n	800160e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001584:	e043      	b.n	800160e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800158e:	d140      	bne.n	8001612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001594:	e03d      	b.n	8001612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159e:	d121      	bne.n	80015e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d837      	bhi.n	8001616 <DMA_CheckFifoParam+0xda>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <DMA_CheckFifoParam+0x70>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015c3 	.word	0x080015c3
 80015b4:	080015bd 	.word	0x080015bd
 80015b8:	080015d5 	.word	0x080015d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      break;
 80015c0:	e030      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d025      	beq.n	800161a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d2:	e022      	b.n	800161a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015dc:	d11f      	bne.n	800161e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015e2:	e01c      	b.n	800161e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d903      	bls.n	80015f2 <DMA_CheckFifoParam+0xb6>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d003      	beq.n	80015f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015f0:	e018      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      break;
 80015f6:	e015      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00e      	beq.n	8001622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
      break;
 8001608:	e00b      	b.n	8001622 <DMA_CheckFifoParam+0xe6>
      break;
 800160a:	bf00      	nop
 800160c:	e00a      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 800160e:	bf00      	nop
 8001610:	e008      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
 8001614:	e006      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001616:	bf00      	nop
 8001618:	e004      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 800161a:	bf00      	nop
 800161c:	e002      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;   
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
    }
  } 
  
  return status; 
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e159      	b.n	8001904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8148 	bne.w	80018fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a2 	beq.w	80018fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_GPIO_Init+0x2ec>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x2f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x202>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x1fe>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_GPIO_Init+0x2f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x1fa>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a46      	ldr	r2, [pc, #280]	; (8001930 <HAL_GPIO_Init+0x2fc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x1f6>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_GPIO_Init+0x300>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x1f2>
 8001822:	2304      	movs	r3, #4
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001826:	2307      	movs	r3, #7
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x204>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x204>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x2ec>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x304>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ce:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f aea2 	bls.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40013c00 	.word	0x40013c00

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001958:	e003      	b.n	8001962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	041a      	lsls	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e267      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d075      	beq.n	8001a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198e:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e242      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x74>
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a75      	ldr	r2, [pc, #468]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x98>
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6c      	ldr	r2, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 8001a08:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a68      	ldr	r2, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8c0 	bl	8000bac <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f8bc 	bl	8000bac <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e207      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xc0>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8ac 	bl	8000bac <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f8a8 	bl	8000bac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1f3      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0xe8>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1c7      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	e03a      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x244>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f861 	bl	8000bac <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff f85d 	bl	8000bac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1a8      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0x244>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f840 	bl	8000bac <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f83c 	bl	8000bac <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e187      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d036      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_RCC_OscConfig+0x248>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f820 	bl	8000bac <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f81c 	bl	8000bac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e167      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x200>
 8001b8e:	e01b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x248>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f809 	bl	8000bac <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	e00e      	b.n	8001bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff f805 	bl	8000bac <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d907      	bls.n	8001bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e150      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	42470000 	.word	0x42470000
 8001bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ea      	bne.n	8001b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8097 	beq.w	8001d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b81      	ldr	r3, [pc, #516]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b7a      	ldr	r3, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b77      	ldr	r3, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d118      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ffc5 	bl	8000bac <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7fe ffc1 	bl	8000bac <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e10c      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2ea>
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	e01c      	b.n	8001c94 <HAL_RCC_OscConfig+0x324>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x30c>
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0x324>
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a57      	ldr	r2, [pc, #348]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 0304 	bic.w	r3, r3, #4
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d015      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ff86 	bl	8000bac <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7fe ff82 	bl	8000bac <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0cb      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ee      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x334>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ff70 	bl	8000bac <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ff6c 	bl	8000bac <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0b5      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ee      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80a1 	beq.w	8001e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d05c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d141      	bne.n	8001da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe ff40 	bl	8000bac <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ff3c 	bl	8000bac <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e087      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	491b      	ldr	r1, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff15 	bl	8000bac <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe ff11 	bl	8000bac <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e05c      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x416>
 8001da4:	e054      	b.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fefe 	bl	8000bac <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fefa 	bl	8000bac <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e045      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x444>
 8001dd2:	e03d      	b.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e038      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x4ec>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d028      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d121      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0cc      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d90c      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b65      	ldr	r3, [pc, #404]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d044      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d119      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e06f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e067      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4934      	ldr	r1, [pc, #208]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe2c 	bl	8000bac <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fe28 	bl	8000bac <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e04f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d20c      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fe6:	f000 f821 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fd8c 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023c00 	.word	0x40023c00
 800201c:	40023800 	.word	0x40023800
 8002020:	08003d14 	.word	0x08003d14
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002030:	b094      	sub	sp, #80	; 0x50
 8002032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800203c:	2300      	movs	r3, #0
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002044:	4b79      	ldr	r3, [pc, #484]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d00d      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x40>
 8002050:	2b08      	cmp	r3, #8
 8002052:	f200 80e1 	bhi.w	8002218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x34>
 800205a:	2b04      	cmp	r3, #4
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x3a>
 800205e:	e0db      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b73      	ldr	r3, [pc, #460]	; (8002230 <HAL_RCC_GetSysClockFreq+0x204>)
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002064:	e0db      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_GetSysClockFreq+0x208>)
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206a:	e0d8      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	2200      	movs	r2, #0
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
 800208c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
 800209a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800209e:	4622      	mov	r2, r4
 80020a0:	462b      	mov	r3, r5
 80020a2:	f04f 0000 	mov.w	r0, #0
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	0159      	lsls	r1, r3, #5
 80020ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b0:	0150      	lsls	r0, r2, #5
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4621      	mov	r1, r4
 80020b8:	1a51      	subs	r1, r2, r1
 80020ba:	6139      	str	r1, [r7, #16]
 80020bc:	4629      	mov	r1, r5
 80020be:	eb63 0301 	sbc.w	r3, r3, r1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d0:	4659      	mov	r1, fp
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	4651      	mov	r1, sl
 80020d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020da:	4651      	mov	r1, sl
 80020dc:	018a      	lsls	r2, r1, #6
 80020de:	4651      	mov	r1, sl
 80020e0:	ebb2 0801 	subs.w	r8, r2, r1
 80020e4:	4659      	mov	r1, fp
 80020e6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	4623      	mov	r3, r4
 8002104:	eb18 0303 	adds.w	r3, r8, r3
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	462b      	mov	r3, r5
 800210c:	eb49 0303 	adc.w	r3, r9, r3
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800211e:	4629      	mov	r1, r5
 8002120:	024b      	lsls	r3, r1, #9
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002128:	4621      	mov	r1, r4
 800212a:	024a      	lsls	r2, r1, #9
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002132:	2200      	movs	r2, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
 8002136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800213c:	f7fe f8a0 	bl	8000280 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002148:	e058      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	4618      	mov	r0, r3
 8002154:	4611      	mov	r1, r2
 8002156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0159      	lsls	r1, r3, #5
 8002172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002176:	0150      	lsls	r0, r2, #5
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4641      	mov	r1, r8
 800217e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002182:	4649      	mov	r1, r9
 8002184:	eb63 0b01 	sbc.w	fp, r3, r1
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800219c:	ebb2 040a 	subs.w	r4, r2, sl
 80021a0:	eb63 050b 	sbc.w	r5, r3, fp
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b2:	00e2      	lsls	r2, r4, #3
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	18e3      	adds	r3, r4, r3
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	464b      	mov	r3, r9
 80021c0:	eb45 0303 	adc.w	r3, r5, r3
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d2:	4629      	mov	r1, r5
 80021d4:	028b      	lsls	r3, r1, #10
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021dc:	4621      	mov	r1, r4
 80021de:	028a      	lsls	r2, r1, #10
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	61fa      	str	r2, [r7, #28]
 80021ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f0:	f7fe f846 	bl	8000280 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800220c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800220e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002216:	e002      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetSysClockFreq+0x204>)
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800221c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002220:	4618      	mov	r0, r3
 8002222:	3750      	adds	r7, #80	; 0x50
 8002224:	46bd      	mov	sp, r7
 8002226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_GetHCLKFreq+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002254:	f7ff fff0 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a9b      	lsrs	r3, r3, #10
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4903      	ldr	r1, [pc, #12]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	08003d24 	.word	0x08003d24

08002278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800227c:	f7ff ffdc 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0b5b      	lsrs	r3, r3, #13
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK2Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	08003d24 	.word	0x08003d24

080022a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e03f      	b.n	8002332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fad8 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fdd1 	bl	8002e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d165      	bne.n	8002422 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Transmit_DMA+0x26>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e05e      	b.n	8002424 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit_DMA+0x38>
 8002370:	2302      	movs	r3, #2
 8002372:	e057      	b.n	8002424 <HAL_UART_Transmit_DMA+0xe8>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_UART_Transmit_DMA+0xf0>)
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_UART_Transmit_DMA+0xf4>)
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_UART_Transmit_DMA+0xf8>)
 80023b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2200      	movs	r2, #0
 80023ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3304      	adds	r3, #4
 80023d0:	461a      	mov	r2, r3
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	f7fe fdda 	bl	8000f8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	617b      	str	r3, [r7, #20]
   return(result);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240a:	627a      	str	r2, [r7, #36]	; 0x24
 800240c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	6a39      	ldr	r1, [r7, #32]
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	61fb      	str	r3, [r7, #28]
   return(result);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e5      	bne.n	80023ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3730      	adds	r7, #48	; 0x30
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	080029bd 	.word	0x080029bd
 8002430:	08002a57 	.word	0x08002a57
 8002434:	08002a73 	.word	0x08002a73

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	; 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fc3c 	bl	8002d14 <UART_Receive_IT>
      return;
 800249c:	e256      	b.n	800294c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81ed 	beq.w	8002942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fbc7 	bl	8002d14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 facf 	bl	8002b56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4a7d      	ldr	r2, [pc, #500]	; (8002814 <HAL_UART_IRQHandler+0x3dc>)
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd78 	bl	800111c <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9a4 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9a0 	bl	8002990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f99c 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800265e:	e170      	b.n	8002942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e16e      	b.n	8002942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 814a 	bne.w	8002902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8143 	beq.w	8002902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 813c 	beq.w	8002902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	f040 80b4 	bne.w	8002818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8140 	beq.w	8002946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 8139 	bcs.w	8002946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800275e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fc21 	bl	800103c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002802:	b29b      	uxth	r3, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8ca 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002810:	e099      	b.n	8002946 <HAL_UART_IRQHandler+0x50e>
 8002812:	bf00      	nop
 8002814:	08002c1d 	.word	0x08002c1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002820:	b29b      	uxth	r3, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 808b 	beq.w	800294a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8086 	beq.w	800294a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002862:	647a      	str	r2, [r7, #68]	; 0x44
 8002864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e3      	bne.n	800283e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	e853 3f00 	ldrex	r3, [r3]
 8002884:	623b      	str	r3, [r7, #32]
   return(result);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800289a:	633a      	str	r2, [r7, #48]	; 0x30
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e3      	bne.n	8002876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0310 	bic.w	r3, r3, #16
 80028d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	617b      	str	r3, [r7, #20]
   return(result);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e3      	bne.n	80028bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f852 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002900:	e023      	b.n	800294a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_UART_IRQHandler+0x4ea>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f992 	bl	8002c44 <UART_Transmit_IT>
    return;
 8002920:	e014      	b.n	800294c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <HAL_UART_IRQHandler+0x514>
 800292e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9d2 	bl	8002ce4 <UART_EndTransmit_IT>
    return;
 8002940:	e004      	b.n	800294c <HAL_UART_IRQHandler+0x514>
    return;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_UART_IRQHandler+0x514>
      return;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_UART_IRQHandler+0x514>
      return;
 800294a:	bf00      	nop
  }
}
 800294c:	37e8      	adds	r7, #232	; 0xe8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b090      	sub	sp, #64	; 0x40
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d137      	bne.n	8002a48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	2200      	movs	r2, #0
 80029dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80029de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	623b      	str	r3, [r7, #32]
   return(result);
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e5      	bne.n	80029de <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a32:	61fa      	str	r2, [r7, #28]
 8002a34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	617b      	str	r3, [r7, #20]
   return(result);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e5      	bne.n	8002a12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a46:	e002      	b.n	8002a4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002a48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a4a:	f7ff ff83 	bl	8002954 <HAL_UART_TxCpltCallback>
}
 8002a4e:	bf00      	nop
 8002a50:	3740      	adds	r7, #64	; 0x40
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff ff7f 	bl	8002968 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b21      	cmp	r3, #33	; 0x21
 8002aa4:	d108      	bne.n	8002ab8 <UART_DMAError+0x46>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ab2:	68b8      	ldr	r0, [r7, #8]
 8002ab4:	f000 f827 	bl	8002b06 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b22      	cmp	r3, #34	; 0x22
 8002ad8:	d108      	bne.n	8002aec <UART_DMAError+0x7a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f000 f835 	bl	8002b56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002af8:	68b8      	ldr	r0, [r7, #8]
 8002afa:	f7ff ff49 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b089      	sub	sp, #36	; 0x24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	61ba      	str	r2, [r7, #24]
 8002b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b095      	sub	sp, #84	; 0x54
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7e:	643a      	str	r2, [r7, #64]	; 0x40
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d119      	bne.n	8002c02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 0310 	bic.w	r3, r3, #16
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bee:	61ba      	str	r2, [r7, #24]
 8002bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	6979      	ldr	r1, [r7, #20]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e5      	bne.n	8002bce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c10:	bf00      	nop
 8002c12:	3754      	adds	r7, #84	; 0x54
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff feaa 	bl	8002990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b21      	cmp	r3, #33	; 0x21
 8002c56:	d13e      	bne.n	8002cd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c60:	d114      	bne.n	8002c8c <UART_Transmit_IT+0x48>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d110      	bne.n	8002c8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]
 8002c8a:	e008      	b.n	8002c9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	1c59      	adds	r1, r3, #1
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6211      	str	r1, [r2, #32]
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4619      	mov	r1, r3
 8002cac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fe25 	bl	8002954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b22      	cmp	r3, #34	; 0x22
 8002d26:	f040 80ab 	bne.w	8002e80 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d117      	bne.n	8002d64 <UART_Receive_IT+0x50>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d113      	bne.n	8002d64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
 8002d62:	e026      	b.n	8002db2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	d007      	beq.n	8002d88 <UART_Receive_IT+0x74>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <UART_Receive_IT+0x82>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e008      	b.n	8002da8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d15a      	bne.n	8002e7c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0220 	bic.w	r2, r2, #32
 8002dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d135      	bne.n	8002e72 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 0310 	bic.w	r3, r3, #16
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	623a      	str	r2, [r7, #32]
 8002e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	69f9      	ldr	r1, [r7, #28]
 8002e32:	6a3a      	ldr	r2, [r7, #32]
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d10a      	bne.n	8002e64 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fd9a 	bl	80029a4 <HAL_UARTEx_RxEventCallback>
 8002e70:	e002      	b.n	8002e78 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fd82 	bl	800297c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e002      	b.n	8002e82 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3730      	adds	r7, #48	; 0x30
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b0c0      	sub	sp, #256	; 0x100
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	68d9      	ldr	r1, [r3, #12]
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	ea40 0301 	orr.w	r3, r0, r1
 8002eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ee4:	f021 010c 	bic.w	r1, r1, #12
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	6999      	ldr	r1, [r3, #24]
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	ea40 0301 	orr.w	r3, r0, r1
 8002f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <UART_SetConfig+0x2cc>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <UART_SetConfig+0xa0>
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b8d      	ldr	r3, [pc, #564]	; (800315c <UART_SetConfig+0x2d0>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d104      	bne.n	8002f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7ff f9a4 	bl	8002278 <HAL_RCC_GetPCLK2Freq>
 8002f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f34:	e003      	b.n	8002f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f36:	f7ff f98b 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8002f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f48:	f040 810c 	bne.w	8003164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	1891      	adds	r1, r2, r2
 8002f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f66:	415b      	adcs	r3, r3
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f6e:	4621      	mov	r1, r4
 8002f70:	eb12 0801 	adds.w	r8, r2, r1
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb43 0901 	adc.w	r9, r3, r1
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	eb18 0303 	adds.w	r3, r8, r3
 8002f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	eb49 0303 	adc.w	r3, r9, r3
 8002fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fba:	460b      	mov	r3, r1
 8002fbc:	18db      	adds	r3, r3, r3
 8002fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	eb42 0303 	adc.w	r3, r2, r3
 8002fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fd0:	f7fd f956 	bl	8000280 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <UART_SetConfig+0x2d4>)
 8002fda:	fba3 2302 	umull	r2, r3, r3, r2
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	011c      	lsls	r4, r3, #4
 8002fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	1891      	adds	r1, r2, r2
 8002ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003004:	4641      	mov	r1, r8
 8003006:	eb12 0a01 	adds.w	sl, r2, r1
 800300a:	4649      	mov	r1, r9
 800300c:	eb43 0b01 	adc.w	fp, r3, r1
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800301c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003024:	4692      	mov	sl, r2
 8003026:	469b      	mov	fp, r3
 8003028:	4643      	mov	r3, r8
 800302a:	eb1a 0303 	adds.w	r3, sl, r3
 800302e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003032:	464b      	mov	r3, r9
 8003034:	eb4b 0303 	adc.w	r3, fp, r3
 8003038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800304c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003050:	460b      	mov	r3, r1
 8003052:	18db      	adds	r3, r3, r3
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
 8003056:	4613      	mov	r3, r2
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
 800305e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003066:	f7fd f90b 	bl	8000280 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4611      	mov	r1, r2
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <UART_SetConfig+0x2d4>)
 8003072:	fba3 2301 	umull	r2, r3, r3, r1
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2264      	movs	r2, #100	; 0x64
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	1acb      	subs	r3, r1, r3
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <UART_SetConfig+0x2d4>)
 8003088:	fba3 2302 	umull	r2, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003094:	441c      	add	r4, r3
 8003096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030a8:	4642      	mov	r2, r8
 80030aa:	464b      	mov	r3, r9
 80030ac:	1891      	adds	r1, r2, r2
 80030ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80030b0:	415b      	adcs	r3, r3
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030b8:	4641      	mov	r1, r8
 80030ba:	1851      	adds	r1, r2, r1
 80030bc:	6339      	str	r1, [r7, #48]	; 0x30
 80030be:	4649      	mov	r1, r9
 80030c0:	414b      	adcs	r3, r1
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030d0:	4659      	mov	r1, fp
 80030d2:	00cb      	lsls	r3, r1, #3
 80030d4:	4651      	mov	r1, sl
 80030d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030da:	4651      	mov	r1, sl
 80030dc:	00ca      	lsls	r2, r1, #3
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	4642      	mov	r2, r8
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ec:	464b      	mov	r3, r9
 80030ee:	460a      	mov	r2, r1
 80030f0:	eb42 0303 	adc.w	r3, r2, r3
 80030f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800310c:	460b      	mov	r3, r1
 800310e:	18db      	adds	r3, r3, r3
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 8003112:	4613      	mov	r3, r2
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800311e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003122:	f7fd f8ad 	bl	8000280 <__aeabi_uldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <UART_SetConfig+0x2d4>)
 800312c:	fba3 1302 	umull	r1, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	2164      	movs	r1, #100	; 0x64
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	3332      	adds	r3, #50	; 0x32
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <UART_SetConfig+0x2d4>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4422      	add	r2, r4
 8003152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003154:	e106      	b.n	8003364 <UART_SetConfig+0x4d8>
 8003156:	bf00      	nop
 8003158:	40011000 	.word	0x40011000
 800315c:	40011400 	.word	0x40011400
 8003160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003168:	2200      	movs	r2, #0
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800316e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003176:	4642      	mov	r2, r8
 8003178:	464b      	mov	r3, r9
 800317a:	1891      	adds	r1, r2, r2
 800317c:	6239      	str	r1, [r7, #32]
 800317e:	415b      	adcs	r3, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003186:	4641      	mov	r1, r8
 8003188:	1854      	adds	r4, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb43 0501 	adc.w	r5, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	00eb      	lsls	r3, r5, #3
 800319a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319e:	00e2      	lsls	r2, r4, #3
 80031a0:	4614      	mov	r4, r2
 80031a2:	461d      	mov	r5, r3
 80031a4:	4643      	mov	r3, r8
 80031a6:	18e3      	adds	r3, r4, r3
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031ac:	464b      	mov	r3, r9
 80031ae:	eb45 0303 	adc.w	r3, r5, r3
 80031b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031d2:	4629      	mov	r1, r5
 80031d4:	008b      	lsls	r3, r1, #2
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031dc:	4621      	mov	r1, r4
 80031de:	008a      	lsls	r2, r1, #2
 80031e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031e4:	f7fd f84c 	bl	8000280 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b60      	ldr	r3, [pc, #384]	; (8003370 <UART_SetConfig+0x4e4>)
 80031ee:	fba3 2302 	umull	r2, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	011c      	lsls	r4, r3, #4
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	61b9      	str	r1, [r7, #24]
 8003210:	415b      	adcs	r3, r3
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	4641      	mov	r1, r8
 800321a:	1851      	adds	r1, r2, r1
 800321c:	6139      	str	r1, [r7, #16]
 800321e:	4649      	mov	r1, r9
 8003220:	414b      	adcs	r3, r1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003230:	4659      	mov	r1, fp
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4651      	mov	r1, sl
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4651      	mov	r1, sl
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4642      	mov	r2, r8
 8003246:	189b      	adds	r3, r3, r2
 8003248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800324c:	464b      	mov	r3, r9
 800324e:	460a      	mov	r2, r1
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	67bb      	str	r3, [r7, #120]	; 0x78
 8003262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003270:	4649      	mov	r1, r9
 8003272:	008b      	lsls	r3, r1, #2
 8003274:	4641      	mov	r1, r8
 8003276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327a:	4641      	mov	r1, r8
 800327c:	008a      	lsls	r2, r1, #2
 800327e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003282:	f7fc fffd 	bl	8000280 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4611      	mov	r1, r2
 800328c:	4b38      	ldr	r3, [pc, #224]	; (8003370 <UART_SetConfig+0x4e4>)
 800328e:	fba3 2301 	umull	r2, r3, r3, r1
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2264      	movs	r2, #100	; 0x64
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a33      	ldr	r2, [pc, #204]	; (8003370 <UART_SetConfig+0x4e4>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	441c      	add	r4, r3
 80032ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b2:	2200      	movs	r2, #0
 80032b4:	673b      	str	r3, [r7, #112]	; 0x70
 80032b6:	677a      	str	r2, [r7, #116]	; 0x74
 80032b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	415b      	adcs	r3, r3
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032cc:	4641      	mov	r1, r8
 80032ce:	1851      	adds	r1, r2, r1
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	4649      	mov	r1, r9
 80032d4:	414b      	adcs	r3, r1
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e4:	4659      	mov	r1, fp
 80032e6:	00cb      	lsls	r3, r1, #3
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ee:	4651      	mov	r1, sl
 80032f0:	00ca      	lsls	r2, r1, #3
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	4642      	mov	r2, r8
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fe:	464b      	mov	r3, r9
 8003300:	460a      	mov	r2, r1
 8003302:	eb42 0303 	adc.w	r3, r2, r3
 8003306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
 8003312:	667a      	str	r2, [r7, #100]	; 0x64
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003320:	4649      	mov	r1, r9
 8003322:	008b      	lsls	r3, r1, #2
 8003324:	4641      	mov	r1, r8
 8003326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332a:	4641      	mov	r1, r8
 800332c:	008a      	lsls	r2, r1, #2
 800332e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003332:	f7fc ffa5 	bl	8000280 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <UART_SetConfig+0x4e4>)
 800333c:	fba3 1302 	umull	r1, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	2164      	movs	r1, #100	; 0x64
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	3332      	adds	r3, #50	; 0x32
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <UART_SetConfig+0x4e4>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4422      	add	r2, r4
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <sniprintf>:
 8003374:	b40c      	push	{r2, r3}
 8003376:	b530      	push	{r4, r5, lr}
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <sniprintf+0x64>)
 800337a:	1e0c      	subs	r4, r1, #0
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	b09d      	sub	sp, #116	; 0x74
 8003380:	da08      	bge.n	8003394 <sniprintf+0x20>
 8003382:	238b      	movs	r3, #139	; 0x8b
 8003384:	602b      	str	r3, [r5, #0]
 8003386:	f04f 30ff 	mov.w	r0, #4294967295
 800338a:	b01d      	add	sp, #116	; 0x74
 800338c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003390:	b002      	add	sp, #8
 8003392:	4770      	bx	lr
 8003394:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003398:	f8ad 3014 	strh.w	r3, [sp, #20]
 800339c:	bf14      	ite	ne
 800339e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80033a2:	4623      	moveq	r3, r4
 80033a4:	9304      	str	r3, [sp, #16]
 80033a6:	9307      	str	r3, [sp, #28]
 80033a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ac:	9002      	str	r0, [sp, #8]
 80033ae:	9006      	str	r0, [sp, #24]
 80033b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80033b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80033b6:	ab21      	add	r3, sp, #132	; 0x84
 80033b8:	a902      	add	r1, sp, #8
 80033ba:	4628      	mov	r0, r5
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	f000 f993 	bl	80036e8 <_svfiprintf_r>
 80033c2:	1c43      	adds	r3, r0, #1
 80033c4:	bfbc      	itt	lt
 80033c6:	238b      	movlt	r3, #139	; 0x8b
 80033c8:	602b      	strlt	r3, [r5, #0]
 80033ca:	2c00      	cmp	r4, #0
 80033cc:	d0dd      	beq.n	800338a <sniprintf+0x16>
 80033ce:	9b02      	ldr	r3, [sp, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e7d9      	b.n	800338a <sniprintf+0x16>
 80033d6:	bf00      	nop
 80033d8:	20000058 	.word	0x20000058

080033dc <memset>:
 80033dc:	4402      	add	r2, r0
 80033de:	4603      	mov	r3, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d100      	bne.n	80033e6 <memset+0xa>
 80033e4:	4770      	bx	lr
 80033e6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ea:	e7f9      	b.n	80033e0 <memset+0x4>

080033ec <__errno>:
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <__errno+0x8>)
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000058 	.word	0x20000058

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	4d0d      	ldr	r5, [pc, #52]	; (8003430 <__libc_init_array+0x38>)
 80033fc:	4c0d      	ldr	r4, [pc, #52]	; (8003434 <__libc_init_array+0x3c>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	2600      	movs	r6, #0
 8003404:	42a6      	cmp	r6, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	4d0b      	ldr	r5, [pc, #44]	; (8003438 <__libc_init_array+0x40>)
 800340a:	4c0c      	ldr	r4, [pc, #48]	; (800343c <__libc_init_array+0x44>)
 800340c:	f000 fc6a 	bl	8003ce4 <_init>
 8003410:	1b64      	subs	r4, r4, r5
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	2600      	movs	r6, #0
 8003416:	42a6      	cmp	r6, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003420:	4798      	blx	r3
 8003422:	3601      	adds	r6, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f855 3b04 	ldr.w	r3, [r5], #4
 800342a:	4798      	blx	r3
 800342c:	3601      	adds	r6, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	08003d70 	.word	0x08003d70
 8003434:	08003d70 	.word	0x08003d70
 8003438:	08003d70 	.word	0x08003d70
 800343c:	08003d74 	.word	0x08003d74

08003440 <__retarget_lock_acquire_recursive>:
 8003440:	4770      	bx	lr

08003442 <__retarget_lock_release_recursive>:
 8003442:	4770      	bx	lr

08003444 <_free_r>:
 8003444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003446:	2900      	cmp	r1, #0
 8003448:	d044      	beq.n	80034d4 <_free_r+0x90>
 800344a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344e:	9001      	str	r0, [sp, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f1a1 0404 	sub.w	r4, r1, #4
 8003456:	bfb8      	it	lt
 8003458:	18e4      	addlt	r4, r4, r3
 800345a:	f000 f8df 	bl	800361c <__malloc_lock>
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <_free_r+0x94>)
 8003460:	9801      	ldr	r0, [sp, #4]
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	b933      	cbnz	r3, 8003474 <_free_r+0x30>
 8003466:	6063      	str	r3, [r4, #4]
 8003468:	6014      	str	r4, [r2, #0]
 800346a:	b003      	add	sp, #12
 800346c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003470:	f000 b8da 	b.w	8003628 <__malloc_unlock>
 8003474:	42a3      	cmp	r3, r4
 8003476:	d908      	bls.n	800348a <_free_r+0x46>
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	1961      	adds	r1, r4, r5
 800347c:	428b      	cmp	r3, r1
 800347e:	bf01      	itttt	eq
 8003480:	6819      	ldreq	r1, [r3, #0]
 8003482:	685b      	ldreq	r3, [r3, #4]
 8003484:	1949      	addeq	r1, r1, r5
 8003486:	6021      	streq	r1, [r4, #0]
 8003488:	e7ed      	b.n	8003466 <_free_r+0x22>
 800348a:	461a      	mov	r2, r3
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b10b      	cbz	r3, 8003494 <_free_r+0x50>
 8003490:	42a3      	cmp	r3, r4
 8003492:	d9fa      	bls.n	800348a <_free_r+0x46>
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	1855      	adds	r5, r2, r1
 8003498:	42a5      	cmp	r5, r4
 800349a:	d10b      	bne.n	80034b4 <_free_r+0x70>
 800349c:	6824      	ldr	r4, [r4, #0]
 800349e:	4421      	add	r1, r4
 80034a0:	1854      	adds	r4, r2, r1
 80034a2:	42a3      	cmp	r3, r4
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	d1e0      	bne.n	800346a <_free_r+0x26>
 80034a8:	681c      	ldr	r4, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6053      	str	r3, [r2, #4]
 80034ae:	440c      	add	r4, r1
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	e7da      	b.n	800346a <_free_r+0x26>
 80034b4:	d902      	bls.n	80034bc <_free_r+0x78>
 80034b6:	230c      	movs	r3, #12
 80034b8:	6003      	str	r3, [r0, #0]
 80034ba:	e7d6      	b.n	800346a <_free_r+0x26>
 80034bc:	6825      	ldr	r5, [r4, #0]
 80034be:	1961      	adds	r1, r4, r5
 80034c0:	428b      	cmp	r3, r1
 80034c2:	bf04      	itt	eq
 80034c4:	6819      	ldreq	r1, [r3, #0]
 80034c6:	685b      	ldreq	r3, [r3, #4]
 80034c8:	6063      	str	r3, [r4, #4]
 80034ca:	bf04      	itt	eq
 80034cc:	1949      	addeq	r1, r1, r5
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	6054      	str	r4, [r2, #4]
 80034d2:	e7ca      	b.n	800346a <_free_r+0x26>
 80034d4:	b003      	add	sp, #12
 80034d6:	bd30      	pop	{r4, r5, pc}
 80034d8:	20000280 	.word	0x20000280

080034dc <sbrk_aligned>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4e0e      	ldr	r6, [pc, #56]	; (8003518 <sbrk_aligned+0x3c>)
 80034e0:	460c      	mov	r4, r1
 80034e2:	6831      	ldr	r1, [r6, #0]
 80034e4:	4605      	mov	r5, r0
 80034e6:	b911      	cbnz	r1, 80034ee <sbrk_aligned+0x12>
 80034e8:	f000 fba6 	bl	8003c38 <_sbrk_r>
 80034ec:	6030      	str	r0, [r6, #0]
 80034ee:	4621      	mov	r1, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 fba1 	bl	8003c38 <_sbrk_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d00a      	beq.n	8003510 <sbrk_aligned+0x34>
 80034fa:	1cc4      	adds	r4, r0, #3
 80034fc:	f024 0403 	bic.w	r4, r4, #3
 8003500:	42a0      	cmp	r0, r4
 8003502:	d007      	beq.n	8003514 <sbrk_aligned+0x38>
 8003504:	1a21      	subs	r1, r4, r0
 8003506:	4628      	mov	r0, r5
 8003508:	f000 fb96 	bl	8003c38 <_sbrk_r>
 800350c:	3001      	adds	r0, #1
 800350e:	d101      	bne.n	8003514 <sbrk_aligned+0x38>
 8003510:	f04f 34ff 	mov.w	r4, #4294967295
 8003514:	4620      	mov	r0, r4
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	20000284 	.word	0x20000284

0800351c <_malloc_r>:
 800351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003520:	1ccd      	adds	r5, r1, #3
 8003522:	f025 0503 	bic.w	r5, r5, #3
 8003526:	3508      	adds	r5, #8
 8003528:	2d0c      	cmp	r5, #12
 800352a:	bf38      	it	cc
 800352c:	250c      	movcc	r5, #12
 800352e:	2d00      	cmp	r5, #0
 8003530:	4607      	mov	r7, r0
 8003532:	db01      	blt.n	8003538 <_malloc_r+0x1c>
 8003534:	42a9      	cmp	r1, r5
 8003536:	d905      	bls.n	8003544 <_malloc_r+0x28>
 8003538:	230c      	movs	r3, #12
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	2600      	movs	r6, #0
 800353e:	4630      	mov	r0, r6
 8003540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003618 <_malloc_r+0xfc>
 8003548:	f000 f868 	bl	800361c <__malloc_lock>
 800354c:	f8d8 3000 	ldr.w	r3, [r8]
 8003550:	461c      	mov	r4, r3
 8003552:	bb5c      	cbnz	r4, 80035ac <_malloc_r+0x90>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	f7ff ffc0 	bl	80034dc <sbrk_aligned>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	4604      	mov	r4, r0
 8003560:	d155      	bne.n	800360e <_malloc_r+0xf2>
 8003562:	f8d8 4000 	ldr.w	r4, [r8]
 8003566:	4626      	mov	r6, r4
 8003568:	2e00      	cmp	r6, #0
 800356a:	d145      	bne.n	80035f8 <_malloc_r+0xdc>
 800356c:	2c00      	cmp	r4, #0
 800356e:	d048      	beq.n	8003602 <_malloc_r+0xe6>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	4631      	mov	r1, r6
 8003574:	4638      	mov	r0, r7
 8003576:	eb04 0903 	add.w	r9, r4, r3
 800357a:	f000 fb5d 	bl	8003c38 <_sbrk_r>
 800357e:	4581      	cmp	r9, r0
 8003580:	d13f      	bne.n	8003602 <_malloc_r+0xe6>
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	1a6d      	subs	r5, r5, r1
 8003586:	4629      	mov	r1, r5
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ffa7 	bl	80034dc <sbrk_aligned>
 800358e:	3001      	adds	r0, #1
 8003590:	d037      	beq.n	8003602 <_malloc_r+0xe6>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	442b      	add	r3, r5
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	f8d8 3000 	ldr.w	r3, [r8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d038      	beq.n	8003612 <_malloc_r+0xf6>
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	42a2      	cmp	r2, r4
 80035a4:	d12b      	bne.n	80035fe <_malloc_r+0xe2>
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e00f      	b.n	80035cc <_malloc_r+0xb0>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	1b52      	subs	r2, r2, r5
 80035b0:	d41f      	bmi.n	80035f2 <_malloc_r+0xd6>
 80035b2:	2a0b      	cmp	r2, #11
 80035b4:	d917      	bls.n	80035e6 <_malloc_r+0xca>
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	6025      	str	r5, [r4, #0]
 80035bc:	bf18      	it	ne
 80035be:	6059      	strne	r1, [r3, #4]
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	bf08      	it	eq
 80035c4:	f8c8 1000 	streq.w	r1, [r8]
 80035c8:	5162      	str	r2, [r4, r5]
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	4638      	mov	r0, r7
 80035ce:	f104 060b 	add.w	r6, r4, #11
 80035d2:	f000 f829 	bl	8003628 <__malloc_unlock>
 80035d6:	f026 0607 	bic.w	r6, r6, #7
 80035da:	1d23      	adds	r3, r4, #4
 80035dc:	1af2      	subs	r2, r6, r3
 80035de:	d0ae      	beq.n	800353e <_malloc_r+0x22>
 80035e0:	1b9b      	subs	r3, r3, r6
 80035e2:	50a3      	str	r3, [r4, r2]
 80035e4:	e7ab      	b.n	800353e <_malloc_r+0x22>
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	6862      	ldr	r2, [r4, #4]
 80035ea:	d1dd      	bne.n	80035a8 <_malloc_r+0x8c>
 80035ec:	f8c8 2000 	str.w	r2, [r8]
 80035f0:	e7ec      	b.n	80035cc <_malloc_r+0xb0>
 80035f2:	4623      	mov	r3, r4
 80035f4:	6864      	ldr	r4, [r4, #4]
 80035f6:	e7ac      	b.n	8003552 <_malloc_r+0x36>
 80035f8:	4634      	mov	r4, r6
 80035fa:	6876      	ldr	r6, [r6, #4]
 80035fc:	e7b4      	b.n	8003568 <_malloc_r+0x4c>
 80035fe:	4613      	mov	r3, r2
 8003600:	e7cc      	b.n	800359c <_malloc_r+0x80>
 8003602:	230c      	movs	r3, #12
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4638      	mov	r0, r7
 8003608:	f000 f80e 	bl	8003628 <__malloc_unlock>
 800360c:	e797      	b.n	800353e <_malloc_r+0x22>
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	e7dc      	b.n	80035cc <_malloc_r+0xb0>
 8003612:	605b      	str	r3, [r3, #4]
 8003614:	deff      	udf	#255	; 0xff
 8003616:	bf00      	nop
 8003618:	20000280 	.word	0x20000280

0800361c <__malloc_lock>:
 800361c:	4801      	ldr	r0, [pc, #4]	; (8003624 <__malloc_lock+0x8>)
 800361e:	f7ff bf0f 	b.w	8003440 <__retarget_lock_acquire_recursive>
 8003622:	bf00      	nop
 8003624:	2000027c 	.word	0x2000027c

08003628 <__malloc_unlock>:
 8003628:	4801      	ldr	r0, [pc, #4]	; (8003630 <__malloc_unlock+0x8>)
 800362a:	f7ff bf0a 	b.w	8003442 <__retarget_lock_release_recursive>
 800362e:	bf00      	nop
 8003630:	2000027c 	.word	0x2000027c

08003634 <__ssputs_r>:
 8003634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	688e      	ldr	r6, [r1, #8]
 800363a:	461f      	mov	r7, r3
 800363c:	42be      	cmp	r6, r7
 800363e:	680b      	ldr	r3, [r1, #0]
 8003640:	4682      	mov	sl, r0
 8003642:	460c      	mov	r4, r1
 8003644:	4690      	mov	r8, r2
 8003646:	d82c      	bhi.n	80036a2 <__ssputs_r+0x6e>
 8003648:	898a      	ldrh	r2, [r1, #12]
 800364a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800364e:	d026      	beq.n	800369e <__ssputs_r+0x6a>
 8003650:	6965      	ldr	r5, [r4, #20]
 8003652:	6909      	ldr	r1, [r1, #16]
 8003654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003658:	eba3 0901 	sub.w	r9, r3, r1
 800365c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003660:	1c7b      	adds	r3, r7, #1
 8003662:	444b      	add	r3, r9
 8003664:	106d      	asrs	r5, r5, #1
 8003666:	429d      	cmp	r5, r3
 8003668:	bf38      	it	cc
 800366a:	461d      	movcc	r5, r3
 800366c:	0553      	lsls	r3, r2, #21
 800366e:	d527      	bpl.n	80036c0 <__ssputs_r+0x8c>
 8003670:	4629      	mov	r1, r5
 8003672:	f7ff ff53 	bl	800351c <_malloc_r>
 8003676:	4606      	mov	r6, r0
 8003678:	b360      	cbz	r0, 80036d4 <__ssputs_r+0xa0>
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	464a      	mov	r2, r9
 800367e:	f000 faeb 	bl	8003c58 <memcpy>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	6126      	str	r6, [r4, #16]
 8003690:	6165      	str	r5, [r4, #20]
 8003692:	444e      	add	r6, r9
 8003694:	eba5 0509 	sub.w	r5, r5, r9
 8003698:	6026      	str	r6, [r4, #0]
 800369a:	60a5      	str	r5, [r4, #8]
 800369c:	463e      	mov	r6, r7
 800369e:	42be      	cmp	r6, r7
 80036a0:	d900      	bls.n	80036a4 <__ssputs_r+0x70>
 80036a2:	463e      	mov	r6, r7
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	4632      	mov	r2, r6
 80036a8:	4641      	mov	r1, r8
 80036aa:	f000 faab 	bl	8003c04 <memmove>
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	1b9b      	subs	r3, r3, r6
 80036b2:	60a3      	str	r3, [r4, #8]
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	4433      	add	r3, r6
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	2000      	movs	r0, #0
 80036bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c0:	462a      	mov	r2, r5
 80036c2:	f000 fad7 	bl	8003c74 <_realloc_r>
 80036c6:	4606      	mov	r6, r0
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d1e0      	bne.n	800368e <__ssputs_r+0x5a>
 80036cc:	6921      	ldr	r1, [r4, #16]
 80036ce:	4650      	mov	r0, sl
 80036d0:	f7ff feb8 	bl	8003444 <_free_r>
 80036d4:	230c      	movs	r3, #12
 80036d6:	f8ca 3000 	str.w	r3, [sl]
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	e7e9      	b.n	80036bc <__ssputs_r+0x88>

080036e8 <_svfiprintf_r>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	4698      	mov	r8, r3
 80036ee:	898b      	ldrh	r3, [r1, #12]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	b09d      	sub	sp, #116	; 0x74
 80036f4:	4607      	mov	r7, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	d50e      	bpl.n	800371a <_svfiprintf_r+0x32>
 80036fc:	690b      	ldr	r3, [r1, #16]
 80036fe:	b963      	cbnz	r3, 800371a <_svfiprintf_r+0x32>
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	f7ff ff0b 	bl	800351c <_malloc_r>
 8003706:	6028      	str	r0, [r5, #0]
 8003708:	6128      	str	r0, [r5, #16]
 800370a:	b920      	cbnz	r0, 8003716 <_svfiprintf_r+0x2e>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	e0d0      	b.n	80038b8 <_svfiprintf_r+0x1d0>
 8003716:	2340      	movs	r3, #64	; 0x40
 8003718:	616b      	str	r3, [r5, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	9309      	str	r3, [sp, #36]	; 0x24
 800371e:	2320      	movs	r3, #32
 8003720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003724:	f8cd 800c 	str.w	r8, [sp, #12]
 8003728:	2330      	movs	r3, #48	; 0x30
 800372a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038d0 <_svfiprintf_r+0x1e8>
 800372e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003732:	f04f 0901 	mov.w	r9, #1
 8003736:	4623      	mov	r3, r4
 8003738:	469a      	mov	sl, r3
 800373a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373e:	b10a      	cbz	r2, 8003744 <_svfiprintf_r+0x5c>
 8003740:	2a25      	cmp	r2, #37	; 0x25
 8003742:	d1f9      	bne.n	8003738 <_svfiprintf_r+0x50>
 8003744:	ebba 0b04 	subs.w	fp, sl, r4
 8003748:	d00b      	beq.n	8003762 <_svfiprintf_r+0x7a>
 800374a:	465b      	mov	r3, fp
 800374c:	4622      	mov	r2, r4
 800374e:	4629      	mov	r1, r5
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff6f 	bl	8003634 <__ssputs_r>
 8003756:	3001      	adds	r0, #1
 8003758:	f000 80a9 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800375c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375e:	445a      	add	r2, fp
 8003760:	9209      	str	r2, [sp, #36]	; 0x24
 8003762:	f89a 3000 	ldrb.w	r3, [sl]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a1 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800376c:	2300      	movs	r3, #0
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003776:	f10a 0a01 	add.w	sl, sl, #1
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	9307      	str	r3, [sp, #28]
 800377e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003782:	931a      	str	r3, [sp, #104]	; 0x68
 8003784:	4654      	mov	r4, sl
 8003786:	2205      	movs	r2, #5
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	4850      	ldr	r0, [pc, #320]	; (80038d0 <_svfiprintf_r+0x1e8>)
 800378e:	f7fc fd27 	bl	80001e0 <memchr>
 8003792:	9a04      	ldr	r2, [sp, #16]
 8003794:	b9d8      	cbnz	r0, 80037ce <_svfiprintf_r+0xe6>
 8003796:	06d0      	lsls	r0, r2, #27
 8003798:	bf44      	itt	mi
 800379a:	2320      	movmi	r3, #32
 800379c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a0:	0711      	lsls	r1, r2, #28
 80037a2:	bf44      	itt	mi
 80037a4:	232b      	movmi	r3, #43	; 0x2b
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037aa:	f89a 3000 	ldrb.w	r3, [sl]
 80037ae:	2b2a      	cmp	r3, #42	; 0x2a
 80037b0:	d015      	beq.n	80037de <_svfiprintf_r+0xf6>
 80037b2:	9a07      	ldr	r2, [sp, #28]
 80037b4:	4654      	mov	r4, sl
 80037b6:	2000      	movs	r0, #0
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4621      	mov	r1, r4
 80037be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c2:	3b30      	subs	r3, #48	; 0x30
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d94d      	bls.n	8003864 <_svfiprintf_r+0x17c>
 80037c8:	b1b0      	cbz	r0, 80037f8 <_svfiprintf_r+0x110>
 80037ca:	9207      	str	r2, [sp, #28]
 80037cc:	e014      	b.n	80037f8 <_svfiprintf_r+0x110>
 80037ce:	eba0 0308 	sub.w	r3, r0, r8
 80037d2:	fa09 f303 	lsl.w	r3, r9, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	46a2      	mov	sl, r4
 80037dc:	e7d2      	b.n	8003784 <_svfiprintf_r+0x9c>
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9103      	str	r1, [sp, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfbb      	ittet	lt
 80037ea:	425b      	neglt	r3, r3
 80037ec:	f042 0202 	orrlt.w	r2, r2, #2
 80037f0:	9307      	strge	r3, [sp, #28]
 80037f2:	9307      	strlt	r3, [sp, #28]
 80037f4:	bfb8      	it	lt
 80037f6:	9204      	strlt	r2, [sp, #16]
 80037f8:	7823      	ldrb	r3, [r4, #0]
 80037fa:	2b2e      	cmp	r3, #46	; 0x2e
 80037fc:	d10c      	bne.n	8003818 <_svfiprintf_r+0x130>
 80037fe:	7863      	ldrb	r3, [r4, #1]
 8003800:	2b2a      	cmp	r3, #42	; 0x2a
 8003802:	d134      	bne.n	800386e <_svfiprintf_r+0x186>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfb8      	it	lt
 8003810:	f04f 33ff 	movlt.w	r3, #4294967295
 8003814:	3402      	adds	r4, #2
 8003816:	9305      	str	r3, [sp, #20]
 8003818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038e0 <_svfiprintf_r+0x1f8>
 800381c:	7821      	ldrb	r1, [r4, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	4650      	mov	r0, sl
 8003822:	f7fc fcdd 	bl	80001e0 <memchr>
 8003826:	b138      	cbz	r0, 8003838 <_svfiprintf_r+0x150>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	eba0 000a 	sub.w	r0, r0, sl
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	4082      	lsls	r2, r0
 8003832:	4313      	orrs	r3, r2
 8003834:	3401      	adds	r4, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383c:	4825      	ldr	r0, [pc, #148]	; (80038d4 <_svfiprintf_r+0x1ec>)
 800383e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003842:	2206      	movs	r2, #6
 8003844:	f7fc fccc 	bl	80001e0 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d038      	beq.n	80038be <_svfiprintf_r+0x1d6>
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <_svfiprintf_r+0x1f0>)
 800384e:	bb1b      	cbnz	r3, 8003898 <_svfiprintf_r+0x1b0>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	3307      	adds	r3, #7
 8003854:	f023 0307 	bic.w	r3, r3, #7
 8003858:	3308      	adds	r3, #8
 800385a:	9303      	str	r3, [sp, #12]
 800385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385e:	4433      	add	r3, r6
 8003860:	9309      	str	r3, [sp, #36]	; 0x24
 8003862:	e768      	b.n	8003736 <_svfiprintf_r+0x4e>
 8003864:	fb0c 3202 	mla	r2, ip, r2, r3
 8003868:	460c      	mov	r4, r1
 800386a:	2001      	movs	r0, #1
 800386c:	e7a6      	b.n	80037bc <_svfiprintf_r+0xd4>
 800386e:	2300      	movs	r3, #0
 8003870:	3401      	adds	r4, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 0c0a 	mov.w	ip, #10
 800387a:	4620      	mov	r0, r4
 800387c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003880:	3a30      	subs	r2, #48	; 0x30
 8003882:	2a09      	cmp	r2, #9
 8003884:	d903      	bls.n	800388e <_svfiprintf_r+0x1a6>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c6      	beq.n	8003818 <_svfiprintf_r+0x130>
 800388a:	9105      	str	r1, [sp, #20]
 800388c:	e7c4      	b.n	8003818 <_svfiprintf_r+0x130>
 800388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003892:	4604      	mov	r4, r0
 8003894:	2301      	movs	r3, #1
 8003896:	e7f0      	b.n	800387a <_svfiprintf_r+0x192>
 8003898:	ab03      	add	r3, sp, #12
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	462a      	mov	r2, r5
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	4638      	mov	r0, r7
 80038a4:	f3af 8000 	nop.w
 80038a8:	1c42      	adds	r2, r0, #1
 80038aa:	4606      	mov	r6, r0
 80038ac:	d1d6      	bne.n	800385c <_svfiprintf_r+0x174>
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	065b      	lsls	r3, r3, #25
 80038b2:	f53f af2d 	bmi.w	8003710 <_svfiprintf_r+0x28>
 80038b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b8:	b01d      	add	sp, #116	; 0x74
 80038ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038be:	ab03      	add	r3, sp, #12
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	462a      	mov	r2, r5
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	4638      	mov	r0, r7
 80038ca:	f000 f879 	bl	80039c0 <_printf_i>
 80038ce:	e7eb      	b.n	80038a8 <_svfiprintf_r+0x1c0>
 80038d0:	08003d34 	.word	0x08003d34
 80038d4:	08003d3e 	.word	0x08003d3e
 80038d8:	00000000 	.word	0x00000000
 80038dc:	08003635 	.word	0x08003635
 80038e0:	08003d3a 	.word	0x08003d3a

080038e4 <_printf_common>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	4616      	mov	r6, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	688a      	ldr	r2, [r1, #8]
 80038ee:	690b      	ldr	r3, [r1, #16]
 80038f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bfb8      	it	lt
 80038f8:	4613      	movlt	r3, r2
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003900:	4607      	mov	r7, r0
 8003902:	460c      	mov	r4, r1
 8003904:	b10a      	cbz	r2, 800390a <_printf_common+0x26>
 8003906:	3301      	adds	r3, #1
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	0699      	lsls	r1, r3, #26
 800390e:	bf42      	ittt	mi
 8003910:	6833      	ldrmi	r3, [r6, #0]
 8003912:	3302      	addmi	r3, #2
 8003914:	6033      	strmi	r3, [r6, #0]
 8003916:	6825      	ldr	r5, [r4, #0]
 8003918:	f015 0506 	ands.w	r5, r5, #6
 800391c:	d106      	bne.n	800392c <_printf_common+0x48>
 800391e:	f104 0a19 	add.w	sl, r4, #25
 8003922:	68e3      	ldr	r3, [r4, #12]
 8003924:	6832      	ldr	r2, [r6, #0]
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	42ab      	cmp	r3, r5
 800392a:	dc26      	bgt.n	800397a <_printf_common+0x96>
 800392c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003930:	1e13      	subs	r3, r2, #0
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	bf18      	it	ne
 8003936:	2301      	movne	r3, #1
 8003938:	0692      	lsls	r2, r2, #26
 800393a:	d42b      	bmi.n	8003994 <_printf_common+0xb0>
 800393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003940:	4649      	mov	r1, r9
 8003942:	4638      	mov	r0, r7
 8003944:	47c0      	blx	r8
 8003946:	3001      	adds	r0, #1
 8003948:	d01e      	beq.n	8003988 <_printf_common+0xa4>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	f003 0306 	and.w	r3, r3, #6
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf02      	ittt	eq
 8003956:	68e5      	ldreq	r5, [r4, #12]
 8003958:	6833      	ldreq	r3, [r6, #0]
 800395a:	1aed      	subeq	r5, r5, r3
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	bf0c      	ite	eq
 8003960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003964:	2500      	movne	r5, #0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfc4      	itt	gt
 800396a:	1a9b      	subgt	r3, r3, r2
 800396c:	18ed      	addgt	r5, r5, r3
 800396e:	2600      	movs	r6, #0
 8003970:	341a      	adds	r4, #26
 8003972:	42b5      	cmp	r5, r6
 8003974:	d11a      	bne.n	80039ac <_printf_common+0xc8>
 8003976:	2000      	movs	r0, #0
 8003978:	e008      	b.n	800398c <_printf_common+0xa8>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4649      	mov	r1, r9
 8003980:	4638      	mov	r0, r7
 8003982:	47c0      	blx	r8
 8003984:	3001      	adds	r0, #1
 8003986:	d103      	bne.n	8003990 <_printf_common+0xac>
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003990:	3501      	adds	r5, #1
 8003992:	e7c6      	b.n	8003922 <_printf_common+0x3e>
 8003994:	18e1      	adds	r1, r4, r3
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	2030      	movs	r0, #48	; 0x30
 800399a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399e:	4422      	add	r2, r4
 80039a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a8:	3302      	adds	r3, #2
 80039aa:	e7c7      	b.n	800393c <_printf_common+0x58>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4622      	mov	r2, r4
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0e6      	beq.n	8003988 <_printf_common+0xa4>
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7d9      	b.n	8003972 <_printf_common+0x8e>
	...

080039c0 <_printf_i>:
 80039c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	7e0f      	ldrb	r7, [r1, #24]
 80039c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c8:	2f78      	cmp	r7, #120	; 0x78
 80039ca:	4691      	mov	r9, r2
 80039cc:	4680      	mov	r8, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	469a      	mov	sl, r3
 80039d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039d6:	d807      	bhi.n	80039e8 <_printf_i+0x28>
 80039d8:	2f62      	cmp	r7, #98	; 0x62
 80039da:	d80a      	bhi.n	80039f2 <_printf_i+0x32>
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80d4 	beq.w	8003b8a <_printf_i+0x1ca>
 80039e2:	2f58      	cmp	r7, #88	; 0x58
 80039e4:	f000 80c0 	beq.w	8003b68 <_printf_i+0x1a8>
 80039e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039f0:	e03a      	b.n	8003a68 <_printf_i+0xa8>
 80039f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039f6:	2b15      	cmp	r3, #21
 80039f8:	d8f6      	bhi.n	80039e8 <_printf_i+0x28>
 80039fa:	a101      	add	r1, pc, #4	; (adr r1, 8003a00 <_printf_i+0x40>)
 80039fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	080039e9 	.word	0x080039e9
 8003a0c:	080039e9 	.word	0x080039e9
 8003a10:	080039e9 	.word	0x080039e9
 8003a14:	080039e9 	.word	0x080039e9
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	080039e9 	.word	0x080039e9
 8003a20:	080039e9 	.word	0x080039e9
 8003a24:	080039e9 	.word	0x080039e9
 8003a28:	080039e9 	.word	0x080039e9
 8003a2c:	08003b71 	.word	0x08003b71
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003b2b 	.word	0x08003b2b
 8003a38:	080039e9 	.word	0x080039e9
 8003a3c:	080039e9 	.word	0x080039e9
 8003a40:	08003b93 	.word	0x08003b93
 8003a44:	080039e9 	.word	0x080039e9
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	080039e9 	.word	0x080039e9
 8003a50:	080039e9 	.word	0x080039e9
 8003a54:	08003b33 	.word	0x08003b33
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	602a      	str	r2, [r5, #0]
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e09f      	b.n	8003bac <_printf_i+0x1ec>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	0607      	lsls	r7, r0, #24
 8003a72:	f103 0104 	add.w	r1, r3, #4
 8003a76:	6029      	str	r1, [r5, #0]
 8003a78:	d501      	bpl.n	8003a7e <_printf_i+0xbe>
 8003a7a:	681e      	ldr	r6, [r3, #0]
 8003a7c:	e003      	b.n	8003a86 <_printf_i+0xc6>
 8003a7e:	0646      	lsls	r6, r0, #25
 8003a80:	d5fb      	bpl.n	8003a7a <_printf_i+0xba>
 8003a82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a86:	2e00      	cmp	r6, #0
 8003a88:	da03      	bge.n	8003a92 <_printf_i+0xd2>
 8003a8a:	232d      	movs	r3, #45	; 0x2d
 8003a8c:	4276      	negs	r6, r6
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a92:	485a      	ldr	r0, [pc, #360]	; (8003bfc <_printf_i+0x23c>)
 8003a94:	230a      	movs	r3, #10
 8003a96:	e012      	b.n	8003abe <_printf_i+0xfe>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	6029      	str	r1, [r5, #0]
 8003aa0:	0605      	lsls	r5, r0, #24
 8003aa2:	d501      	bpl.n	8003aa8 <_printf_i+0xe8>
 8003aa4:	681e      	ldr	r6, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <_printf_i+0xee>
 8003aa8:	0641      	lsls	r1, r0, #25
 8003aaa:	d5fb      	bpl.n	8003aa4 <_printf_i+0xe4>
 8003aac:	881e      	ldrh	r6, [r3, #0]
 8003aae:	4853      	ldr	r0, [pc, #332]	; (8003bfc <_printf_i+0x23c>)
 8003ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2308      	moveq	r3, #8
 8003ab6:	230a      	movne	r3, #10
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003abe:	6865      	ldr	r5, [r4, #4]
 8003ac0:	60a5      	str	r5, [r4, #8]
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	bfa2      	ittt	ge
 8003ac6:	6821      	ldrge	r1, [r4, #0]
 8003ac8:	f021 0104 	bicge.w	r1, r1, #4
 8003acc:	6021      	strge	r1, [r4, #0]
 8003ace:	b90e      	cbnz	r6, 8003ad4 <_printf_i+0x114>
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	d04b      	beq.n	8003b6c <_printf_i+0x1ac>
 8003ad4:	4615      	mov	r5, r2
 8003ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ada:	fb03 6711 	mls	r7, r3, r1, r6
 8003ade:	5dc7      	ldrb	r7, [r0, r7]
 8003ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae4:	4637      	mov	r7, r6
 8003ae6:	42bb      	cmp	r3, r7
 8003ae8:	460e      	mov	r6, r1
 8003aea:	d9f4      	bls.n	8003ad6 <_printf_i+0x116>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d10b      	bne.n	8003b08 <_printf_i+0x148>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	07de      	lsls	r6, r3, #31
 8003af4:	d508      	bpl.n	8003b08 <_printf_i+0x148>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	6861      	ldr	r1, [r4, #4]
 8003afa:	4299      	cmp	r1, r3
 8003afc:	bfde      	ittt	le
 8003afe:	2330      	movle	r3, #48	; 0x30
 8003b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b08:	1b52      	subs	r2, r2, r5
 8003b0a:	6122      	str	r2, [r4, #16]
 8003b0c:	f8cd a000 	str.w	sl, [sp]
 8003b10:	464b      	mov	r3, r9
 8003b12:	aa03      	add	r2, sp, #12
 8003b14:	4621      	mov	r1, r4
 8003b16:	4640      	mov	r0, r8
 8003b18:	f7ff fee4 	bl	80038e4 <_printf_common>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d14a      	bne.n	8003bb6 <_printf_i+0x1f6>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	b004      	add	sp, #16
 8003b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	f043 0320 	orr.w	r3, r3, #32
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	4833      	ldr	r0, [pc, #204]	; (8003c00 <_printf_i+0x240>)
 8003b34:	2778      	movs	r7, #120	; 0x78
 8003b36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	6829      	ldr	r1, [r5, #0]
 8003b3e:	061f      	lsls	r7, r3, #24
 8003b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b44:	d402      	bmi.n	8003b4c <_printf_i+0x18c>
 8003b46:	065f      	lsls	r7, r3, #25
 8003b48:	bf48      	it	mi
 8003b4a:	b2b6      	uxthmi	r6, r6
 8003b4c:	07df      	lsls	r7, r3, #31
 8003b4e:	bf48      	it	mi
 8003b50:	f043 0320 	orrmi.w	r3, r3, #32
 8003b54:	6029      	str	r1, [r5, #0]
 8003b56:	bf48      	it	mi
 8003b58:	6023      	strmi	r3, [r4, #0]
 8003b5a:	b91e      	cbnz	r6, 8003b64 <_printf_i+0x1a4>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f023 0320 	bic.w	r3, r3, #32
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	2310      	movs	r3, #16
 8003b66:	e7a7      	b.n	8003ab8 <_printf_i+0xf8>
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <_printf_i+0x23c>)
 8003b6a:	e7e4      	b.n	8003b36 <_printf_i+0x176>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	e7bd      	b.n	8003aec <_printf_i+0x12c>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	1d18      	adds	r0, r3, #4
 8003b78:	6028      	str	r0, [r5, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1c4>
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1ca>
 8003b84:	0670      	lsls	r0, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c0>
 8003b88:	8019      	strh	r1, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4615      	mov	r5, r2
 8003b90:	e7bc      	b.n	8003b0c <_printf_i+0x14c>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc fb1e 	bl	80001e0 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1ea>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7aa      	b.n	8003b0c <_printf_i+0x14c>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ad      	beq.n	8003b20 <_printf_i+0x160>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x232>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a6      	b.n	8003b24 <_printf_i+0x164>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09d      	beq.n	8003b20 <_printf_i+0x160>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x216>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x20a>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x226>
 8003bfa:	bf00      	nop
 8003bfc:	08003d45 	.word	0x08003d45
 8003c00:	08003d56 	.word	0x08003d56

08003c04 <memmove>:
 8003c04:	4288      	cmp	r0, r1
 8003c06:	b510      	push	{r4, lr}
 8003c08:	eb01 0402 	add.w	r4, r1, r2
 8003c0c:	d902      	bls.n	8003c14 <memmove+0x10>
 8003c0e:	4284      	cmp	r4, r0
 8003c10:	4623      	mov	r3, r4
 8003c12:	d807      	bhi.n	8003c24 <memmove+0x20>
 8003c14:	1e43      	subs	r3, r0, #1
 8003c16:	42a1      	cmp	r1, r4
 8003c18:	d008      	beq.n	8003c2c <memmove+0x28>
 8003c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c22:	e7f8      	b.n	8003c16 <memmove+0x12>
 8003c24:	4402      	add	r2, r0
 8003c26:	4601      	mov	r1, r0
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	d100      	bne.n	8003c2e <memmove+0x2a>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c36:	e7f7      	b.n	8003c28 <memmove+0x24>

08003c38 <_sbrk_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d06      	ldr	r5, [pc, #24]	; (8003c54 <_sbrk_r+0x1c>)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fc feda 	bl	80009fc <_sbrk>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_sbrk_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_sbrk_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20000278 	.word	0x20000278

08003c58 <memcpy>:
 8003c58:	440a      	add	r2, r1
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c60:	d100      	bne.n	8003c64 <memcpy+0xc>
 8003c62:	4770      	bx	lr
 8003c64:	b510      	push	{r4, lr}
 8003c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6e:	4291      	cmp	r1, r2
 8003c70:	d1f9      	bne.n	8003c66 <memcpy+0xe>
 8003c72:	bd10      	pop	{r4, pc}

08003c74 <_realloc_r>:
 8003c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	460e      	mov	r6, r1
 8003c7e:	b921      	cbnz	r1, 8003c8a <_realloc_r+0x16>
 8003c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c84:	4611      	mov	r1, r2
 8003c86:	f7ff bc49 	b.w	800351c <_malloc_r>
 8003c8a:	b92a      	cbnz	r2, 8003c98 <_realloc_r+0x24>
 8003c8c:	f7ff fbda 	bl	8003444 <_free_r>
 8003c90:	4625      	mov	r5, r4
 8003c92:	4628      	mov	r0, r5
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c98:	f000 f81b 	bl	8003cd2 <_malloc_usable_size_r>
 8003c9c:	4284      	cmp	r4, r0
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	d802      	bhi.n	8003ca8 <_realloc_r+0x34>
 8003ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ca6:	d812      	bhi.n	8003cce <_realloc_r+0x5a>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4640      	mov	r0, r8
 8003cac:	f7ff fc36 	bl	800351c <_malloc_r>
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d0ed      	beq.n	8003c92 <_realloc_r+0x1e>
 8003cb6:	42bc      	cmp	r4, r7
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4631      	mov	r1, r6
 8003cbc:	bf28      	it	cs
 8003cbe:	463a      	movcs	r2, r7
 8003cc0:	f7ff ffca 	bl	8003c58 <memcpy>
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f7ff fbbc 	bl	8003444 <_free_r>
 8003ccc:	e7e1      	b.n	8003c92 <_realloc_r+0x1e>
 8003cce:	4635      	mov	r5, r6
 8003cd0:	e7df      	b.n	8003c92 <_realloc_r+0x1e>

08003cd2 <_malloc_usable_size_r>:
 8003cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd6:	1f18      	subs	r0, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bfbc      	itt	lt
 8003cdc:	580b      	ldrlt	r3, [r1, r0]
 8003cde:	18c0      	addlt	r0, r0, r3
 8003ce0:	4770      	bx	lr
	...

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
