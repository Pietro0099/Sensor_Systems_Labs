
Homework_6c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009f00  08009f00  00019f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a32c  0800a32c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a334  0800a334  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a334  0800a334  0001a334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001e0  0800a51c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800a51c  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103b0  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002171  00000000  00000000  00030603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c64  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017673  00000000  00000000  00034384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001279b  00000000  00000000  0004b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916b2  00000000  00000000  0005e192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b0  00000000  00000000  000ef844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f4cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ee8 	.word	0x08009ee8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009ee8 	.word	0x08009ee8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
	if (htim==&htim2){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d114      	bne.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x3a>

		// Specify where to start reading
		HAL_I2C_Master_Transmit(&hi2c1, ACC_ADDRESS, &INITIAL_ADDR, 1, timeout_ms);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f76:	f001 fe05 	bl	8002b84 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive_DMA(&hi2c1, ACC_ADDRESS+1, (uint8_t *)&acc_data, sizeof(acc_data));
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3301      	adds	r3, #1
 8000f82:	b299      	uxth	r1, r3
 8000f84:	2305      	movs	r3, #5
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f8a:	f001 fef9 	bl	8002d80 <HAL_I2C_Master_Receive_DMA>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002b0 	.word	0x200002b0
 8000f9c:	20000002 	.word	0x20000002
 8000fa0:	2000000b 	.word	0x2000000b
 8000fa4:	2000000a 	.word	0x2000000a
 8000fa8:	200001fc 	.word	0x200001fc
 8000fac:	200003ec 	.word	0x200003ec

08000fb0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb4:	b088      	sub	sp, #32
 8000fb6:	af06      	add	r7, sp, #24
 8000fb8:	6078      	str	r0, [r7, #4]
	if (hi2c==&hi2c1){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <HAL_I2C_MasterRxCpltCallback+0xec>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d166      	bne.n	8001090 <HAL_I2C_MasterRxCpltCallback+0xe0>

		acc_g_x = acc_data[0] / 64.0;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8000fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fab3 	bl	8000534 <__aeabi_i2d>
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8000fd4:	f7ff fc42 	bl	800085c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdea 	bl	8000bb8 <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <HAL_I2C_MasterRxCpltCallback+0xf8>)
 8000fe8:	6013      	str	r3, [r2, #0]
		acc_g_y = acc_data[2] / 64.0;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8000fec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa9f 	bl	8000534 <__aeabi_i2d>
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8000ffc:	f7ff fc2e 	bl	800085c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdd6 	bl	8000bb8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_I2C_MasterRxCpltCallback+0xfc>)
 8001010:	6013      	str	r3, [r2, #0]
		acc_g_z = acc_data[4] / 64.0;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8001014:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa8b 	bl	8000534 <__aeabi_i2d>
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8001024:	f7ff fc1a 	bl	800085c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdc2 	bl	8000bb8 <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_I2C_MasterRxCpltCallback+0x100>)
 8001038:	6013      	str	r3, [r2, #0]

		length = snprintf(string, sizeof(string), "Acceleration [g]:\r\n\n X = %+.2f g\r\n Y = %+.2f g\r\n Z = %+.2f g\r\n\n\n", acc_g_x, acc_g_y, acc_g_z);
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_I2C_MasterRxCpltCallback+0xf8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa8a 	bl	8000558 <__aeabi_f2d>
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_I2C_MasterRxCpltCallback+0xfc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa83 	bl	8000558 <__aeabi_f2d>
 8001052:	4680      	mov	r8, r0
 8001054:	4689      	mov	r9, r1
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_I2C_MasterRxCpltCallback+0x100>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa7c 	bl	8000558 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001068:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800106c:	e9cd 4500 	strd	r4, r5, [sp]
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_I2C_MasterRxCpltCallback+0x104>)
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <HAL_I2C_MasterRxCpltCallback+0x108>)
 8001076:	f006 fdc7 	bl	8007c08 <sniprintf>
 800107a:	4603      	mov	r3, r0
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_I2C_MasterRxCpltCallback+0x10c>)
 800107e:	6013      	str	r3, [r2, #0]
		// the + sign ensures the sign is always printed

		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)string, length);
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	490b      	ldr	r1, [pc, #44]	; (80010b8 <HAL_I2C_MasterRxCpltCallback+0x108>)
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <HAL_I2C_MasterRxCpltCallback+0x110>)
 800108c:	f005 f81c 	bl	80060c8 <HAL_UART_Transmit_DMA>
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800109a:	bf00      	nop
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	200003ec 	.word	0x200003ec
 80010a4:	40500000 	.word	0x40500000
 80010a8:	200003e0 	.word	0x200003e0
 80010ac:	200003e4 	.word	0x200003e4
 80010b0:	200003e8 	.word	0x200003e8
 80010b4:	08009f00 	.word	0x08009f00
 80010b8:	2000039c 	.word	0x2000039c
 80010bc:	200003dc 	.word	0x200003dc
 80010c0:	200002f8 	.word	0x200002f8

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 fcd9 	bl	8001a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f879 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f000 f9b1 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d6:	f000 f987 	bl	80013e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010da:	f000 f95b 	bl	8001394 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010de:	f000 f8dd 	bl	800129c <MX_I2C1_Init>
  MX_TIM2_Init();
 80010e2:	f000 f909 	bl	80012f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Accelerometer initialization
  if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout_ms) == HAL_OK){
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <main+0xc8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b299      	uxth	r1, r3
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <main+0xcc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2302      	movs	r3, #2
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <main+0xd0>)
 80010f6:	4828      	ldr	r0, [pc, #160]	; (8001198 <main+0xd4>)
 80010f8:	f001 fd44 	bl	8002b84 <HAL_I2C_Master_Transmit>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d113      	bne.n	800112a <main+0x66>
	  length = snprintf(string, sizeof(string), "LIS2DE found.\r\n");
 8001102:	4a26      	ldr	r2, [pc, #152]	; (800119c <main+0xd8>)
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	4826      	ldr	r0, [pc, #152]	; (80011a0 <main+0xdc>)
 8001108:	f006 fd7e 	bl	8007c08 <sniprintf>
 800110c:	4603      	mov	r3, r0
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <main+0xe0>)
 8001110:	6013      	str	r3, [r2, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, CTRL_REG2, sizeof(CTRL_REG2), timeout_ms);
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <main+0xc8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b299      	uxth	r1, r3
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <main+0xcc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <main+0xe4>)
 8001122:	481d      	ldr	r0, [pc, #116]	; (8001198 <main+0xd4>)
 8001124:	f001 fd2e 	bl	8002b84 <HAL_I2C_Master_Transmit>
 8001128:	e022      	b.n	8001170 <main+0xac>
	  // if the I2C writer returns OK, then we know that there is a device with the LIS2DE address on the I2C bus, and we can continue
  } else if(HAL_I2C_Master_Transmit(&hi2c1, LIS2DE12_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout_ms) == HAL_OK){
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <main+0xe8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b299      	uxth	r1, r3
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <main+0xcc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2302      	movs	r3, #2
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <main+0xd0>)
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <main+0xd4>)
 800113c:	f001 fd22 	bl	8002b84 <HAL_I2C_Master_Transmit>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <main+0x9c>
  	  length = snprintf(string, sizeof(string), "LIS2DE12 found.\r\n");
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <main+0xec>)
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <main+0xdc>)
 800114c:	f006 fd5c 	bl	8007c08 <sniprintf>
 8001150:	4603      	mov	r3, r0
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <main+0xe0>)
 8001154:	6013      	str	r3, [r2, #0]
  	  ACC_ADDRESS = LIS2DE12_ADDRESS;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <main+0xe8>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <main+0xf0>)
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e007      	b.n	8001170 <main+0xac>
	  // if not, we switch to LIS2DE12 and try again
  } else {
	  length = snprintf(string, sizeof(string), "I can't find an accelerometer on the I2C bus.\r\n");
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <main+0xf4>)
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <main+0xdc>)
 8001166:	f006 fd4f 	bl	8007c08 <sniprintf>
 800116a:	4603      	mov	r3, r0
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <main+0xe0>)
 800116e:	6013      	str	r3, [r2, #0]
  }

  HAL_UART_Transmit(&huart2, (uint8_t *)&string, length, timeout_ms);
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <main+0xe0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <main+0xcc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4909      	ldr	r1, [pc, #36]	; (80011a0 <main+0xdc>)
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0xf8>)
 800117e:	f004 ff10 	bl	8005fa2 <HAL_UART_Transmit>

  // Once the accelerometer is identified and recognised, the timer can be started
  HAL_TIM_Base_Start_IT(&htim2);
 8001182:	480f      	ldr	r0, [pc, #60]	; (80011c0 <main+0xfc>)
 8001184:	f004 faca 	bl	800571c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001188:	e7fe      	b.n	8001188 <main+0xc4>
 800118a:	bf00      	nop
 800118c:	20000000 	.word	0x20000000
 8001190:	2000000b 	.word	0x2000000b
 8001194:	20000004 	.word	0x20000004
 8001198:	200001fc 	.word	0x200001fc
 800119c:	08009f44 	.word	0x08009f44
 80011a0:	2000039c 	.word	0x2000039c
 80011a4:	200003dc 	.word	0x200003dc
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000001 	.word	0x20000001
 80011b0:	08009f54 	.word	0x08009f54
 80011b4:	20000002 	.word	0x20000002
 80011b8:	08009f68 	.word	0x08009f68
 80011bc:	200002f8 	.word	0x200002f8
 80011c0:	200002b0 	.word	0x200002b0

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 fd8f 	bl	8007cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <SystemClock_Config+0xd0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <SystemClock_Config+0xd0>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <SystemClock_Config+0xd0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <SystemClock_Config+0xd4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <SystemClock_Config+0xd4>)
 8001212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <SystemClock_Config+0xd4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800123c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001242:	2304      	movs	r3, #4
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001246:	2307      	movs	r3, #7
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fd7c 	bl	8004d4c <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800125a:	f000 f95b 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f003 ffde 	bl	800523c <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001286:	f000 f945 	bl	8001514 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	; 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f001 fb0f 	bl	80028fc <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 f916 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001fc 	.word	0x200001fc
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_TIM2_Init+0x98>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_TIM2_Init+0x98>)
 800131e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_TIM2_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_TIM2_Init+0x98>)
 800132c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_TIM2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_TIM2_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_TIM2_Init+0x98>)
 8001340:	f004 f99c 	bl	800567c <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800134a:	f000 f8e3 	bl	8001514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_TIM2_Init+0x98>)
 800135c:	f004 fb48 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001366:	f000 f8d5 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_TIM2_Init+0x98>)
 8001378:	f004 fd44 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001382:	f000 f8c7 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002b0 	.word	0x200002b0

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f004 fd9c 	bl	8005f08 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f89d 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002f8 	.word	0x200002f8
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DMA_Init+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200b      	movs	r0, #11
 8001410:	f000 fc83 	bl	8001d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001414:	200b      	movs	r0, #11
 8001416:	f000 fc9c 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2011      	movs	r0, #17
 8001420:	f000 fc7b 	bl	8001d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001424:	2011      	movs	r0, #17
 8001426:	f000 fc94 	bl	8001d52 <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <MX_GPIO_Init+0xd0>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_GPIO_Init+0xd4>)
 80014c4:	f001 fa00 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0xd8>)
 80014e0:	f001 f86e 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014e4:	2320      	movs	r3, #32
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_GPIO_Init+0xd4>)
 80014fc:	f001 f860 	bl	80025c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020800 	.word	0x40020800

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_MspInit+0x4c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x4c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155e:	2007      	movs	r0, #7
 8001560:	f000 fbd0 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_I2C_MspInit+0xf0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d162      	bne.n	8001658 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4827      	ldr	r0, [pc, #156]	; (8001668 <HAL_I2C_MspInit+0xf8>)
 80015cc:	f000 fff8 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_I2C_MspInit+0x100>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_I2C_MspInit+0xfc>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <HAL_I2C_MspInit+0xfc>)
 800162e:	f000 fbab 	bl	8001d88 <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001638:	f7ff ff6c 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_I2C_MspInit+0xfc>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	201f      	movs	r0, #31
 800164e:	f000 fb64 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001652:	201f      	movs	r0, #31
 8001654:	f000 fb7d 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400
 800166c:	20000250 	.word	0x20000250
 8001670:	40026010 	.word	0x40026010

08001674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001684:	d115      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_TIM_Base_MspInit+0x48>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_TIM_Base_MspInit+0x48>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_TIM_Base_MspInit+0x48>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f000 fb37 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f000 fb50 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <HAL_UART_MspInit+0xf0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d161      	bne.n	80017a6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171a:	230c      	movs	r3, #12
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172a:	2307      	movs	r3, #7
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <HAL_UART_MspInit+0xf8>)
 8001736:	f000 ff43 	bl	80025c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800173c:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_UART_MspInit+0x100>)
 800173e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001746:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800177c:	f000 fb04 	bl	8001d88 <HAL_DMA_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001786:	f7ff fec5 	bl	8001514 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2026      	movs	r0, #38	; 0x26
 800179c:	f000 fabd 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a0:	2026      	movs	r0, #38	; 0x26
 80017a2:	f000 fad6 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40004400 	.word	0x40004400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	2000033c 	.word	0x2000033c
 80017c0:	400260a0 	.word	0x400260a0

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f000 f988 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream0_IRQHandler+0x10>)
 800181e:	f000 fc4b 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000250 	.word	0x20000250

0800182c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA1_Stream6_IRQHandler+0x10>)
 8001832:	f000 fc41 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000033c 	.word	0x2000033c

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM2_IRQHandler+0x10>)
 8001846:	f003 ffcb 	bl	80057e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002b0 	.word	0x200002b0

08001854 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <I2C1_EV_IRQHandler+0x10>)
 800185a:	f001 fbc1 	bl	8002fe0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001fc 	.word	0x200001fc

08001868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART2_IRQHandler+0x10>)
 800186e:	f004 fca9 	bl	80061c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002f8 	.word	0x200002f8

0800187c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001896:	f006 fa81 	bl	8007d9c <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2216      	movs	r2, #22
 800189e:	601a      	str	r2, [r3, #0]
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_exit>:

void _exit (int status)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018be:	e7fe      	b.n	80018be <_exit+0x12>

080018c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
  }

  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e009      	b.n	8001920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf1      	blt.n	800190c <_write+0x12>
  }
  return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_close>:

int _close(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195a:	605a      	str	r2, [r3, #4]
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f006 f9e6 	bl	8007d9c <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20018000 	.word	0x20018000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200003f4 	.word	0x200003f4
 8001a04:	20000548 	.word	0x20000548

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a32:	490e      	ldr	r1, [pc, #56]	; (8001a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a34:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a48:	4c0b      	ldr	r4, [pc, #44]	; (8001a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a56:	f7ff ffd7 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f006 f9a5 	bl	8007da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5e:	f7ff fb31 	bl	80010c4 <main>
  bx  lr    
 8001a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a70:	0800a33c 	.word	0x0800a33c
  ldr r2, =_sbss
 8001a74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a78:	20000548 	.word	0x20000548

08001a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC_IRQHandler>
	...

08001a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_Init+0x40>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_Init+0x40>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_Init+0x40>)
 8001aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f92b 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fd34 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f943 	bl	8001d6e <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f90b 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000014 	.word	0x20000014
 8001b20:	20000010 	.word	0x20000010

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000014 	.word	0x20000014
 8001b48:	200003f8 	.word	0x200003f8

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200003f8 	.word	0x200003f8

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	; (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff29 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff3e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff31 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa2 	bl	8001cc0 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff feda 	bl	8001b4c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e099      	b.n	8001ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc4:	e00f      	b.n	8001de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc6:	f7ff fec1 	bl	8001b4c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d908      	bls.n	8001de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e078      	b.n	8001ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e8      	bne.n	8001dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_DMA_Init+0x158>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d107      	bne.n	8001e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0307 	bic.w	r3, r3, #7
 8001e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d117      	bne.n	8001eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00e      	beq.n	8001eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb1b 	bl	80024c8 <DMA_CheckFifoParam>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e016      	b.n	8001ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fad2 	bl	800245c <DMA_CalcBaseAndBitshift>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	223f      	movs	r2, #63	; 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	f010803f 	.word	0xf010803f

08001ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_DMA_Start_IT+0x26>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e040      	b.n	8001f8c <HAL_DMA_Start_IT+0xa8>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d12f      	bne.n	8001f7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2202      	movs	r2, #2
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fa64 	bl	8002400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0216 	orr.w	r2, r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0208 	orr.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e005      	b.n	8001f8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fa2:	f7ff fdd3 	bl	8001b4c <HAL_GetTick>
 8001fa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d008      	beq.n	8001fc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e052      	b.n	800206c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0216 	bic.w	r2, r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_DMA_Abort+0x62>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002016:	e013      	b.n	8002040 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002018:	f7ff fd98 	bl	8001b4c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b05      	cmp	r3, #5
 8002024:	d90c      	bls.n	8002040 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e015      	b.n	800206c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1e4      	bne.n	8002018 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	223f      	movs	r2, #63	; 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d004      	beq.n	8002092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00c      	b.n	80020ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2205      	movs	r2, #5
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c4:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <HAL_DMA_IRQHandler+0x248>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a8e      	ldr	r2, [pc, #568]	; (8002304 <HAL_DMA_IRQHandler+0x24c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2208      	movs	r2, #8
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01a      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0204 	bic.w	r2, r2, #4
 800210a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2208      	movs	r2, #8
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2201      	movs	r2, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2201      	movs	r2, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2204      	movs	r2, #4
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2210      	movs	r2, #16
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d043      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03c      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2210      	movs	r2, #16
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
 80021e6:	e01f      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e016      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0208 	bic.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2220      	movs	r2, #32
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 808f 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8087 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2220      	movs	r2, #32
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b05      	cmp	r3, #5
 8002260:	d136      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_IRQHandler+0x1da>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	223f      	movs	r2, #63	; 0x3f
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07e      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
        }
        return;
 80022ce:	e079      	b.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e02c      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
 80022fe:	bf00      	nop
 8002300:	2000000c 	.word	0x2000000c
 8002304:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e01e      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0210 	bic.w	r2, r2, #16
 8002336:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3301      	adds	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d307      	bcc.n	80023a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f2      	bne.n	8002384 <HAL_DMA_IRQHandler+0x2cc>
 800239e:	e000      	b.n	80023a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c4:	bf00      	nop
    }
  }
}
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023da:	b2db      	uxtb	r3, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800241c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d108      	bne.n	8002440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800243e:	e007      	b.n	8002450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b10      	subs	r3, #16
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <DMA_CalcBaseAndBitshift+0x64>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d909      	bls.n	800249e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	1d1a      	adds	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
 800249c:	e007      	b.n	80024ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	aaaaaaab 	.word	0xaaaaaaab
 80024c4:	08009fb0 	.word	0x08009fb0

080024c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11f      	bne.n	8002522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d856      	bhi.n	8002596 <DMA_CheckFifoParam+0xce>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <DMA_CheckFifoParam+0x28>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002513 	.word	0x08002513
 80024f8:	08002501 	.word	0x08002501
 80024fc:	08002597 	.word	0x08002597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d046      	beq.n	800259a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e043      	b.n	800259a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251a:	d140      	bne.n	800259e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e03d      	b.n	800259e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d121      	bne.n	8002570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d837      	bhi.n	80025a2 <DMA_CheckFifoParam+0xda>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x70>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002549 	.word	0x08002549
 800253c:	0800254f 	.word	0x0800254f
 8002540:	08002549 	.word	0x08002549
 8002544:	08002561 	.word	0x08002561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e030      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d025      	beq.n	80025a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e022      	b.n	80025a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002568:	d11f      	bne.n	80025aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800256e:	e01c      	b.n	80025aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d903      	bls.n	800257e <DMA_CheckFifoParam+0xb6>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d003      	beq.n	8002584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800257c:	e018      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      break;
 8002582:	e015      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e00b      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 8002596:	bf00      	nop
 8002598:	e00a      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e008      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e006      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
    }
  } 
  
  return status; 
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e159      	b.n	8002890 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 8148 	bne.w	800288a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d005      	beq.n	8002612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	2b02      	cmp	r3, #2
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d017      	beq.n	80026b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80a2 	beq.w	800288a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b57      	ldr	r3, [pc, #348]	; (80028a8 <HAL_GPIO_Init+0x2e8>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <HAL_GPIO_Init+0x2e8>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <HAL_GPIO_Init+0x2e8>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002762:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_GPIO_Init+0x2ec>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a49      	ldr	r2, [pc, #292]	; (80028b0 <HAL_GPIO_Init+0x2f0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_Init+0x202>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_GPIO_Init+0x2f4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0x1fe>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_GPIO_Init+0x2f8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00d      	beq.n	80027ba <HAL_GPIO_Init+0x1fa>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a46      	ldr	r2, [pc, #280]	; (80028bc <HAL_GPIO_Init+0x2fc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <HAL_GPIO_Init+0x1f6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a45      	ldr	r2, [pc, #276]	; (80028c0 <HAL_GPIO_Init+0x300>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_GPIO_Init+0x1f2>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e008      	b.n	80027c4 <HAL_GPIO_Init+0x204>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x204>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e004      	b.n	80027c4 <HAL_GPIO_Init+0x204>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_Init+0x204>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x204>
 80027c2:	2300      	movs	r3, #0
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	4093      	lsls	r3, r2
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d4:	4935      	ldr	r1, [pc, #212]	; (80028ac <HAL_GPIO_Init+0x2ec>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_GPIO_Init+0x304>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_GPIO_Init+0x304>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285a:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_GPIO_Init+0x304>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f67f aea2 	bls.w	80025dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e12b      	b.n	8002b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fe24 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800295e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002960:	f002 fe64 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a81      	ldr	r2, [pc, #516]	; (8002b70 <HAL_I2C_Init+0x274>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d807      	bhi.n	8002980 <HAL_I2C_Init+0x84>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_I2C_Init+0x278>)
 8002974:	4293      	cmp	r3, r2
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e006      	b.n	800298e <HAL_I2C_Init+0x92>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a7d      	ldr	r2, [pc, #500]	; (8002b78 <HAL_I2C_Init+0x27c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	bf94      	ite	ls
 8002988:	2301      	movls	r3, #1
 800298a:	2300      	movhi	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0e7      	b.n	8002b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a78      	ldr	r2, [pc, #480]	; (8002b7c <HAL_I2C_Init+0x280>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0c9b      	lsrs	r3, r3, #18
 80029a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a6a      	ldr	r2, [pc, #424]	; (8002b70 <HAL_I2C_Init+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d802      	bhi.n	80029d0 <HAL_I2C_Init+0xd4>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3301      	adds	r3, #1
 80029ce:	e009      	b.n	80029e4 <HAL_I2C_Init+0xe8>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	4a69      	ldr	r2, [pc, #420]	; (8002b80 <HAL_I2C_Init+0x284>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	3301      	adds	r3, #1
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	495c      	ldr	r1, [pc, #368]	; (8002b70 <HAL_I2C_Init+0x274>)
 8002a00:	428b      	cmp	r3, r1
 8002a02:	d819      	bhi.n	8002a38 <HAL_I2C_Init+0x13c>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e59      	subs	r1, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a18:	400b      	ands	r3, r1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_I2C_Init+0x138>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e59      	subs	r1, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	e051      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e04f      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <HAL_I2C_Init+0x168>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e012      	b.n	8002a8a <HAL_I2C_Init+0x18e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	0099      	lsls	r1, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Init+0x196>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e022      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10e      	bne.n	8002ab8 <HAL_I2C_Init+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e58      	subs	r0, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	440b      	add	r3, r1
 8002aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab6:	e00f      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	6809      	ldr	r1, [r1, #0]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6911      	ldr	r1, [r2, #16]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68d2      	ldr	r2, [r2, #12]
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	000186a0 	.word	0x000186a0
 8002b74:	001e847f 	.word	0x001e847f
 8002b78:	003d08ff 	.word	0x003d08ff
 8002b7c:	431bde83 	.word	0x431bde83
 8002b80:	10624dd3 	.word	0x10624dd3

08002b84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	817b      	strh	r3, [r7, #10]
 8002b94:	4613      	mov	r3, r2
 8002b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7fe ffd8 	bl	8001b4c <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 80e0 	bne.w	8002d6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4970      	ldr	r1, [pc, #448]	; (8002d78 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 fef4 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0d3      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Transmit+0x50>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0cc      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d007      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2221      	movs	r2, #33	; 0x21
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2210      	movs	r2, #16
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	893a      	ldrh	r2, [r7, #8]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a50      	ldr	r2, [pc, #320]	; (8002d7c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 fc72 	bl	800452c <I2C_MasterRequestWrite>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e08d      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c68:	e066      	b.n	8002d38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f001 ff6e 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06b      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d11b      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0x188>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d017      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6a39      	ldr	r1, [r7, #32]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f001 ff5e 	bl	8004bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d107      	bne.n	8002d34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e01a      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d194      	bne.n	8002c6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	00100002 	.word	0x00100002
 8002d7c:	ffff0000 	.word	0xffff0000

08002d80 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	817b      	strh	r3, [r7, #10]
 8002d90:	4613      	mov	r3, r2
 8002d92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	f040 810d 	bne.w	8002fc0 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	4a88      	ldr	r2, [pc, #544]	; (8002fd0 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0a1a      	lsrs	r2, r3, #8
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e3      	b.n	8002fc2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d0db      	beq.n	8002dc0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Master_Receive_DMA+0x96>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0d5      	b.n	8002fc2 <HAL_I2C_Master_Receive_DMA+0x242>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d007      	beq.n	8002e3c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2222      	movs	r2, #34	; 0x22
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2210      	movs	r2, #16
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	893a      	ldrh	r2, [r7, #8]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e7e:	897a      	ldrh	r2, [r7, #10]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07b      	beq.n	8002f84 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02a      	beq.n	8002eea <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4a4f      	ldr	r2, [pc, #316]	; (8002fd8 <HAL_I2C_Master_Receive_DMA+0x258>)
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	4a4e      	ldr	r2, [pc, #312]	; (8002fdc <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2200      	movs	r2, #0
 8002eba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3310      	adds	r3, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	f7ff f803 	bl	8001ee4 <HAL_DMA_Start_IT>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d139      	bne.n	8002f5c <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002ee8:	e013      	b.n	8002f12 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e057      	b.n	8002fc2 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f20:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f48:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	e02f      	b.n	8002fbc <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0210 	orr.w	r2, r3, #16
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e01e      	b.n	8002fc2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f9a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002faa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fba:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	14f8b589 	.word	0x14f8b589
 8002fd4:	ffff0000 	.word	0xffff0000
 8002fd8:	08004631 	.word	0x08004631
 8002fdc:	080047db 	.word	0x080047db

08002fe0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003000:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d003      	beq.n	8003018 <HAL_I2C_EV_IRQHandler+0x38>
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	f040 80b1 	bne.w	800317a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_I2C_EV_IRQHandler+0x6e>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003038:	d003      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x62>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003040:	d101      	bne.n	8003046 <HAL_I2C_EV_IRQHandler+0x66>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_I2C_EV_IRQHandler+0x68>
 8003046:	2300      	movs	r3, #0
 8003048:	2b01      	cmp	r3, #1
 800304a:	f000 8114 	beq.w	8003276 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x90>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fe57 	bl	8004d16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fcb5 	bl	80039d8 <I2C_Master_SB>
 800306e:	e083      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_I2C_EV_IRQHandler+0xac>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fd2d 	bl	8003ae4 <I2C_Master_ADD10>
 800308a:	e075      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_I2C_EV_IRQHandler+0xc8>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fd49 	bl	8003b38 <I2C_Master_ADDR>
 80030a6:	e067      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c0:	f000 80db 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x10a>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0x10a>
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f92d 	bl	8003342 <I2C_MasterTransmit_TXE>
 80030e8:	e046      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80c2 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80bc 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003102:	7bbb      	ldrb	r3, [r7, #14]
 8003104:	2b21      	cmp	r3, #33	; 0x21
 8003106:	d103      	bne.n	8003110 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f9b6 	bl	800347a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310e:	e0b4      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	f040 80b1 	bne.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fa24 	bl	8003566 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311e:	e0ac      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	f000 80a4 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00d      	beq.n	8003158 <HAL_I2C_EV_IRQHandler+0x178>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_I2C_EV_IRQHandler+0x178>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fa9c 	bl	800368e <I2C_MasterReceive_RXNE>
 8003156:	e00f      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 808b 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8085 	beq.w	800327a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb47 	bl	8003804 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	e080      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x29a>
 8003178:	e07f      	b.n	800327a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e007      	b.n	800319c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x1ea>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff07 	bl	8003fd6 <I2C_Slave_ADDR>
 80031c8:	e05a      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_I2C_EV_IRQHandler+0x206>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 ff42 	bl	8004068 <I2C_Slave_STOPF>
 80031e4:	e04c      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
 80031e8:	2b21      	cmp	r3, #33	; 0x21
 80031ea:	d002      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x212>
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2b29      	cmp	r3, #41	; 0x29
 80031f0:	d120      	bne.n	8003234 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x238>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x238>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fe22 	bl	8003e5a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003216:	e032      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02d      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x29e>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	2b00      	cmp	r3, #0
 800322a:	d028      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fe51 	bl	8003ed4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003232:	e024      	b.n	800327e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <HAL_I2C_EV_IRQHandler+0x27a>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_I2C_EV_IRQHandler+0x27a>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fe5f 	bl	8003f16 <I2C_SlaveReceive_RXNE>
 8003258:	e012      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fe8f 	bl	8003f92 <I2C_SlaveReceive_BTF>
 8003274:	e004      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003276:	bf00      	nop
 8003278:	e002      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
 80032ce:	4613      	mov	r3, r2
 80032d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003358:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d150      	bne.n	800340a <I2C_MasterTransmit_TXE+0xc8>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b21      	cmp	r3, #33	; 0x21
 800336c:	d14d      	bne.n	800340a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d01d      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b20      	cmp	r3, #32
 8003378:	d01a      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003380:	d016      	beq.n	80033b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003390:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2211      	movs	r2, #17
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff6c 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ae:	e060      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d107      	bne.n	80033fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff7d 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033f8:	e03b      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff3f 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003408:	e033      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	d005      	beq.n	800341c <I2C_MasterTransmit_TXE+0xda>
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d12d      	bne.n	8003472 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b22      	cmp	r3, #34	; 0x22
 800341a:	d12a      	bne.n	8003472 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003434:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003436:	e01c      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d103      	bne.n	800344c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f88e 	bl	8003566 <I2C_MemoryTransmit_TXE_BTF>
}
 800344a:	e012      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003470:	e7ff      	b.n	8003472 <I2C_MasterTransmit_TXE+0x130>
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b21      	cmp	r3, #33	; 0x21
 8003492:	d164      	bne.n	800355e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034c2:	e04c      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d01d      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d01a      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d6:	d016      	beq.n	8003506 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2211      	movs	r2, #17
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fec1 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
}
 8003504:	e02b      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003514:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fed2 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
}
 800354e:	e006      	b.n	800355e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe94 	bl	8003286 <HAL_I2C_MasterTxCpltCallback>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11d      	bne.n	80035ba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10b      	bne.n	800359e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	b2da      	uxtb	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800359c:	e073      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	121b      	asrs	r3, r3, #8
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035b8:	e065      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10b      	bne.n	80035da <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035d8:	e055      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d151      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b22      	cmp	r3, #34	; 0x22
 80035e6:	d10d      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003602:	e040      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d015      	beq.n	800363a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b21      	cmp	r3, #33	; 0x21
 8003612:	d112      	bne.n	800363a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003638:	e025      	b.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d120      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b21      	cmp	r3, #33	; 0x21
 8003648:	d11d      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003658:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fe36 	bl	80032f2 <HAL_I2C_MemTxCpltCallback>
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	f040 80ac 	bne.w	80037fc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d921      	bls.n	80036f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	f040 808c 	bne.w	80037fc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036f4:	e082      	b.n	80037fc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d075      	beq.n	80037ea <I2C_MasterReceive_RXNE+0x15c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d002      	beq.n	800370a <I2C_MasterReceive_RXNE+0x7c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d16f      	bne.n	80037ea <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 faa2 	bl	8004c54 <I2C_WaitOnSTOPRequestThroughIT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d142      	bne.n	800379c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003724:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003734:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d10a      	bne.n	8003786 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fdc1 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003784:	e03a      	b.n	80037fc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2212      	movs	r2, #18
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd fc0b 	bl	8000fb0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800379a:	e02f      	b.n	80037fc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fd99 	bl	800331a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037e8:	e008      	b.n	80037fc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	605a      	str	r2, [r3, #4]
}
 80037fa:	e7ff      	b.n	80037fc <I2C_MasterReceive_RXNE+0x16e>
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11b      	bne.n	8003854 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003852:	e0bd      	b.n	80039d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b03      	cmp	r3, #3
 800385c:	d129      	bne.n	80038b2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d00a      	beq.n	800388a <I2C_MasterReceive_BTF+0x86>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d007      	beq.n	800388a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b0:	e08e      	b.n	80039d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d176      	bne.n	80039aa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <I2C_MasterReceive_BTF+0xc4>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d108      	bne.n	80038da <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e019      	b.n	800390e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d002      	beq.n	80038e6 <I2C_MasterReceive_BTF+0xe2>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e00a      	b.n	800390e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d007      	beq.n	800390e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003968:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d10a      	bne.n	8003994 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fcba 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
}
 8003992:	e01d      	b.n	80039d0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2212      	movs	r2, #18
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fb04 	bl	8000fb0 <HAL_I2C_MasterRxCpltCallback>
}
 80039a8:	e012      	b.n	80039d0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d117      	bne.n	8003a1c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a04:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a06:	e067      	b.n	8003ad8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]
}
 8003a1a:	e05d      	b.n	8003ad8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d133      	bne.n	8003a8e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b21      	cmp	r3, #33	; 0x21
 8003a30:	d109      	bne.n	8003a46 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a42:	611a      	str	r2, [r3, #16]
 8003a44:	e008      	b.n	8003a58 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <I2C_Master_SB+0x92>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d032      	beq.n	8003ad8 <I2C_Master_SB+0x100>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02d      	beq.n	8003ad8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	605a      	str	r2, [r3, #4]
}
 8003a8c:	e024      	b.n	8003ad8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	11db      	asrs	r3, r3, #7
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0306 	and.w	r3, r3, #6
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f063 030f 	orn	r3, r3, #15
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]
}
 8003ab2:	e011      	b.n	8003ad8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10d      	bne.n	8003ad8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	11db      	asrs	r3, r3, #7
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 0306 	and.w	r3, r3, #6
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f063 030e 	orn	r3, r3, #14
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <I2C_Master_ADD10+0x26>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <I2C_Master_ADD10+0x48>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b091      	sub	sp, #68	; 0x44
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b22      	cmp	r3, #34	; 0x22
 8003b60:	f040 8169 	bne.w	8003e36 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <I2C_Master_ADDR+0x54>
 8003b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d10b      	bne.n	8003b8c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b74:	2300      	movs	r3, #0
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	e160      	b.n	8003e4e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11d      	bne.n	8003bd0 <I2C_Master_ADDR+0x98>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b9c:	d118      	bne.n	8003bd0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	651a      	str	r2, [r3, #80]	; 0x50
 8003bce:	e13e      	b.n	8003e4e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d113      	bne.n	8003c02 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e115      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	f040 808a 	bne.w	8003d22 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c14:	d137      	bne.n	8003c86 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c34:	d113      	bne.n	8003c5e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c44:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	e0e7      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e0d3      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d02e      	beq.n	8003cea <I2C_Master_ADDR+0x1b2>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d02b      	beq.n	8003cea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	2b12      	cmp	r3, #18
 8003c96:	d102      	bne.n	8003c9e <I2C_Master_ADDR+0x166>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d125      	bne.n	8003cea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d00e      	beq.n	8003cc2 <I2C_Master_ADDR+0x18a>
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d00b      	beq.n	8003cc2 <I2C_Master_ADDR+0x18a>
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d008      	beq.n	8003cc2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e007      	b.n	8003cd2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	e0a1      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e085      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d14d      	bne.n	8003dc8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d016      	beq.n	8003d60 <I2C_Master_ADDR+0x228>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d013      	beq.n	8003d60 <I2C_Master_ADDR+0x228>
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d010      	beq.n	8003d60 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e007      	b.n	8003d70 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d6e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d117      	bne.n	8003db0 <I2C_Master_ADDR+0x278>
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d86:	d00b      	beq.n	8003da0 <I2C_Master_ADDR+0x268>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d008      	beq.n	8003da0 <I2C_Master_ADDR+0x268>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d005      	beq.n	8003da0 <I2C_Master_ADDR+0x268>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d002      	beq.n	8003da0 <I2C_Master_ADDR+0x268>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d107      	bne.n	8003db0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e032      	b.n	8003e2e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de6:	d117      	bne.n	8003e18 <I2C_Master_ADDR+0x2e0>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dee:	d00b      	beq.n	8003e08 <I2C_Master_ADDR+0x2d0>
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d008      	beq.n	8003e08 <I2C_Master_ADDR+0x2d0>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d005      	beq.n	8003e08 <I2C_Master_ADDR+0x2d0>
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d002      	beq.n	8003e08 <I2C_Master_ADDR+0x2d0>
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d107      	bne.n	8003e18 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e16:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e34:	e00b      	b.n	8003e4e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	e7ff      	b.n	8003e4e <I2C_Master_ADDR+0x316>
 8003e4e:	bf00      	nop
 8003e50:	3744      	adds	r7, #68	; 0x44
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02b      	beq.n	8003ecc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d114      	bne.n	8003ecc <I2C_SlaveTransmit_TXE+0x72>
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b29      	cmp	r3, #41	; 0x29
 8003ea6:	d111      	bne.n	8003ecc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2221      	movs	r2, #33	; 0x21
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2228      	movs	r2, #40	; 0x28
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff f9e7 	bl	800329a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d02c      	beq.n	8003f8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d114      	bne.n	8003f8a <I2C_SlaveReceive_RXNE+0x74>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b2a      	cmp	r3, #42	; 0x2a
 8003f64:	d111      	bne.n	8003f8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2222      	movs	r2, #34	; 0x22
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2228      	movs	r2, #40	; 0x28
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff f992 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff0:	2b28      	cmp	r3, #40	; 0x28
 8003ff2:	d125      	bne.n	8004040 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	81bb      	strh	r3, [r7, #12]
 8004022:	e002      	b.n	800402a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004032:	89ba      	ldrh	r2, [r7, #12]
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff f942 	bl	80032c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800403e:	e00e      	b.n	800405e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004086:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004088:	2300      	movs	r3, #0
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c4:	d172      	bne.n	80041ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	d002      	beq.n	80040d2 <I2C_Slave_STOPF+0x6a>
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b2a      	cmp	r3, #42	; 0x2a
 80040d0:	d135      	bne.n	800413e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe f95e 	bl	80023cc <HAL_DMA_GetState>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d049      	beq.n	80041aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <I2C_Slave_STOPF+0x258>)
 800411c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd ffa6 	bl	8002074 <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03d      	beq.n	80041aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800413c:	e035      	b.n	80041aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0204 	orr.w	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004170:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe f928 	bl	80023cc <HAL_DMA_GetState>
 800417c:	4603      	mov	r3, r0
 800417e:	2b01      	cmp	r3, #1
 8004180:	d014      	beq.n	80041ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	4a4e      	ldr	r2, [pc, #312]	; (80042c0 <I2C_Slave_STOPF+0x258>)
 8004188:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd ff70 	bl	8002074 <HAL_DMA_Abort_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a4:	4610      	mov	r0, r2
 80041a6:	4798      	blx	r3
 80041a8:	e000      	b.n	80041ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d03e      	beq.n	8004234 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d112      	bne.n	80041ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d112      	bne.n	800421e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f843 	bl	80042c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004242:	e039      	b.n	80042b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b2a      	cmp	r3, #42	; 0x2a
 8004248:	d109      	bne.n	800425e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2228      	movs	r2, #40	; 0x28
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff f828 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b28      	cmp	r3, #40	; 0x28
 8004268:	d111      	bne.n	800428e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <I2C_Slave_STOPF+0x25c>)
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff f829 	bl	80032de <HAL_I2C_ListenCpltCallback>
}
 800428c:	e014      	b.n	80042b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	2b22      	cmp	r3, #34	; 0x22
 8004294:	d002      	beq.n	800429c <I2C_Slave_STOPF+0x234>
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b22      	cmp	r3, #34	; 0x22
 800429a:	d10d      	bne.n	80042b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fe fffb 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08004855 	.word	0x08004855
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042e0:	7bbb      	ldrb	r3, [r7, #14]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d002      	beq.n	80042ec <I2C_ITError+0x24>
 80042e6:	7bbb      	ldrb	r3, [r7, #14]
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	d10a      	bne.n	8004302 <I2C_ITError+0x3a>
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b22      	cmp	r3, #34	; 0x22
 80042f0:	d107      	bne.n	8004302 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004300:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004308:	2b28      	cmp	r3, #40	; 0x28
 800430a:	d107      	bne.n	800431c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2228      	movs	r2, #40	; 0x28
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800431a:	e015      	b.n	8004348 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432a:	d00a      	beq.n	8004342 <I2C_ITError+0x7a>
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b60      	cmp	r3, #96	; 0x60
 8004330:	d007      	beq.n	8004342 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004356:	d162      	bne.n	800441e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004366:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d020      	beq.n	80043b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	4a6a      	ldr	r2, [pc, #424]	; (8004524 <I2C_ITError+0x25c>)
 800437c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd fe76 	bl	8002074 <HAL_DMA_Abort_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8089 	beq.w	80044a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043b2:	4610      	mov	r0, r2
 80043b4:	4798      	blx	r3
 80043b6:	e074      	b.n	80044a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	4a59      	ldr	r2, [pc, #356]	; (8004524 <I2C_ITError+0x25c>)
 80043be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fe55 	bl	8002074 <HAL_DMA_Abort_IT>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d068      	beq.n	80044a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d10b      	bne.n	80043f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
 800441c:	e041      	b.n	80044a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b60      	cmp	r3, #96	; 0x60
 8004428:	d125      	bne.n	8004476 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d10b      	bne.n	800445e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fe ff5d 	bl	800332e <HAL_I2C_AbortCpltCallback>
 8004474:	e015      	b.n	80044a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d10b      	bne.n	800449c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fe ff3c 	bl	800331a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d113      	bne.n	800451c <I2C_ITError+0x254>
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b28      	cmp	r3, #40	; 0x28
 80044f8:	d110      	bne.n	800451c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <I2C_ITError+0x260>)
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fe fee1 	bl	80032de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08004855 	.word	0x08004855
 8004528:	ffff0000 	.word	0xffff0000

0800452c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d006      	beq.n	8004556 <I2C_MasterRequestWrite+0x2a>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d003      	beq.n	8004556 <I2C_MasterRequestWrite+0x2a>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004554:	d108      	bne.n	8004568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e00b      	b.n	8004580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b12      	cmp	r3, #18
 800456e:	d107      	bne.n	8004580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fa09 	bl	80049a4 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d103      	bne.n	80045b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e035      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045bc:	d108      	bne.n	80045d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e01b      	b.n	8004608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045d0:	897b      	ldrh	r3, [r7, #10]
 80045d2:	11db      	asrs	r3, r3, #7
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f063 030f 	orn	r3, r3, #15
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	490e      	ldr	r1, [pc, #56]	; (8004628 <I2C_MasterRequestWrite+0xfc>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fa2f 	bl	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e010      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <I2C_MasterRequestWrite+0x100>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa1f 	bl	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	00010008 	.word	0x00010008
 800462c:	00010002 	.word	0x00010002

08004630 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004662:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2200      	movs	r2, #0
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d007      	beq.n	800469e <I2C_DMAXferCplt+0x6e>
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004694:	2b22      	cmp	r3, #34	; 0x22
 8004696:	d131      	bne.n	80046fc <I2C_DMAXferCplt+0xcc>
 8004698:	7cbb      	ldrb	r3, [r7, #18]
 800469a:	2b20      	cmp	r3, #32
 800469c:	d12e      	bne.n	80046fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b29      	cmp	r3, #41	; 0x29
 80046b8:	d10a      	bne.n	80046d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2221      	movs	r2, #33	; 0x21
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2228      	movs	r2, #40	; 0x28
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	f7fe fde6 	bl	800329a <HAL_I2C_SlaveTxCpltCallback>
 80046ce:	e00c      	b.n	80046ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b2a      	cmp	r3, #42	; 0x2a
 80046d4:	d109      	bne.n	80046ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2222      	movs	r2, #34	; 0x22
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2228      	movs	r2, #40	; 0x28
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	f7fe fde2 	bl	80032ae <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80046f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046fa:	e06a      	b.n	80047d2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d064      	beq.n	80047d2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004720:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004730:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004738:	d009      	beq.n	800474e <I2C_DMAXferCplt+0x11e>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d006      	beq.n	800474e <I2C_DMAXferCplt+0x11e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004746:	d002      	beq.n	800474e <I2C_DMAXferCplt+0x11e>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b20      	cmp	r3, #32
 800474c:	d107      	bne.n	800475e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7fe fdc4 	bl	800331a <HAL_I2C_ErrorCallback>
}
 8004792:	e01e      	b.n	80047d2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d10a      	bne.n	80047be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7fe fda5 	bl	8003306 <HAL_I2C_MemRxCpltCallback>
}
 80047bc:	e009      	b.n	80047d2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2212      	movs	r2, #18
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7fc fbef 	bl	8000fb0 <HAL_I2C_MasterRxCpltCallback>
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	2200      	movs	r2, #0
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	2200      	movs	r2, #0
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fd fded 	bl	80023e8 <HAL_DMA_GetError>
 800480e:	4603      	mov	r3, r0
 8004810:	2b02      	cmp	r3, #2
 8004812:	d01b      	beq.n	800484c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7fe fd67 	bl	800331a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800486e:	4b4b      	ldr	r3, [pc, #300]	; (800499c <I2C_DMAAbort+0x148>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <I2C_DMAAbort+0x14c>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0a1a      	lsrs	r2, r3, #8
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00da      	lsls	r2, r3, #3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800489a:	e00a      	b.n	80048b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3b01      	subs	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b0:	d0ea      	beq.n	8004888 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	2200      	movs	r2, #0
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	2200      	movs	r2, #0
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	2200      	movs	r2, #0
 80048f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	2200      	movs	r2, #0
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d10e      	bne.n	8004942 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f7fe fcf7 	bl	800332e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004940:	e027      	b.n	8004992 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004948:	2b28      	cmp	r3, #40	; 0x28
 800494a:	d117      	bne.n	800497c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800496a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2228      	movs	r2, #40	; 0x28
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800497a:	e007      	b.n	800498c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7fe fcc4 	bl	800331a <HAL_I2C_ErrorCallback>
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c
 80049a0:	14f8b589 	.word	0x14f8b589

080049a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b4:	e025      	b.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d021      	beq.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fd f8c5 	bl	8001b4c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e023      	b.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10d      	bne.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	e00c      	b.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d0b6      	beq.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a60:	e051      	b.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d123      	bne.n	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e046      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d021      	beq.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd f843 	bl	8001b4c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d116      	bne.n	8004b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e020      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10c      	bne.n	8004b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	43da      	mvns	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e00b      	b.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	43da      	mvns	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d18d      	bne.n	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5c:	e02d      	b.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8aa 	bl	8004cb8 <I2C_IsAcknowledgeFailed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d021      	beq.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b76:	f7fc ffe9 	bl	8001b4c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d116      	bne.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d1ca      	bne.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f869 	bl	8004cb8 <I2C_IsAcknowledgeFailed>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e02d      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d021      	beq.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fc ffa8 	bl	8001b4c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e007      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d1ca      	bne.n	8004be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	0a1a      	lsrs	r2, r3, #8
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e008      	b.n	8004ca4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d0e9      	beq.n	8004c76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	2000000c 	.word	0x2000000c
 8004cb4:	14f8b589 	.word	0x14f8b589

08004cb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cce:	d11b      	bne.n	8004d08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0204 	orr.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d26:	d103      	bne.n	8004d30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d2e:	e007      	b.n	8004d40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d38:	d102      	bne.n	8004d40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e267      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d075      	beq.n	8004e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6a:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d112      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d82:	4b82      	ldr	r3, [pc, #520]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	4b7e      	ldr	r3, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05b      	beq.n	8004e54 <HAL_RCC_OscConfig+0x108>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d157      	bne.n	8004e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e242      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x74>
 8004db2:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a75      	ldr	r2, [pc, #468]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x98>
 8004dca:	4b70      	ldr	r3, [pc, #448]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6f      	ldr	r2, [pc, #444]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6c      	ldr	r2, [pc, #432]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xb0>
 8004de4:	4b69      	ldr	r3, [pc, #420]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a68      	ldr	r2, [pc, #416]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a65      	ldr	r2, [pc, #404]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fc fea2 	bl	8001b4c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fc fe9e 	bl	8001b4c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e207      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xc0>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fe8e 	bl	8001b4c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fc fe8a 	bl	8001b4c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1f3      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	4b51      	ldr	r3, [pc, #324]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0xe8>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7a:	4b44      	ldr	r3, [pc, #272]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1c7      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4937      	ldr	r1, [pc, #220]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	e03a      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	4b34      	ldr	r3, [pc, #208]	; (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fc fe43 	bl	8001b4c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fc fe3f 	bl	8001b4c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1a8      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4925      	ldr	r1, [pc, #148]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	e015      	b.n	8004f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_RCC_OscConfig+0x244>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fc fe22 	bl	8001b4c <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7fc fe1e 	bl	8001b4c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e187      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d036      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fc fe02 	bl	8001b4c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fdfe 	bl	8001b4c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e167      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCC_OscConfig+0x240>)
 8004f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x200>
 8004f6a:	e01b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_OscConfig+0x248>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f72:	f7fc fdeb 	bl	8001b4c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	e00e      	b.n	8004f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fc fde7 	bl	8001b4c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d907      	bls.n	8004f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e150      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	42470000 	.word	0x42470000
 8004f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f98:	4b88      	ldr	r3, [pc, #544]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ea      	bne.n	8004f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8097 	beq.w	80050e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb6:	4b81      	ldr	r3, [pc, #516]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	4b7d      	ldr	r3, [pc, #500]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a7c      	ldr	r2, [pc, #496]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd2:	4b7a      	ldr	r3, [pc, #488]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe2:	4b77      	ldr	r3, [pc, #476]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d118      	bne.n	8005020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fee:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a73      	ldr	r2, [pc, #460]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffa:	f7fc fda7 	bl	8001b4c <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005002:	f7fc fda3 	bl	8001b4c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e10c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_OscConfig+0x474>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x2ea>
 8005028:	4b64      	ldr	r3, [pc, #400]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a63      	ldr	r2, [pc, #396]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
 8005034:	e01c      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x30c>
 800503e:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a5e      	ldr	r2, [pc, #376]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	4b5c      	ldr	r3, [pc, #368]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a5b      	ldr	r2, [pc, #364]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0x324>
 8005058:	4b58      	ldr	r3, [pc, #352]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4a57      	ldr	r2, [pc, #348]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	; 0x70
 8005064:	4b55      	ldr	r3, [pc, #340]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a54      	ldr	r2, [pc, #336]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fc fd68 	bl	8001b4c <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fc fd64 	bl	8001b4c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0cb      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ee      	beq.n	8005080 <HAL_RCC_OscConfig+0x334>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a4:	f7fc fd52 	bl	8001b4c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fc fd4e 	bl	8001b4c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0b5      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ee      	bne.n	80050ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80a1 	beq.w	800522c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d05c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d141      	bne.n	8005182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005104:	f7fc fd22 	bl	8001b4c <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fc fd1e 	bl	8001b4c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e087      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	491b      	ldr	r1, [pc, #108]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515a:	f7fc fcf7 	bl	8001b4c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005162:	f7fc fcf3 	bl	8001b4c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e05c      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x416>
 8005180:	e054      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_OscConfig+0x478>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fc fce0 	bl	8001b4c <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005190:	f7fc fcdc 	bl	8001b4c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e045      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <HAL_RCC_OscConfig+0x470>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x444>
 80051ae:	e03d      	b.n	800522c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e038      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40007000 	.word	0x40007000
 80051c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d028      	beq.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	4293      	cmp	r3, r2
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0cc      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b68      	ldr	r3, [pc, #416]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90c      	bls.n	8005278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b65      	ldr	r3, [pc, #404]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800529a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d044      	beq.n	800535c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d119      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b3f      	ldr	r3, [pc, #252]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e06f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530a:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e067      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531a:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0203 	bic.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4934      	ldr	r1, [pc, #208]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800532c:	f7fc fc0e 	bl	8001b4c <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fc fc0a 	bl	8001b4c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e04f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 020c 	and.w	r2, r3, #12
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	429a      	cmp	r2, r3
 800535a:	d1eb      	bne.n	8005334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d20c      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 f821 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fb6e 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023c00 	.word	0x40023c00
 80053f8:	40023800 	.word	0x40023800
 80053fc:	08009f98 	.word	0x08009f98
 8005400:	2000000c 	.word	0x2000000c
 8005404:	20000010 	.word	0x20000010

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b094      	sub	sp, #80	; 0x50
 800540e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	647b      	str	r3, [r7, #68]	; 0x44
 8005414:	2300      	movs	r3, #0
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005418:	2300      	movs	r3, #0
 800541a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005420:	4b79      	ldr	r3, [pc, #484]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d00d      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x40>
 800542c:	2b08      	cmp	r3, #8
 800542e:	f200 80e1 	bhi.w	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x34>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x3a>
 800543a:	e0db      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005440:	e0db      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005442:	4b73      	ldr	r3, [pc, #460]	; (8005610 <HAL_RCC_GetSysClockFreq+0x208>)
 8005444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005446:	e0d8      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005452:	4b6d      	ldr	r3, [pc, #436]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d063      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545e:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	099b      	lsrs	r3, r3, #6
 8005464:	2200      	movs	r2, #0
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
 8005468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800547a:	4622      	mov	r2, r4
 800547c:	462b      	mov	r3, r5
 800547e:	f04f 0000 	mov.w	r0, #0
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	0159      	lsls	r1, r3, #5
 8005488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548c:	0150      	lsls	r0, r2, #5
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4621      	mov	r1, r4
 8005494:	1a51      	subs	r1, r2, r1
 8005496:	6139      	str	r1, [r7, #16]
 8005498:	4629      	mov	r1, r5
 800549a:	eb63 0301 	sbc.w	r3, r3, r1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ac:	4659      	mov	r1, fp
 80054ae:	018b      	lsls	r3, r1, #6
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054b6:	4651      	mov	r1, sl
 80054b8:	018a      	lsls	r2, r1, #6
 80054ba:	4651      	mov	r1, sl
 80054bc:	ebb2 0801 	subs.w	r8, r2, r1
 80054c0:	4659      	mov	r1, fp
 80054c2:	eb63 0901 	sbc.w	r9, r3, r1
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054da:	4690      	mov	r8, r2
 80054dc:	4699      	mov	r9, r3
 80054de:	4623      	mov	r3, r4
 80054e0:	eb18 0303 	adds.w	r3, r8, r3
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	462b      	mov	r3, r5
 80054e8:	eb49 0303 	adc.w	r3, r9, r3
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054fa:	4629      	mov	r1, r5
 80054fc:	024b      	lsls	r3, r1, #9
 80054fe:	4621      	mov	r1, r4
 8005500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005504:	4621      	mov	r1, r4
 8005506:	024a      	lsls	r2, r1, #9
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550e:	2200      	movs	r2, #0
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
 8005512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005518:	f7fb fb9e 	bl	8000c58 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4613      	mov	r3, r2
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	e058      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b38      	ldr	r3, [pc, #224]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	2200      	movs	r2, #0
 800552e:	4618      	mov	r0, r3
 8005530:	4611      	mov	r1, r2
 8005532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
 800553c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005552:	0150      	lsls	r0, r2, #5
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4641      	mov	r1, r8
 800555a:	ebb2 0a01 	subs.w	sl, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb63 0b01 	sbc.w	fp, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005578:	ebb2 040a 	subs.w	r4, r2, sl
 800557c:	eb63 050b 	sbc.w	r5, r3, fp
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	00eb      	lsls	r3, r5, #3
 800558a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558e:	00e2      	lsls	r2, r4, #3
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	4643      	mov	r3, r8
 8005596:	18e3      	adds	r3, r4, r3
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	464b      	mov	r3, r9
 800559c:	eb45 0303 	adc.w	r3, r5, r3
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ae:	4629      	mov	r1, r5
 80055b0:	028b      	lsls	r3, r1, #10
 80055b2:	4621      	mov	r1, r4
 80055b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055b8:	4621      	mov	r1, r4
 80055ba:	028a      	lsls	r2, r1, #10
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c2:	2200      	movs	r2, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055cc:	f7fb fb44 	bl	8000c58 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f2:	e002      	b.n	80055fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetSysClockFreq+0x204>)
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3750      	adds	r7, #80	; 0x50
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	2000000c 	.word	0x2000000c

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	08009fa8 	.word	0x08009fa8

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009fa8 	.word	0x08009fa8

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e041      	b.n	8005712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fb ffe6 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fa88 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d001      	beq.n	8005734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e044      	b.n	80057be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d013      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x6c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <HAL_TIM_Base_Start_IT+0xc0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d111      	bne.n	80057ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d010      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	e007      	b.n	80057bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9b5 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9a7 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9b8 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0204 	mvn.w	r2, #4
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f98b 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f97d 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f98e 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0208 	mvn.w	r2, #8
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f961 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f953 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f964 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2208      	movs	r2, #8
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f937 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f929 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f93a 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0201 	mvn.w	r2, #1
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb faf8 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fab2 	bl	8005ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8ff 	bl	8005bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0220 	mvn.w	r2, #32
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa7c 	bl	8005ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_ConfigClockSource+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0b4      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x186>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a44:	d03e      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	f200 8087 	bhi.w	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_TIM_ConfigClockSource+0x172>
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d87f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d01a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xa6>
 8005a60:	2b70      	cmp	r3, #112	; 0x70
 8005a62:	d87b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d050      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x11a>
 8005a68:	2b60      	cmp	r3, #96	; 0x60
 8005a6a:	d877      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d03c      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xfa>
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d873      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d058      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x13a>
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d86f      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d064      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b30      	cmp	r3, #48	; 0x30
 8005a82:	d86b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d060      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d867      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d05a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	e062      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f000 f98d 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	609a      	str	r2, [r3, #8]
      break;
 8005ac2:	e04f      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f000 f976 	bl	8005dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae6:	609a      	str	r2, [r3, #8]
      break;
 8005ae8:	e03c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 f8ea 	bl	8005cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2150      	movs	r1, #80	; 0x50
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f943 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005b08:	e02c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 f909 	bl	8005d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2160      	movs	r1, #96	; 0x60
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f933 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005b28:	e01c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 f8ca 	bl	8005cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2140      	movs	r1, #64	; 0x40
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f923 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005b48:	e00c      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f000 f91a 	bl	8005d8e <TIM_ITRx_SetConfig>
      break;
 8005b5a:	e003      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e000      	b.n	8005b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <TIM_Base_SetConfig+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a30      	ldr	r2, [pc, #192]	; (8005cbc <TIM_Base_SetConfig+0xec>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <TIM_Base_SetConfig+0xf0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <TIM_Base_SetConfig+0xe8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <TIM_Base_SetConfig+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <TIM_Base_SetConfig+0xf0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <TIM_Base_SetConfig+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <TIM_Base_SetConfig+0xf8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <TIM_Base_SetConfig+0xfc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <TIM_Base_SetConfig+0xe4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d103      	bne.n	8005ca0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	615a      	str	r2, [r3, #20]
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800

08005cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0201 	bic.w	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 030a 	bic.w	r3, r3, #10
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b087      	sub	sp, #28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f023 0210 	bic.w	r2, r3, #16
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	031b      	lsls	r3, r3, #12
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f043 0307 	orr.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e050      	b.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d013      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10c      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000

08005ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e03f      	b.n	8005f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fbc6 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fed1 	bl	8006cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08a      	sub	sp, #40	; 0x28
 8005fa6:	af02      	add	r7, sp, #8
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d17c      	bne.n	80060bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_UART_Transmit+0x2c>
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e075      	b.n	80060be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_UART_Transmit+0x3e>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e06e      	b.n	80060be <HAL_UART_Transmit+0x11c>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2221      	movs	r2, #33	; 0x21
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff6:	f7fb fda9 	bl	8001b4c <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d108      	bne.n	8006024 <HAL_UART_Transmit+0x82>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e003      	b.n	800602c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006034:	e02a      	b.n	800608c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fc26 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e036      	b.n	80060be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	3302      	adds	r3, #2
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e007      	b.n	800607e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	781a      	ldrb	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1cf      	bne.n	8006036 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2140      	movs	r1, #64	; 0x40
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fbf6 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e006      	b.n	80060be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e000      	b.n	80060be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08c      	sub	sp, #48	; 0x30
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d165      	bne.n	80061ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_UART_Transmit_DMA+0x26>
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e05e      	b.n	80061b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_UART_Transmit_DMA+0x38>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e057      	b.n	80061b0 <HAL_UART_Transmit_DMA+0xe8>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	88fa      	ldrh	r2, [r7, #6]
 8006112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2221      	movs	r2, #33	; 0x21
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <HAL_UART_Transmit_DMA+0xf0>)
 800612e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	4a21      	ldr	r2, [pc, #132]	; (80061bc <HAL_UART_Transmit_DMA+0xf4>)
 8006136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613c:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <HAL_UART_Transmit_DMA+0xf8>)
 800613e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	2200      	movs	r2, #0
 8006146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006148:	f107 0308 	add.w	r3, r7, #8
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3304      	adds	r3, #4
 800615c:	461a      	mov	r2, r3
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	f7fb fec0 	bl	8001ee4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	617b      	str	r3, [r7, #20]
   return(result);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006196:	627a      	str	r2, [r7, #36]	; 0x24
 8006198:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6a39      	ldr	r1, [r7, #32]
 800619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e000      	b.n	80061b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80061ae:	2302      	movs	r3, #2
  }
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3730      	adds	r7, #48	; 0x30
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08006749 	.word	0x08006749
 80061bc:	080067e3 	.word	0x080067e3
 80061c0:	080067ff 	.word	0x080067ff

080061c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b0ba      	sub	sp, #232	; 0xe8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10f      	bne.n	800622a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_UART_IRQHandler+0x66>
 8006216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fcaa 	bl	8006b7c <UART_Receive_IT>
      return;
 8006228:	e256      	b.n	80066d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800622a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80de 	beq.w	80063f0 <HAL_UART_IRQHandler+0x22c>
 8006234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80d1 	beq.w	80063f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <HAL_UART_IRQHandler+0xae>
 800625a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f043 0201 	orr.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <HAL_UART_IRQHandler+0xd2>
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f043 0202 	orr.w	r2, r3, #2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_UART_IRQHandler+0xf6>
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f043 0204 	orr.w	r2, r3, #4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d011      	beq.n	80062ea <HAL_UART_IRQHandler+0x126>
 80062c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f043 0208 	orr.w	r2, r3, #8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 81ed 	beq.w	80066ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <HAL_UART_IRQHandler+0x14e>
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc35 	bl	8006b7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d103      	bne.n	800633e <HAL_UART_IRQHandler+0x17a>
 8006336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04f      	beq.n	80063de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb3d 	bl	80069be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d141      	bne.n	80063d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3314      	adds	r3, #20
 8006358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800637e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800638a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d9      	bne.n	8006352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d013      	beq.n	80063ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	4a7d      	ldr	r2, [pc, #500]	; (80065a0 <HAL_UART_IRQHandler+0x3dc>)
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb fe5e 	bl	8002074 <HAL_DMA_Abort_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e00e      	b.n	80063ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9a4 	bl	800671c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	e00a      	b.n	80063ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9a0 	bl	800671c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	e006      	b.n	80063ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f99c 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063ea:	e170      	b.n	80066ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	bf00      	nop
    return;
 80063ee:	e16e      	b.n	80066ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f040 814a 	bne.w	800668e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8143 	beq.w	800668e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 813c 	beq.w	800668e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	f040 80b4 	bne.w	80065a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8140 	beq.w	80066d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800645a:	429a      	cmp	r2, r3
 800645c:	f080 8139 	bcs.w	80066d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	f000 8088 	beq.w	8006586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800648c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1d9      	bne.n	8006476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e1      	bne.n	80064c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800650e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e3      	bne.n	80064fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	f023 0310 	bic.w	r3, r3, #16
 800655a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006568:	65ba      	str	r2, [r7, #88]	; 0x58
 800656a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800656e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e3      	bne.n	8006544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	4618      	mov	r0, r3
 8006582:	f7fb fd07 	bl	8001f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800658e:	b29b      	uxth	r3, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	b29b      	uxth	r3, r3
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8ca 	bl	8006730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800659c:	e099      	b.n	80066d2 <HAL_UART_IRQHandler+0x50e>
 800659e:	bf00      	nop
 80065a0:	08006a85 	.word	0x08006a85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808b 	beq.w	80066d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8086 	beq.w	80066d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	330c      	adds	r3, #12
 80065d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065ee:	647a      	str	r2, [r7, #68]	; 0x44
 80065f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	623b      	str	r3, [r7, #32]
   return(result);
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3314      	adds	r3, #20
 8006622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006626:	633a      	str	r2, [r7, #48]	; 0x30
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800662c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e3      	bne.n	8006602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60fb      	str	r3, [r7, #12]
   return(result);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800666c:	61fa      	str	r2, [r7, #28]
 800666e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	617b      	str	r3, [r7, #20]
   return(result);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e3      	bne.n	8006648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f852 	bl	8006730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800668c:	e023      	b.n	80066d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <HAL_UART_IRQHandler+0x4ea>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa00 	bl	8006aac <UART_Transmit_IT>
    return;
 80066ac:	e014      	b.n	80066d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <HAL_UART_IRQHandler+0x514>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa40 	bl	8006b4c <UART_EndTransmit_IT>
    return;
 80066cc:	e004      	b.n	80066d8 <HAL_UART_IRQHandler+0x514>
    return;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <HAL_UART_IRQHandler+0x514>
      return;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_UART_IRQHandler+0x514>
      return;
 80066d6:	bf00      	nop
  }
}
 80066d8:	37e8      	adds	r7, #232	; 0xe8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop

080066e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d137      	bne.n	80067d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006766:	2200      	movs	r2, #0
 8006768:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800676a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3314      	adds	r3, #20
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	623b      	str	r3, [r7, #32]
   return(result);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006780:	63bb      	str	r3, [r7, #56]	; 0x38
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800678a:	633a      	str	r2, [r7, #48]	; 0x30
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e5      	bne.n	800676a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	617b      	str	r3, [r7, #20]
   return(result);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067d2:	e002      	b.n	80067da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80067d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067d6:	f7ff ff83 	bl	80066e0 <HAL_UART_TxCpltCallback>
}
 80067da:	bf00      	nop
 80067dc:	3740      	adds	r7, #64	; 0x40
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff ff7f 	bl	80066f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b21      	cmp	r3, #33	; 0x21
 8006830:	d108      	bne.n	8006844 <UART_DMAError+0x46>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2200      	movs	r2, #0
 800683c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	f000 f895 	bl	800696e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b22      	cmp	r3, #34	; 0x22
 8006864:	d108      	bne.n	8006878 <UART_DMAError+0x7a>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 f8a3 	bl	80069be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	f043 0210 	orr.w	r2, r3, #16
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006884:	68b8      	ldr	r0, [r7, #8]
 8006886:	f7ff ff49 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b090      	sub	sp, #64	; 0x40
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	e050      	b.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d04c      	beq.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b2:	f7fb f94b 	bl	8001b4c <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068be:	429a      	cmp	r2, r3
 80068c0:	d241      	bcs.n	8006946 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068e2:	637a      	str	r2, [r7, #52]	; 0x34
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e5      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3314      	adds	r3, #20
 80068fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	613b      	str	r3, [r7, #16]
   return(result);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3314      	adds	r3, #20
 8006914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006916:	623a      	str	r2, [r7, #32]
 8006918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	69f9      	ldr	r1, [r7, #28]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	61bb      	str	r3, [r7, #24]
   return(result);
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e00f      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d09f      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3740      	adds	r7, #64	; 0x40
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800696e:	b480      	push	{r7}
 8006970:	b089      	sub	sp, #36	; 0x24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	60bb      	str	r3, [r7, #8]
   return(result);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	61ba      	str	r2, [r7, #24]
 8006998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	613b      	str	r3, [r7, #16]
   return(result);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e5      	bne.n	8006976 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069b2:	bf00      	nop
 80069b4:	3724      	adds	r7, #36	; 0x24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069be:	b480      	push	{r7}
 80069c0:	b095      	sub	sp, #84	; 0x54
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e6:	643a      	str	r2, [r7, #64]	; 0x40
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3314      	adds	r3, #20
 8006a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d119      	bne.n	8006a6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0310 	bic.w	r3, r3, #16
 8006a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a56:	61ba      	str	r2, [r7, #24]
 8006a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a78:	bf00      	nop
 8006a7a:	3754      	adds	r7, #84	; 0x54
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fe3c 	bl	800671c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b21      	cmp	r3, #33	; 0x21
 8006abe:	d13e      	bne.n	8006b3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d114      	bne.n	8006af4 <UART_Transmit_IT+0x48>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d110      	bne.n	8006af4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]
 8006af2:	e008      	b.n	8006b06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6211      	str	r1, [r2, #32]
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4619      	mov	r1, r3
 8006b14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10f      	bne.n	8006b3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e000      	b.n	8006b40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b3e:	2302      	movs	r3, #2
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fdb7 	bl	80066e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	; 0x30
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b22      	cmp	r3, #34	; 0x22
 8006b8e:	f040 80ab 	bne.w	8006ce8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9a:	d117      	bne.n	8006bcc <UART_Receive_IT+0x50>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d113      	bne.n	8006bcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	1c9a      	adds	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
 8006bca:	e026      	b.n	8006c1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d007      	beq.n	8006bf0 <UART_Receive_IT+0x74>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <UART_Receive_IT+0x82>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d106      	bne.n	8006bfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	e008      	b.n	8006c10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d15a      	bne.n	8006ce4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0220 	bic.w	r2, r2, #32
 8006c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d135      	bne.n	8006cda <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	613b      	str	r3, [r7, #16]
   return(result);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	623a      	str	r2, [r7, #32]
 8006c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	69f9      	ldr	r1, [r7, #28]
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d10a      	bne.n	8006ccc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fd2c 	bl	8006730 <HAL_UARTEx_RxEventCallback>
 8006cd8:	e002      	b.n	8006ce0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fd14 	bl	8006708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e002      	b.n	8006cea <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ce8:	2302      	movs	r3, #2
  }
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3730      	adds	r7, #48	; 0x30
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b0c0      	sub	sp, #256	; 0x100
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	68d9      	ldr	r1, [r3, #12]
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	ea40 0301 	orr.w	r3, r0, r1
 8006d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d4c:	f021 010c 	bic.w	r1, r1, #12
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	6999      	ldr	r1, [r3, #24]
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	ea40 0301 	orr.w	r3, r0, r1
 8006d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b8f      	ldr	r3, [pc, #572]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d005      	beq.n	8006d94 <UART_SetConfig+0xa0>
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b8d      	ldr	r3, [pc, #564]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d104      	bne.n	8006d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fe fc5e 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8006d98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d9c:	e003      	b.n	8006da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7fe fc45 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8006da2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db0:	f040 810c 	bne.w	8006fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	1891      	adds	r1, r2, r2
 8006dcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dce:	415b      	adcs	r3, r3
 8006dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	eb12 0801 	adds.w	r8, r2, r1
 8006ddc:	4629      	mov	r1, r5
 8006dde:	eb43 0901 	adc.w	r9, r3, r1
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	eb18 0303 	adds.w	r3, r8, r3
 8006e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e04:	462b      	mov	r3, r5
 8006e06:	eb49 0303 	adc.w	r3, r9, r3
 8006e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e22:	460b      	mov	r3, r1
 8006e24:	18db      	adds	r3, r3, r3
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
 8006e28:	4613      	mov	r3, r2
 8006e2a:	eb42 0303 	adc.w	r3, r2, r3
 8006e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e38:	f7f9 ff0e 	bl	8000c58 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4b61      	ldr	r3, [pc, #388]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006e42:	fba3 2302 	umull	r2, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	011c      	lsls	r4, r3, #4
 8006e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e64:	415b      	adcs	r3, r3
 8006e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e72:	4649      	mov	r1, r9
 8006e74:	eb43 0b01 	adc.w	fp, r3, r1
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8c:	4692      	mov	sl, r2
 8006e8e:	469b      	mov	fp, r3
 8006e90:	4643      	mov	r3, r8
 8006e92:	eb1a 0303 	adds.w	r3, sl, r3
 8006e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	18db      	adds	r3, r3, r3
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ece:	f7f9 fec3 	bl	8000c58 <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4b3b      	ldr	r3, [pc, #236]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006eda:	fba3 2301 	umull	r2, r3, r3, r1
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	2264      	movs	r2, #100	; 0x64
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	1acb      	subs	r3, r1, r3
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006eee:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006efc:	441c      	add	r4, r3
 8006efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f20:	4641      	mov	r1, r8
 8006f22:	1851      	adds	r1, r2, r1
 8006f24:	6339      	str	r1, [r7, #48]	; 0x30
 8006f26:	4649      	mov	r1, r9
 8006f28:	414b      	adcs	r3, r1
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f38:	4659      	mov	r1, fp
 8006f3a:	00cb      	lsls	r3, r1, #3
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f42:	4651      	mov	r1, sl
 8006f44:	00ca      	lsls	r2, r1, #3
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f54:	464b      	mov	r3, r9
 8006f56:	460a      	mov	r2, r1
 8006f58:	eb42 0303 	adc.w	r3, r2, r3
 8006f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f74:	460b      	mov	r3, r1
 8006f76:	18db      	adds	r3, r3, r3
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f8a:	f7f9 fe65 	bl	8000c58 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006f94:	fba3 1302 	umull	r1, r3, r3, r2
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	2164      	movs	r1, #100	; 0x64
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	3332      	adds	r3, #50	; 0x32
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f003 0207 	and.w	r2, r3, #7
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4422      	add	r2, r4
 8006fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fbc:	e106      	b.n	80071cc <UART_SetConfig+0x4d8>
 8006fbe:	bf00      	nop
 8006fc0:	40011000 	.word	0x40011000
 8006fc4:	40011400 	.word	0x40011400
 8006fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006fde:	4642      	mov	r2, r8
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	1891      	adds	r1, r2, r2
 8006fe4:	6239      	str	r1, [r7, #32]
 8006fe6:	415b      	adcs	r3, r3
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fee:	4641      	mov	r1, r8
 8006ff0:	1854      	adds	r4, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb43 0501 	adc.w	r5, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	00eb      	lsls	r3, r5, #3
 8007002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007006:	00e2      	lsls	r2, r4, #3
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	4643      	mov	r3, r8
 800700e:	18e3      	adds	r3, r4, r3
 8007010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007014:	464b      	mov	r3, r9
 8007016:	eb45 0303 	adc.w	r3, r5, r3
 800701a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800702a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800703a:	4629      	mov	r1, r5
 800703c:	008b      	lsls	r3, r1, #2
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007044:	4621      	mov	r1, r4
 8007046:	008a      	lsls	r2, r1, #2
 8007048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800704c:	f7f9 fe04 	bl	8000c58 <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4b60      	ldr	r3, [pc, #384]	; (80071d8 <UART_SetConfig+0x4e4>)
 8007056:	fba3 2302 	umull	r2, r3, r3, r2
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	011c      	lsls	r4, r3, #4
 800705e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800706c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	1891      	adds	r1, r2, r2
 8007076:	61b9      	str	r1, [r7, #24]
 8007078:	415b      	adcs	r3, r3
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007080:	4641      	mov	r1, r8
 8007082:	1851      	adds	r1, r2, r1
 8007084:	6139      	str	r1, [r7, #16]
 8007086:	4649      	mov	r1, r9
 8007088:	414b      	adcs	r3, r1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007098:	4659      	mov	r1, fp
 800709a:	00cb      	lsls	r3, r1, #3
 800709c:	4651      	mov	r1, sl
 800709e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070a2:	4651      	mov	r1, sl
 80070a4:	00ca      	lsls	r2, r1, #3
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	4642      	mov	r2, r8
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070b4:	464b      	mov	r3, r9
 80070b6:	460a      	mov	r2, r1
 80070b8:	eb42 0303 	adc.w	r3, r2, r3
 80070bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070d8:	4649      	mov	r1, r9
 80070da:	008b      	lsls	r3, r1, #2
 80070dc:	4641      	mov	r1, r8
 80070de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070e2:	4641      	mov	r1, r8
 80070e4:	008a      	lsls	r2, r1, #2
 80070e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070ea:	f7f9 fdb5 	bl	8000c58 <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	4b38      	ldr	r3, [pc, #224]	; (80071d8 <UART_SetConfig+0x4e4>)
 80070f6:	fba3 2301 	umull	r2, r3, r3, r1
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	2264      	movs	r2, #100	; 0x64
 80070fe:	fb02 f303 	mul.w	r3, r2, r3
 8007102:	1acb      	subs	r3, r1, r3
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	3332      	adds	r3, #50	; 0x32
 8007108:	4a33      	ldr	r2, [pc, #204]	; (80071d8 <UART_SetConfig+0x4e4>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007114:	441c      	add	r4, r3
 8007116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711a:	2200      	movs	r2, #0
 800711c:	673b      	str	r3, [r7, #112]	; 0x70
 800711e:	677a      	str	r2, [r7, #116]	; 0x74
 8007120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	1891      	adds	r1, r2, r2
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	415b      	adcs	r3, r3
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007134:	4641      	mov	r1, r8
 8007136:	1851      	adds	r1, r2, r1
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	4649      	mov	r1, r9
 800713c:	414b      	adcs	r3, r1
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800714c:	4659      	mov	r1, fp
 800714e:	00cb      	lsls	r3, r1, #3
 8007150:	4651      	mov	r1, sl
 8007152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007156:	4651      	mov	r1, sl
 8007158:	00ca      	lsls	r2, r1, #3
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	4603      	mov	r3, r0
 8007160:	4642      	mov	r2, r8
 8007162:	189b      	adds	r3, r3, r2
 8007164:	66bb      	str	r3, [r7, #104]	; 0x68
 8007166:	464b      	mov	r3, r9
 8007168:	460a      	mov	r2, r1
 800716a:	eb42 0303 	adc.w	r3, r2, r3
 800716e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	663b      	str	r3, [r7, #96]	; 0x60
 800717a:	667a      	str	r2, [r7, #100]	; 0x64
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007188:	4649      	mov	r1, r9
 800718a:	008b      	lsls	r3, r1, #2
 800718c:	4641      	mov	r1, r8
 800718e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007192:	4641      	mov	r1, r8
 8007194:	008a      	lsls	r2, r1, #2
 8007196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800719a:	f7f9 fd5d 	bl	8000c58 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <UART_SetConfig+0x4e4>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	; 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	3332      	adds	r3, #50	; 0x32
 80071b6:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <UART_SetConfig+0x4e4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4422      	add	r2, r4
 80071ca:	609a      	str	r2, [r3, #8]
}
 80071cc:	bf00      	nop
 80071ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071d8:	51eb851f 	.word	0x51eb851f

080071dc <__cvt>:
 80071dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	ec55 4b10 	vmov	r4, r5, d0
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	460e      	mov	r6, r1
 80071e8:	4619      	mov	r1, r3
 80071ea:	462b      	mov	r3, r5
 80071ec:	bfbb      	ittet	lt
 80071ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071f2:	461d      	movlt	r5, r3
 80071f4:	2300      	movge	r3, #0
 80071f6:	232d      	movlt	r3, #45	; 0x2d
 80071f8:	700b      	strb	r3, [r1, #0]
 80071fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007200:	4691      	mov	r9, r2
 8007202:	f023 0820 	bic.w	r8, r3, #32
 8007206:	bfbc      	itt	lt
 8007208:	4622      	movlt	r2, r4
 800720a:	4614      	movlt	r4, r2
 800720c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007210:	d005      	beq.n	800721e <__cvt+0x42>
 8007212:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007216:	d100      	bne.n	800721a <__cvt+0x3e>
 8007218:	3601      	adds	r6, #1
 800721a:	2102      	movs	r1, #2
 800721c:	e000      	b.n	8007220 <__cvt+0x44>
 800721e:	2103      	movs	r1, #3
 8007220:	ab03      	add	r3, sp, #12
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	ab02      	add	r3, sp, #8
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	ec45 4b10 	vmov	d0, r4, r5
 800722c:	4653      	mov	r3, sl
 800722e:	4632      	mov	r2, r6
 8007230:	f000 fe6a 	bl	8007f08 <_dtoa_r>
 8007234:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007238:	4607      	mov	r7, r0
 800723a:	d102      	bne.n	8007242 <__cvt+0x66>
 800723c:	f019 0f01 	tst.w	r9, #1
 8007240:	d022      	beq.n	8007288 <__cvt+0xac>
 8007242:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007246:	eb07 0906 	add.w	r9, r7, r6
 800724a:	d110      	bne.n	800726e <__cvt+0x92>
 800724c:	783b      	ldrb	r3, [r7, #0]
 800724e:	2b30      	cmp	r3, #48	; 0x30
 8007250:	d10a      	bne.n	8007268 <__cvt+0x8c>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800725e:	b918      	cbnz	r0, 8007268 <__cvt+0x8c>
 8007260:	f1c6 0601 	rsb	r6, r6, #1
 8007264:	f8ca 6000 	str.w	r6, [sl]
 8007268:	f8da 3000 	ldr.w	r3, [sl]
 800726c:	4499      	add	r9, r3
 800726e:	2200      	movs	r2, #0
 8007270:	2300      	movs	r3, #0
 8007272:	4620      	mov	r0, r4
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 fc2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800727a:	b108      	cbz	r0, 8007280 <__cvt+0xa4>
 800727c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007280:	2230      	movs	r2, #48	; 0x30
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	454b      	cmp	r3, r9
 8007286:	d307      	bcc.n	8007298 <__cvt+0xbc>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800728c:	1bdb      	subs	r3, r3, r7
 800728e:	4638      	mov	r0, r7
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	b004      	add	sp, #16
 8007294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	9103      	str	r1, [sp, #12]
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e7f0      	b.n	8007282 <__cvt+0xa6>

080072a0 <__exponent>:
 80072a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a2:	4603      	mov	r3, r0
 80072a4:	2900      	cmp	r1, #0
 80072a6:	bfb8      	it	lt
 80072a8:	4249      	neglt	r1, r1
 80072aa:	f803 2b02 	strb.w	r2, [r3], #2
 80072ae:	bfb4      	ite	lt
 80072b0:	222d      	movlt	r2, #45	; 0x2d
 80072b2:	222b      	movge	r2, #43	; 0x2b
 80072b4:	2909      	cmp	r1, #9
 80072b6:	7042      	strb	r2, [r0, #1]
 80072b8:	dd2a      	ble.n	8007310 <__exponent+0x70>
 80072ba:	f10d 0207 	add.w	r2, sp, #7
 80072be:	4617      	mov	r7, r2
 80072c0:	260a      	movs	r6, #10
 80072c2:	4694      	mov	ip, r2
 80072c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80072c8:	fb06 1415 	mls	r4, r6, r5, r1
 80072cc:	3430      	adds	r4, #48	; 0x30
 80072ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80072d2:	460c      	mov	r4, r1
 80072d4:	2c63      	cmp	r4, #99	; 0x63
 80072d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80072da:	4629      	mov	r1, r5
 80072dc:	dcf1      	bgt.n	80072c2 <__exponent+0x22>
 80072de:	3130      	adds	r1, #48	; 0x30
 80072e0:	f1ac 0402 	sub.w	r4, ip, #2
 80072e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072e8:	1c41      	adds	r1, r0, #1
 80072ea:	4622      	mov	r2, r4
 80072ec:	42ba      	cmp	r2, r7
 80072ee:	d30a      	bcc.n	8007306 <__exponent+0x66>
 80072f0:	f10d 0209 	add.w	r2, sp, #9
 80072f4:	eba2 020c 	sub.w	r2, r2, ip
 80072f8:	42bc      	cmp	r4, r7
 80072fa:	bf88      	it	hi
 80072fc:	2200      	movhi	r2, #0
 80072fe:	4413      	add	r3, r2
 8007300:	1a18      	subs	r0, r3, r0
 8007302:	b003      	add	sp, #12
 8007304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007306:	f812 5b01 	ldrb.w	r5, [r2], #1
 800730a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800730e:	e7ed      	b.n	80072ec <__exponent+0x4c>
 8007310:	2330      	movs	r3, #48	; 0x30
 8007312:	3130      	adds	r1, #48	; 0x30
 8007314:	7083      	strb	r3, [r0, #2]
 8007316:	70c1      	strb	r1, [r0, #3]
 8007318:	1d03      	adds	r3, r0, #4
 800731a:	e7f1      	b.n	8007300 <__exponent+0x60>

0800731c <_printf_float>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	ed2d 8b02 	vpush	{d8}
 8007324:	b08d      	sub	sp, #52	; 0x34
 8007326:	460c      	mov	r4, r1
 8007328:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800732c:	4616      	mov	r6, r2
 800732e:	461f      	mov	r7, r3
 8007330:	4605      	mov	r5, r0
 8007332:	f000 fce9 	bl	8007d08 <_localeconv_r>
 8007336:	f8d0 a000 	ldr.w	sl, [r0]
 800733a:	4650      	mov	r0, sl
 800733c:	f7f8 ffa0 	bl	8000280 <strlen>
 8007340:	2300      	movs	r3, #0
 8007342:	930a      	str	r3, [sp, #40]	; 0x28
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	f8d8 3000 	ldr.w	r3, [r8]
 800734c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007350:	3307      	adds	r3, #7
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	f103 0208 	add.w	r2, r3, #8
 800735a:	f8c8 2000 	str.w	r2, [r8]
 800735e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f8cd 8018 	str.w	r8, [sp, #24]
 800736c:	ee08 0a10 	vmov	s16, r0
 8007370:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007378:	4b9e      	ldr	r3, [pc, #632]	; (80075f4 <_printf_float+0x2d8>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	f7f9 fbdd 	bl	8000b3c <__aeabi_dcmpun>
 8007382:	bb88      	cbnz	r0, 80073e8 <_printf_float+0xcc>
 8007384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007388:	4b9a      	ldr	r3, [pc, #616]	; (80075f4 <_printf_float+0x2d8>)
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	f7f9 fbb7 	bl	8000b00 <__aeabi_dcmple>
 8007392:	bb48      	cbnz	r0, 80073e8 <_printf_float+0xcc>
 8007394:	2200      	movs	r2, #0
 8007396:	2300      	movs	r3, #0
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 fba6 	bl	8000aec <__aeabi_dcmplt>
 80073a0:	b110      	cbz	r0, 80073a8 <_printf_float+0x8c>
 80073a2:	232d      	movs	r3, #45	; 0x2d
 80073a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a8:	4a93      	ldr	r2, [pc, #588]	; (80075f8 <_printf_float+0x2dc>)
 80073aa:	4b94      	ldr	r3, [pc, #592]	; (80075fc <_printf_float+0x2e0>)
 80073ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073b0:	bf94      	ite	ls
 80073b2:	4690      	movls	r8, r2
 80073b4:	4698      	movhi	r8, r3
 80073b6:	2303      	movs	r3, #3
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	f04f 0900 	mov.w	r9, #0
 80073c6:	9700      	str	r7, [sp, #0]
 80073c8:	4633      	mov	r3, r6
 80073ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80073cc:	4621      	mov	r1, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f9da 	bl	8007788 <_printf_common>
 80073d4:	3001      	adds	r0, #1
 80073d6:	f040 8090 	bne.w	80074fa <_printf_float+0x1de>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	b00d      	add	sp, #52	; 0x34
 80073e0:	ecbd 8b02 	vpop	{d8}
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	4642      	mov	r2, r8
 80073ea:	464b      	mov	r3, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	4649      	mov	r1, r9
 80073f0:	f7f9 fba4 	bl	8000b3c <__aeabi_dcmpun>
 80073f4:	b140      	cbz	r0, 8007408 <_printf_float+0xec>
 80073f6:	464b      	mov	r3, r9
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfbc      	itt	lt
 80073fc:	232d      	movlt	r3, #45	; 0x2d
 80073fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007402:	4a7f      	ldr	r2, [pc, #508]	; (8007600 <_printf_float+0x2e4>)
 8007404:	4b7f      	ldr	r3, [pc, #508]	; (8007604 <_printf_float+0x2e8>)
 8007406:	e7d1      	b.n	80073ac <_printf_float+0x90>
 8007408:	6863      	ldr	r3, [r4, #4]
 800740a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800740e:	9206      	str	r2, [sp, #24]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	d13f      	bne.n	8007494 <_printf_float+0x178>
 8007414:	2306      	movs	r3, #6
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	6861      	ldr	r1, [r4, #4]
 800741c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007420:	2300      	movs	r3, #0
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	ab0a      	add	r3, sp, #40	; 0x28
 8007426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800742a:	ab09      	add	r3, sp, #36	; 0x24
 800742c:	ec49 8b10 	vmov	d0, r8, r9
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	6022      	str	r2, [r4, #0]
 8007434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007438:	4628      	mov	r0, r5
 800743a:	f7ff fecf 	bl	80071dc <__cvt>
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007442:	2b47      	cmp	r3, #71	; 0x47
 8007444:	4680      	mov	r8, r0
 8007446:	d108      	bne.n	800745a <_printf_float+0x13e>
 8007448:	1cc8      	adds	r0, r1, #3
 800744a:	db02      	blt.n	8007452 <_printf_float+0x136>
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	4299      	cmp	r1, r3
 8007450:	dd41      	ble.n	80074d6 <_printf_float+0x1ba>
 8007452:	f1ab 0302 	sub.w	r3, fp, #2
 8007456:	fa5f fb83 	uxtb.w	fp, r3
 800745a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800745e:	d820      	bhi.n	80074a2 <_printf_float+0x186>
 8007460:	3901      	subs	r1, #1
 8007462:	465a      	mov	r2, fp
 8007464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007468:	9109      	str	r1, [sp, #36]	; 0x24
 800746a:	f7ff ff19 	bl	80072a0 <__exponent>
 800746e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007470:	1813      	adds	r3, r2, r0
 8007472:	2a01      	cmp	r2, #1
 8007474:	4681      	mov	r9, r0
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	dc02      	bgt.n	8007480 <_printf_float+0x164>
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	07d2      	lsls	r2, r2, #31
 800747e:	d501      	bpl.n	8007484 <_printf_float+0x168>
 8007480:	3301      	adds	r3, #1
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007488:	2b00      	cmp	r3, #0
 800748a:	d09c      	beq.n	80073c6 <_printf_float+0xaa>
 800748c:	232d      	movs	r3, #45	; 0x2d
 800748e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007492:	e798      	b.n	80073c6 <_printf_float+0xaa>
 8007494:	9a06      	ldr	r2, [sp, #24]
 8007496:	2a47      	cmp	r2, #71	; 0x47
 8007498:	d1be      	bne.n	8007418 <_printf_float+0xfc>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1bc      	bne.n	8007418 <_printf_float+0xfc>
 800749e:	2301      	movs	r3, #1
 80074a0:	e7b9      	b.n	8007416 <_printf_float+0xfa>
 80074a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074a6:	d118      	bne.n	80074da <_printf_float+0x1be>
 80074a8:	2900      	cmp	r1, #0
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	dd0b      	ble.n	80074c6 <_printf_float+0x1aa>
 80074ae:	6121      	str	r1, [r4, #16]
 80074b0:	b913      	cbnz	r3, 80074b8 <_printf_float+0x19c>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	07d0      	lsls	r0, r2, #31
 80074b6:	d502      	bpl.n	80074be <_printf_float+0x1a2>
 80074b8:	3301      	adds	r3, #1
 80074ba:	440b      	add	r3, r1
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	65a1      	str	r1, [r4, #88]	; 0x58
 80074c0:	f04f 0900 	mov.w	r9, #0
 80074c4:	e7de      	b.n	8007484 <_printf_float+0x168>
 80074c6:	b913      	cbnz	r3, 80074ce <_printf_float+0x1b2>
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	07d2      	lsls	r2, r2, #31
 80074cc:	d501      	bpl.n	80074d2 <_printf_float+0x1b6>
 80074ce:	3302      	adds	r3, #2
 80074d0:	e7f4      	b.n	80074bc <_printf_float+0x1a0>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7f2      	b.n	80074bc <_printf_float+0x1a0>
 80074d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074dc:	4299      	cmp	r1, r3
 80074de:	db05      	blt.n	80074ec <_printf_float+0x1d0>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	6121      	str	r1, [r4, #16]
 80074e4:	07d8      	lsls	r0, r3, #31
 80074e6:	d5ea      	bpl.n	80074be <_printf_float+0x1a2>
 80074e8:	1c4b      	adds	r3, r1, #1
 80074ea:	e7e7      	b.n	80074bc <_printf_float+0x1a0>
 80074ec:	2900      	cmp	r1, #0
 80074ee:	bfd4      	ite	le
 80074f0:	f1c1 0202 	rsble	r2, r1, #2
 80074f4:	2201      	movgt	r2, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	e7e0      	b.n	80074bc <_printf_float+0x1a0>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	055a      	lsls	r2, r3, #21
 80074fe:	d407      	bmi.n	8007510 <_printf_float+0x1f4>
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	4642      	mov	r2, r8
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	d12c      	bne.n	8007568 <_printf_float+0x24c>
 800750e:	e764      	b.n	80073da <_printf_float+0xbe>
 8007510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007514:	f240 80e0 	bls.w	80076d8 <_printf_float+0x3bc>
 8007518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	f7f9 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8007524:	2800      	cmp	r0, #0
 8007526:	d034      	beq.n	8007592 <_printf_float+0x276>
 8007528:	4a37      	ldr	r2, [pc, #220]	; (8007608 <_printf_float+0x2ec>)
 800752a:	2301      	movs	r3, #1
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	f43f af51 	beq.w	80073da <_printf_float+0xbe>
 8007538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800753c:	429a      	cmp	r2, r3
 800753e:	db02      	blt.n	8007546 <_printf_float+0x22a>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	07d8      	lsls	r0, r3, #31
 8007544:	d510      	bpl.n	8007568 <_printf_float+0x24c>
 8007546:	ee18 3a10 	vmov	r3, s16
 800754a:	4652      	mov	r2, sl
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	f43f af41 	beq.w	80073da <_printf_float+0xbe>
 8007558:	f04f 0800 	mov.w	r8, #0
 800755c:	f104 091a 	add.w	r9, r4, #26
 8007560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007562:	3b01      	subs	r3, #1
 8007564:	4543      	cmp	r3, r8
 8007566:	dc09      	bgt.n	800757c <_printf_float+0x260>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	079b      	lsls	r3, r3, #30
 800756c:	f100 8107 	bmi.w	800777e <_printf_float+0x462>
 8007570:	68e0      	ldr	r0, [r4, #12]
 8007572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007574:	4298      	cmp	r0, r3
 8007576:	bfb8      	it	lt
 8007578:	4618      	movlt	r0, r3
 800757a:	e730      	b.n	80073de <_printf_float+0xc2>
 800757c:	2301      	movs	r3, #1
 800757e:	464a      	mov	r2, r9
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	f43f af27 	beq.w	80073da <_printf_float+0xbe>
 800758c:	f108 0801 	add.w	r8, r8, #1
 8007590:	e7e6      	b.n	8007560 <_printf_float+0x244>
 8007592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc39      	bgt.n	800760c <_printf_float+0x2f0>
 8007598:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <_printf_float+0x2ec>)
 800759a:	2301      	movs	r3, #1
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f af19 	beq.w	80073da <_printf_float+0xbe>
 80075a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075ac:	4313      	orrs	r3, r2
 80075ae:	d102      	bne.n	80075b6 <_printf_float+0x29a>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	07d9      	lsls	r1, r3, #31
 80075b4:	d5d8      	bpl.n	8007568 <_printf_float+0x24c>
 80075b6:	ee18 3a10 	vmov	r3, s16
 80075ba:	4652      	mov	r2, sl
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f af09 	beq.w	80073da <_printf_float+0xbe>
 80075c8:	f04f 0900 	mov.w	r9, #0
 80075cc:	f104 0a1a 	add.w	sl, r4, #26
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	425b      	negs	r3, r3
 80075d4:	454b      	cmp	r3, r9
 80075d6:	dc01      	bgt.n	80075dc <_printf_float+0x2c0>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	e792      	b.n	8007502 <_printf_float+0x1e6>
 80075dc:	2301      	movs	r3, #1
 80075de:	4652      	mov	r2, sl
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f aef7 	beq.w	80073da <_printf_float+0xbe>
 80075ec:	f109 0901 	add.w	r9, r9, #1
 80075f0:	e7ee      	b.n	80075d0 <_printf_float+0x2b4>
 80075f2:	bf00      	nop
 80075f4:	7fefffff 	.word	0x7fefffff
 80075f8:	08009fb8 	.word	0x08009fb8
 80075fc:	08009fbc 	.word	0x08009fbc
 8007600:	08009fc0 	.word	0x08009fc0
 8007604:	08009fc4 	.word	0x08009fc4
 8007608:	08009fc8 	.word	0x08009fc8
 800760c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800760e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007610:	429a      	cmp	r2, r3
 8007612:	bfa8      	it	ge
 8007614:	461a      	movge	r2, r3
 8007616:	2a00      	cmp	r2, #0
 8007618:	4691      	mov	r9, r2
 800761a:	dc37      	bgt.n	800768c <_printf_float+0x370>
 800761c:	f04f 0b00 	mov.w	fp, #0
 8007620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007624:	f104 021a 	add.w	r2, r4, #26
 8007628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800762a:	9305      	str	r3, [sp, #20]
 800762c:	eba3 0309 	sub.w	r3, r3, r9
 8007630:	455b      	cmp	r3, fp
 8007632:	dc33      	bgt.n	800769c <_printf_float+0x380>
 8007634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007638:	429a      	cmp	r2, r3
 800763a:	db3b      	blt.n	80076b4 <_printf_float+0x398>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	07da      	lsls	r2, r3, #31
 8007640:	d438      	bmi.n	80076b4 <_printf_float+0x398>
 8007642:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007646:	eba2 0903 	sub.w	r9, r2, r3
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	4591      	cmp	r9, r2
 8007650:	bfa8      	it	ge
 8007652:	4691      	movge	r9, r2
 8007654:	f1b9 0f00 	cmp.w	r9, #0
 8007658:	dc35      	bgt.n	80076c6 <_printf_float+0x3aa>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007662:	f104 0a1a 	add.w	sl, r4, #26
 8007666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	eba3 0309 	sub.w	r3, r3, r9
 8007670:	4543      	cmp	r3, r8
 8007672:	f77f af79 	ble.w	8007568 <_printf_float+0x24c>
 8007676:	2301      	movs	r3, #1
 8007678:	4652      	mov	r2, sl
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f aeaa 	beq.w	80073da <_printf_float+0xbe>
 8007686:	f108 0801 	add.w	r8, r8, #1
 800768a:	e7ec      	b.n	8007666 <_printf_float+0x34a>
 800768c:	4613      	mov	r3, r2
 800768e:	4631      	mov	r1, r6
 8007690:	4642      	mov	r2, r8
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	d1c0      	bne.n	800761c <_printf_float+0x300>
 800769a:	e69e      	b.n	80073da <_printf_float+0xbe>
 800769c:	2301      	movs	r3, #1
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	9205      	str	r2, [sp, #20]
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f ae97 	beq.w	80073da <_printf_float+0xbe>
 80076ac:	9a05      	ldr	r2, [sp, #20]
 80076ae:	f10b 0b01 	add.w	fp, fp, #1
 80076b2:	e7b9      	b.n	8007628 <_printf_float+0x30c>
 80076b4:	ee18 3a10 	vmov	r3, s16
 80076b8:	4652      	mov	r2, sl
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	d1be      	bne.n	8007642 <_printf_float+0x326>
 80076c4:	e689      	b.n	80073da <_printf_float+0xbe>
 80076c6:	9a05      	ldr	r2, [sp, #20]
 80076c8:	464b      	mov	r3, r9
 80076ca:	4442      	add	r2, r8
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	d1c1      	bne.n	800765a <_printf_float+0x33e>
 80076d6:	e680      	b.n	80073da <_printf_float+0xbe>
 80076d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076da:	2a01      	cmp	r2, #1
 80076dc:	dc01      	bgt.n	80076e2 <_printf_float+0x3c6>
 80076de:	07db      	lsls	r3, r3, #31
 80076e0:	d53a      	bpl.n	8007758 <_printf_float+0x43c>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4642      	mov	r2, r8
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f ae74 	beq.w	80073da <_printf_float+0xbe>
 80076f2:	ee18 3a10 	vmov	r3, s16
 80076f6:	4652      	mov	r2, sl
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f ae6b 	beq.w	80073da <_printf_float+0xbe>
 8007704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007710:	f7f9 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007714:	b9d8      	cbnz	r0, 800774e <_printf_float+0x432>
 8007716:	f10a 33ff 	add.w	r3, sl, #4294967295
 800771a:	f108 0201 	add.w	r2, r8, #1
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	d10e      	bne.n	8007746 <_printf_float+0x42a>
 8007728:	e657      	b.n	80073da <_printf_float+0xbe>
 800772a:	2301      	movs	r3, #1
 800772c:	4652      	mov	r2, sl
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f ae50 	beq.w	80073da <_printf_float+0xbe>
 800773a:	f108 0801 	add.w	r8, r8, #1
 800773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007740:	3b01      	subs	r3, #1
 8007742:	4543      	cmp	r3, r8
 8007744:	dcf1      	bgt.n	800772a <_printf_float+0x40e>
 8007746:	464b      	mov	r3, r9
 8007748:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800774c:	e6da      	b.n	8007504 <_printf_float+0x1e8>
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	f104 0a1a 	add.w	sl, r4, #26
 8007756:	e7f2      	b.n	800773e <_printf_float+0x422>
 8007758:	2301      	movs	r3, #1
 800775a:	4642      	mov	r2, r8
 800775c:	e7df      	b.n	800771e <_printf_float+0x402>
 800775e:	2301      	movs	r3, #1
 8007760:	464a      	mov	r2, r9
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae36 	beq.w	80073da <_printf_float+0xbe>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007776:	1a5b      	subs	r3, r3, r1
 8007778:	4543      	cmp	r3, r8
 800777a:	dcf0      	bgt.n	800775e <_printf_float+0x442>
 800777c:	e6f8      	b.n	8007570 <_printf_float+0x254>
 800777e:	f04f 0800 	mov.w	r8, #0
 8007782:	f104 0919 	add.w	r9, r4, #25
 8007786:	e7f4      	b.n	8007772 <_printf_float+0x456>

08007788 <_printf_common>:
 8007788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778c:	4616      	mov	r6, r2
 800778e:	4699      	mov	r9, r3
 8007790:	688a      	ldr	r2, [r1, #8]
 8007792:	690b      	ldr	r3, [r1, #16]
 8007794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007798:	4293      	cmp	r3, r2
 800779a:	bfb8      	it	lt
 800779c:	4613      	movlt	r3, r2
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077a4:	4607      	mov	r7, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b10a      	cbz	r2, 80077ae <_printf_common+0x26>
 80077aa:	3301      	adds	r3, #1
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	0699      	lsls	r1, r3, #26
 80077b2:	bf42      	ittt	mi
 80077b4:	6833      	ldrmi	r3, [r6, #0]
 80077b6:	3302      	addmi	r3, #2
 80077b8:	6033      	strmi	r3, [r6, #0]
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	f015 0506 	ands.w	r5, r5, #6
 80077c0:	d106      	bne.n	80077d0 <_printf_common+0x48>
 80077c2:	f104 0a19 	add.w	sl, r4, #25
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	6832      	ldr	r2, [r6, #0]
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	dc26      	bgt.n	800781e <_printf_common+0x96>
 80077d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077d4:	1e13      	subs	r3, r2, #0
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	bf18      	it	ne
 80077da:	2301      	movne	r3, #1
 80077dc:	0692      	lsls	r2, r2, #26
 80077de:	d42b      	bmi.n	8007838 <_printf_common+0xb0>
 80077e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077e4:	4649      	mov	r1, r9
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c0      	blx	r8
 80077ea:	3001      	adds	r0, #1
 80077ec:	d01e      	beq.n	800782c <_printf_common+0xa4>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	f003 0306 	and.w	r3, r3, #6
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	bf02      	ittt	eq
 80077fa:	68e5      	ldreq	r5, [r4, #12]
 80077fc:	6833      	ldreq	r3, [r6, #0]
 80077fe:	1aed      	subeq	r5, r5, r3
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	bf0c      	ite	eq
 8007804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007808:	2500      	movne	r5, #0
 800780a:	4293      	cmp	r3, r2
 800780c:	bfc4      	itt	gt
 800780e:	1a9b      	subgt	r3, r3, r2
 8007810:	18ed      	addgt	r5, r5, r3
 8007812:	2600      	movs	r6, #0
 8007814:	341a      	adds	r4, #26
 8007816:	42b5      	cmp	r5, r6
 8007818:	d11a      	bne.n	8007850 <_printf_common+0xc8>
 800781a:	2000      	movs	r0, #0
 800781c:	e008      	b.n	8007830 <_printf_common+0xa8>
 800781e:	2301      	movs	r3, #1
 8007820:	4652      	mov	r2, sl
 8007822:	4649      	mov	r1, r9
 8007824:	4638      	mov	r0, r7
 8007826:	47c0      	blx	r8
 8007828:	3001      	adds	r0, #1
 800782a:	d103      	bne.n	8007834 <_printf_common+0xac>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	3501      	adds	r5, #1
 8007836:	e7c6      	b.n	80077c6 <_printf_common+0x3e>
 8007838:	18e1      	adds	r1, r4, r3
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	2030      	movs	r0, #48	; 0x30
 800783e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007842:	4422      	add	r2, r4
 8007844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800784c:	3302      	adds	r3, #2
 800784e:	e7c7      	b.n	80077e0 <_printf_common+0x58>
 8007850:	2301      	movs	r3, #1
 8007852:	4622      	mov	r2, r4
 8007854:	4649      	mov	r1, r9
 8007856:	4638      	mov	r0, r7
 8007858:	47c0      	blx	r8
 800785a:	3001      	adds	r0, #1
 800785c:	d0e6      	beq.n	800782c <_printf_common+0xa4>
 800785e:	3601      	adds	r6, #1
 8007860:	e7d9      	b.n	8007816 <_printf_common+0x8e>
	...

08007864 <_printf_i>:
 8007864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	7e0f      	ldrb	r7, [r1, #24]
 800786a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800786c:	2f78      	cmp	r7, #120	; 0x78
 800786e:	4691      	mov	r9, r2
 8007870:	4680      	mov	r8, r0
 8007872:	460c      	mov	r4, r1
 8007874:	469a      	mov	sl, r3
 8007876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800787a:	d807      	bhi.n	800788c <_printf_i+0x28>
 800787c:	2f62      	cmp	r7, #98	; 0x62
 800787e:	d80a      	bhi.n	8007896 <_printf_i+0x32>
 8007880:	2f00      	cmp	r7, #0
 8007882:	f000 80d4 	beq.w	8007a2e <_printf_i+0x1ca>
 8007886:	2f58      	cmp	r7, #88	; 0x58
 8007888:	f000 80c0 	beq.w	8007a0c <_printf_i+0x1a8>
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007894:	e03a      	b.n	800790c <_printf_i+0xa8>
 8007896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800789a:	2b15      	cmp	r3, #21
 800789c:	d8f6      	bhi.n	800788c <_printf_i+0x28>
 800789e:	a101      	add	r1, pc, #4	; (adr r1, 80078a4 <_printf_i+0x40>)
 80078a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078a4:	080078fd 	.word	0x080078fd
 80078a8:	08007911 	.word	0x08007911
 80078ac:	0800788d 	.word	0x0800788d
 80078b0:	0800788d 	.word	0x0800788d
 80078b4:	0800788d 	.word	0x0800788d
 80078b8:	0800788d 	.word	0x0800788d
 80078bc:	08007911 	.word	0x08007911
 80078c0:	0800788d 	.word	0x0800788d
 80078c4:	0800788d 	.word	0x0800788d
 80078c8:	0800788d 	.word	0x0800788d
 80078cc:	0800788d 	.word	0x0800788d
 80078d0:	08007a15 	.word	0x08007a15
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	080079cf 	.word	0x080079cf
 80078dc:	0800788d 	.word	0x0800788d
 80078e0:	0800788d 	.word	0x0800788d
 80078e4:	08007a37 	.word	0x08007a37
 80078e8:	0800788d 	.word	0x0800788d
 80078ec:	0800793d 	.word	0x0800793d
 80078f0:	0800788d 	.word	0x0800788d
 80078f4:	0800788d 	.word	0x0800788d
 80078f8:	080079d7 	.word	0x080079d7
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	1d1a      	adds	r2, r3, #4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800790c:	2301      	movs	r3, #1
 800790e:	e09f      	b.n	8007a50 <_printf_i+0x1ec>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	682b      	ldr	r3, [r5, #0]
 8007914:	0607      	lsls	r7, r0, #24
 8007916:	f103 0104 	add.w	r1, r3, #4
 800791a:	6029      	str	r1, [r5, #0]
 800791c:	d501      	bpl.n	8007922 <_printf_i+0xbe>
 800791e:	681e      	ldr	r6, [r3, #0]
 8007920:	e003      	b.n	800792a <_printf_i+0xc6>
 8007922:	0646      	lsls	r6, r0, #25
 8007924:	d5fb      	bpl.n	800791e <_printf_i+0xba>
 8007926:	f9b3 6000 	ldrsh.w	r6, [r3]
 800792a:	2e00      	cmp	r6, #0
 800792c:	da03      	bge.n	8007936 <_printf_i+0xd2>
 800792e:	232d      	movs	r3, #45	; 0x2d
 8007930:	4276      	negs	r6, r6
 8007932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007936:	485a      	ldr	r0, [pc, #360]	; (8007aa0 <_printf_i+0x23c>)
 8007938:	230a      	movs	r3, #10
 800793a:	e012      	b.n	8007962 <_printf_i+0xfe>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	1d19      	adds	r1, r3, #4
 8007942:	6029      	str	r1, [r5, #0]
 8007944:	0605      	lsls	r5, r0, #24
 8007946:	d501      	bpl.n	800794c <_printf_i+0xe8>
 8007948:	681e      	ldr	r6, [r3, #0]
 800794a:	e002      	b.n	8007952 <_printf_i+0xee>
 800794c:	0641      	lsls	r1, r0, #25
 800794e:	d5fb      	bpl.n	8007948 <_printf_i+0xe4>
 8007950:	881e      	ldrh	r6, [r3, #0]
 8007952:	4853      	ldr	r0, [pc, #332]	; (8007aa0 <_printf_i+0x23c>)
 8007954:	2f6f      	cmp	r7, #111	; 0x6f
 8007956:	bf0c      	ite	eq
 8007958:	2308      	moveq	r3, #8
 800795a:	230a      	movne	r3, #10
 800795c:	2100      	movs	r1, #0
 800795e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007962:	6865      	ldr	r5, [r4, #4]
 8007964:	60a5      	str	r5, [r4, #8]
 8007966:	2d00      	cmp	r5, #0
 8007968:	bfa2      	ittt	ge
 800796a:	6821      	ldrge	r1, [r4, #0]
 800796c:	f021 0104 	bicge.w	r1, r1, #4
 8007970:	6021      	strge	r1, [r4, #0]
 8007972:	b90e      	cbnz	r6, 8007978 <_printf_i+0x114>
 8007974:	2d00      	cmp	r5, #0
 8007976:	d04b      	beq.n	8007a10 <_printf_i+0x1ac>
 8007978:	4615      	mov	r5, r2
 800797a:	fbb6 f1f3 	udiv	r1, r6, r3
 800797e:	fb03 6711 	mls	r7, r3, r1, r6
 8007982:	5dc7      	ldrb	r7, [r0, r7]
 8007984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007988:	4637      	mov	r7, r6
 800798a:	42bb      	cmp	r3, r7
 800798c:	460e      	mov	r6, r1
 800798e:	d9f4      	bls.n	800797a <_printf_i+0x116>
 8007990:	2b08      	cmp	r3, #8
 8007992:	d10b      	bne.n	80079ac <_printf_i+0x148>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	07de      	lsls	r6, r3, #31
 8007998:	d508      	bpl.n	80079ac <_printf_i+0x148>
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	4299      	cmp	r1, r3
 80079a0:	bfde      	ittt	le
 80079a2:	2330      	movle	r3, #48	; 0x30
 80079a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079ac:	1b52      	subs	r2, r2, r5
 80079ae:	6122      	str	r2, [r4, #16]
 80079b0:	f8cd a000 	str.w	sl, [sp]
 80079b4:	464b      	mov	r3, r9
 80079b6:	aa03      	add	r2, sp, #12
 80079b8:	4621      	mov	r1, r4
 80079ba:	4640      	mov	r0, r8
 80079bc:	f7ff fee4 	bl	8007788 <_printf_common>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d14a      	bne.n	8007a5a <_printf_i+0x1f6>
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	b004      	add	sp, #16
 80079ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	f043 0320 	orr.w	r3, r3, #32
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	4833      	ldr	r0, [pc, #204]	; (8007aa4 <_printf_i+0x240>)
 80079d8:	2778      	movs	r7, #120	; 0x78
 80079da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6829      	ldr	r1, [r5, #0]
 80079e2:	061f      	lsls	r7, r3, #24
 80079e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079e8:	d402      	bmi.n	80079f0 <_printf_i+0x18c>
 80079ea:	065f      	lsls	r7, r3, #25
 80079ec:	bf48      	it	mi
 80079ee:	b2b6      	uxthmi	r6, r6
 80079f0:	07df      	lsls	r7, r3, #31
 80079f2:	bf48      	it	mi
 80079f4:	f043 0320 	orrmi.w	r3, r3, #32
 80079f8:	6029      	str	r1, [r5, #0]
 80079fa:	bf48      	it	mi
 80079fc:	6023      	strmi	r3, [r4, #0]
 80079fe:	b91e      	cbnz	r6, 8007a08 <_printf_i+0x1a4>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f023 0320 	bic.w	r3, r3, #32
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	2310      	movs	r3, #16
 8007a0a:	e7a7      	b.n	800795c <_printf_i+0xf8>
 8007a0c:	4824      	ldr	r0, [pc, #144]	; (8007aa0 <_printf_i+0x23c>)
 8007a0e:	e7e4      	b.n	80079da <_printf_i+0x176>
 8007a10:	4615      	mov	r5, r2
 8007a12:	e7bd      	b.n	8007990 <_printf_i+0x12c>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	6826      	ldr	r6, [r4, #0]
 8007a18:	6961      	ldr	r1, [r4, #20]
 8007a1a:	1d18      	adds	r0, r3, #4
 8007a1c:	6028      	str	r0, [r5, #0]
 8007a1e:	0635      	lsls	r5, r6, #24
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0x1c4>
 8007a24:	6019      	str	r1, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0x1ca>
 8007a28:	0670      	lsls	r0, r6, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0x1c0>
 8007a2c:	8019      	strh	r1, [r3, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	4615      	mov	r5, r2
 8007a34:	e7bc      	b.n	80079b0 <_printf_i+0x14c>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	1d1a      	adds	r2, r3, #4
 8007a3a:	602a      	str	r2, [r5, #0]
 8007a3c:	681d      	ldr	r5, [r3, #0]
 8007a3e:	6862      	ldr	r2, [r4, #4]
 8007a40:	2100      	movs	r1, #0
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7f8 fbcc 	bl	80001e0 <memchr>
 8007a48:	b108      	cbz	r0, 8007a4e <_printf_i+0x1ea>
 8007a4a:	1b40      	subs	r0, r0, r5
 8007a4c:	6060      	str	r0, [r4, #4]
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	2300      	movs	r3, #0
 8007a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a58:	e7aa      	b.n	80079b0 <_printf_i+0x14c>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	47d0      	blx	sl
 8007a64:	3001      	adds	r0, #1
 8007a66:	d0ad      	beq.n	80079c4 <_printf_i+0x160>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	079b      	lsls	r3, r3, #30
 8007a6c:	d413      	bmi.n	8007a96 <_printf_i+0x232>
 8007a6e:	68e0      	ldr	r0, [r4, #12]
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	4298      	cmp	r0, r3
 8007a74:	bfb8      	it	lt
 8007a76:	4618      	movlt	r0, r3
 8007a78:	e7a6      	b.n	80079c8 <_printf_i+0x164>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	4649      	mov	r1, r9
 8007a80:	4640      	mov	r0, r8
 8007a82:	47d0      	blx	sl
 8007a84:	3001      	adds	r0, #1
 8007a86:	d09d      	beq.n	80079c4 <_printf_i+0x160>
 8007a88:	3501      	adds	r5, #1
 8007a8a:	68e3      	ldr	r3, [r4, #12]
 8007a8c:	9903      	ldr	r1, [sp, #12]
 8007a8e:	1a5b      	subs	r3, r3, r1
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	dcf2      	bgt.n	8007a7a <_printf_i+0x216>
 8007a94:	e7eb      	b.n	8007a6e <_printf_i+0x20a>
 8007a96:	2500      	movs	r5, #0
 8007a98:	f104 0619 	add.w	r6, r4, #25
 8007a9c:	e7f5      	b.n	8007a8a <_printf_i+0x226>
 8007a9e:	bf00      	nop
 8007aa0:	08009fca 	.word	0x08009fca
 8007aa4:	08009fdb 	.word	0x08009fdb

08007aa8 <std>:
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	4604      	mov	r4, r0
 8007aae:	e9c0 3300 	strd	r3, r3, [r0]
 8007ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab6:	6083      	str	r3, [r0, #8]
 8007ab8:	8181      	strh	r1, [r0, #12]
 8007aba:	6643      	str	r3, [r0, #100]	; 0x64
 8007abc:	81c2      	strh	r2, [r0, #14]
 8007abe:	6183      	str	r3, [r0, #24]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	305c      	adds	r0, #92	; 0x5c
 8007ac6:	f000 f916 	bl	8007cf6 <memset>
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <std+0x38>)
 8007acc:	6263      	str	r3, [r4, #36]	; 0x24
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <std+0x3c>)
 8007ad0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <std+0x40>)
 8007ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ad6:	4b05      	ldr	r3, [pc, #20]	; (8007aec <std+0x44>)
 8007ad8:	6224      	str	r4, [r4, #32]
 8007ada:	6323      	str	r3, [r4, #48]	; 0x30
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	08007c71 	.word	0x08007c71
 8007ae4:	08007c93 	.word	0x08007c93
 8007ae8:	08007ccb 	.word	0x08007ccb
 8007aec:	08007cef 	.word	0x08007cef

08007af0 <stdio_exit_handler>:
 8007af0:	4a02      	ldr	r2, [pc, #8]	; (8007afc <stdio_exit_handler+0xc>)
 8007af2:	4903      	ldr	r1, [pc, #12]	; (8007b00 <stdio_exit_handler+0x10>)
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <stdio_exit_handler+0x14>)
 8007af6:	f000 b869 	b.w	8007bcc <_fwalk_sglue>
 8007afa:	bf00      	nop
 8007afc:	20000018 	.word	0x20000018
 8007b00:	080097a1 	.word	0x080097a1
 8007b04:	20000024 	.word	0x20000024

08007b08 <cleanup_stdio>:
 8007b08:	6841      	ldr	r1, [r0, #4]
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <cleanup_stdio+0x34>)
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	d001      	beq.n	8007b18 <cleanup_stdio+0x10>
 8007b14:	f001 fe44 	bl	80097a0 <_fflush_r>
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <cleanup_stdio+0x38>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <cleanup_stdio+0x1e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fe3d 	bl	80097a0 <_fflush_r>
 8007b26:	68e1      	ldr	r1, [r4, #12]
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <cleanup_stdio+0x3c>)
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d004      	beq.n	8007b38 <cleanup_stdio+0x30>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f001 be34 	b.w	80097a0 <_fflush_r>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200003fc 	.word	0x200003fc
 8007b40:	20000464 	.word	0x20000464
 8007b44:	200004cc 	.word	0x200004cc

08007b48 <global_stdio_init.part.0>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <global_stdio_init.part.0+0x30>)
 8007b4c:	4c0b      	ldr	r4, [pc, #44]	; (8007b7c <global_stdio_init.part.0+0x34>)
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <global_stdio_init.part.0+0x38>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4620      	mov	r0, r4
 8007b54:	2200      	movs	r2, #0
 8007b56:	2104      	movs	r1, #4
 8007b58:	f7ff ffa6 	bl	8007aa8 <std>
 8007b5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b60:	2201      	movs	r2, #1
 8007b62:	2109      	movs	r1, #9
 8007b64:	f7ff ffa0 	bl	8007aa8 <std>
 8007b68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff bf98 	b.w	8007aa8 <std>
 8007b78:	20000534 	.word	0x20000534
 8007b7c:	200003fc 	.word	0x200003fc
 8007b80:	08007af1 	.word	0x08007af1

08007b84 <__sfp_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__sfp_lock_acquire+0x8>)
 8007b86:	f000 b933 	b.w	8007df0 <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	2000053d 	.word	0x2000053d

08007b90 <__sfp_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sfp_lock_release+0x8>)
 8007b92:	f000 b92e 	b.w	8007df2 <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	2000053d 	.word	0x2000053d

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sfp_lock_acquire>
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sfp_lock_release>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <__sinit+0x28>)
 8007bb2:	6223      	str	r3, [r4, #32]
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <__sinit+0x2c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <__sinit+0xc>
 8007bbc:	f7ff ffc4 	bl	8007b48 <global_stdio_init.part.0>
 8007bc0:	e7f2      	b.n	8007ba8 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08007b09 	.word	0x08007b09
 8007bc8:	20000534 	.word	0x20000534

08007bcc <_fwalk_sglue>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007be0:	d505      	bpl.n	8007bee <_fwalk_sglue+0x22>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <_fwalk_sglue+0xc>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d907      	bls.n	8007c04 <_fwalk_sglue+0x38>
 8007bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	d003      	beq.n	8007c04 <_fwalk_sglue+0x38>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	4306      	orrs	r6, r0
 8007c04:	3568      	adds	r5, #104	; 0x68
 8007c06:	e7e9      	b.n	8007bdc <_fwalk_sglue+0x10>

08007c08 <sniprintf>:
 8007c08:	b40c      	push	{r2, r3}
 8007c0a:	b530      	push	{r4, r5, lr}
 8007c0c:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <sniprintf+0x64>)
 8007c0e:	1e0c      	subs	r4, r1, #0
 8007c10:	681d      	ldr	r5, [r3, #0]
 8007c12:	b09d      	sub	sp, #116	; 0x74
 8007c14:	da08      	bge.n	8007c28 <sniprintf+0x20>
 8007c16:	238b      	movs	r3, #139	; 0x8b
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	b01d      	add	sp, #116	; 0x74
 8007c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c24:	b002      	add	sp, #8
 8007c26:	4770      	bx	lr
 8007c28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c30:	bf14      	ite	ne
 8007c32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c36:	4623      	moveq	r3, r4
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	9307      	str	r3, [sp, #28]
 8007c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c40:	9002      	str	r0, [sp, #8]
 8007c42:	9006      	str	r0, [sp, #24]
 8007c44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c4a:	ab21      	add	r3, sp, #132	; 0x84
 8007c4c:	a902      	add	r1, sp, #8
 8007c4e:	4628      	mov	r0, r5
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	f001 fc21 	bl	8009498 <_svfiprintf_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	bfbc      	itt	lt
 8007c5a:	238b      	movlt	r3, #139	; 0x8b
 8007c5c:	602b      	strlt	r3, [r5, #0]
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	d0dd      	beq.n	8007c1e <sniprintf+0x16>
 8007c62:	9b02      	ldr	r3, [sp, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e7d9      	b.n	8007c1e <sniprintf+0x16>
 8007c6a:	bf00      	nop
 8007c6c:	20000070 	.word	0x20000070

08007c70 <__sread>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c78:	f000 f86c 	bl	8007d54 <_read_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	bfab      	itete	ge
 8007c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c82:	89a3      	ldrhlt	r3, [r4, #12]
 8007c84:	181b      	addge	r3, r3, r0
 8007c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c8a:	bfac      	ite	ge
 8007c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c8e:	81a3      	strhlt	r3, [r4, #12]
 8007c90:	bd10      	pop	{r4, pc}

08007c92 <__swrite>:
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	461f      	mov	r7, r3
 8007c98:	898b      	ldrh	r3, [r1, #12]
 8007c9a:	05db      	lsls	r3, r3, #23
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	d505      	bpl.n	8007cb0 <__swrite+0x1e>
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	f000 f840 	bl	8007d30 <_lseek_r>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	f000 b857 	b.w	8007d78 <_write_r>

08007cca <__sseek>:
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 f82d 	bl	8007d30 <_lseek_r>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	bf15      	itete	ne
 8007cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ce6:	81a3      	strheq	r3, [r4, #12]
 8007ce8:	bf18      	it	ne
 8007cea:	81a3      	strhne	r3, [r4, #12]
 8007cec:	bd10      	pop	{r4, pc}

08007cee <__sclose>:
 8007cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf2:	f000 b80d 	b.w	8007d10 <_close_r>

08007cf6 <memset>:
 8007cf6:	4402      	add	r2, r0
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d100      	bne.n	8007d00 <memset+0xa>
 8007cfe:	4770      	bx	lr
 8007d00:	f803 1b01 	strb.w	r1, [r3], #1
 8007d04:	e7f9      	b.n	8007cfa <memset+0x4>
	...

08007d08 <_localeconv_r>:
 8007d08:	4800      	ldr	r0, [pc, #0]	; (8007d0c <_localeconv_r+0x4>)
 8007d0a:	4770      	bx	lr
 8007d0c:	20000164 	.word	0x20000164

08007d10 <_close_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d06      	ldr	r5, [pc, #24]	; (8007d2c <_close_r+0x1c>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7f9 fe09 	bl	8001932 <_close>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_close_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_close_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20000538 	.word	0x20000538

08007d30 <_lseek_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d07      	ldr	r5, [pc, #28]	; (8007d50 <_lseek_r+0x20>)
 8007d34:	4604      	mov	r4, r0
 8007d36:	4608      	mov	r0, r1
 8007d38:	4611      	mov	r1, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	602a      	str	r2, [r5, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f7f9 fe1e 	bl	8001980 <_lseek>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_lseek_r+0x1e>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_lseek_r+0x1e>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	20000538 	.word	0x20000538

08007d54 <_read_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4d07      	ldr	r5, [pc, #28]	; (8007d74 <_read_r+0x20>)
 8007d58:	4604      	mov	r4, r0
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	2200      	movs	r2, #0
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f7f9 fdac 	bl	80018c0 <_read>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_read_r+0x1e>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_read_r+0x1e>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000538 	.word	0x20000538

08007d78 <_write_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_write_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7f9 fdb7 	bl	80018fa <_write>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_write_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_write_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20000538 	.word	0x20000538

08007d9c <__errno>:
 8007d9c:	4b01      	ldr	r3, [pc, #4]	; (8007da4 <__errno+0x8>)
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000070 	.word	0x20000070

08007da8 <__libc_init_array>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4d0d      	ldr	r5, [pc, #52]	; (8007de0 <__libc_init_array+0x38>)
 8007dac:	4c0d      	ldr	r4, [pc, #52]	; (8007de4 <__libc_init_array+0x3c>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	2600      	movs	r6, #0
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	d109      	bne.n	8007dcc <__libc_init_array+0x24>
 8007db8:	4d0b      	ldr	r5, [pc, #44]	; (8007de8 <__libc_init_array+0x40>)
 8007dba:	4c0c      	ldr	r4, [pc, #48]	; (8007dec <__libc_init_array+0x44>)
 8007dbc:	f002 f894 	bl	8009ee8 <_init>
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d105      	bne.n	8007dd6 <__libc_init_array+0x2e>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd0:	4798      	blx	r3
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7ee      	b.n	8007db4 <__libc_init_array+0xc>
 8007dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dda:	4798      	blx	r3
 8007ddc:	3601      	adds	r6, #1
 8007dde:	e7f2      	b.n	8007dc6 <__libc_init_array+0x1e>
 8007de0:	0800a334 	.word	0x0800a334
 8007de4:	0800a334 	.word	0x0800a334
 8007de8:	0800a334 	.word	0x0800a334
 8007dec:	0800a338 	.word	0x0800a338

08007df0 <__retarget_lock_acquire_recursive>:
 8007df0:	4770      	bx	lr

08007df2 <__retarget_lock_release_recursive>:
 8007df2:	4770      	bx	lr

08007df4 <quorem>:
 8007df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	6903      	ldr	r3, [r0, #16]
 8007dfa:	690c      	ldr	r4, [r1, #16]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	4607      	mov	r7, r0
 8007e00:	db7e      	blt.n	8007f00 <quorem+0x10c>
 8007e02:	3c01      	subs	r4, #1
 8007e04:	f101 0814 	add.w	r8, r1, #20
 8007e08:	f100 0514 	add.w	r5, r0, #20
 8007e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e26:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e2a:	d331      	bcc.n	8007e90 <quorem+0x9c>
 8007e2c:	f04f 0e00 	mov.w	lr, #0
 8007e30:	4640      	mov	r0, r8
 8007e32:	46ac      	mov	ip, r5
 8007e34:	46f2      	mov	sl, lr
 8007e36:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e3a:	b293      	uxth	r3, r2
 8007e3c:	fb06 e303 	mla	r3, r6, r3, lr
 8007e40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e44:	0c1a      	lsrs	r2, r3, #16
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ebaa 0303 	sub.w	r3, sl, r3
 8007e4c:	f8dc a000 	ldr.w	sl, [ip]
 8007e50:	fa13 f38a 	uxtah	r3, r3, sl
 8007e54:	fb06 220e 	mla	r2, r6, lr, r2
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e60:	b292      	uxth	r2, r2
 8007e62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e6e:	4581      	cmp	r9, r0
 8007e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e74:	f84c 3b04 	str.w	r3, [ip], #4
 8007e78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e7c:	d2db      	bcs.n	8007e36 <quorem+0x42>
 8007e7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e82:	b92b      	cbnz	r3, 8007e90 <quorem+0x9c>
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	3b04      	subs	r3, #4
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	d32c      	bcc.n	8007ee8 <quorem+0xf4>
 8007e8e:	613c      	str	r4, [r7, #16]
 8007e90:	4638      	mov	r0, r7
 8007e92:	f001 f9a7 	bl	80091e4 <__mcmp>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	db22      	blt.n	8007ee0 <quorem+0xec>
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ea4:	f8d1 c000 	ldr.w	ip, [r1]
 8007ea8:	b293      	uxth	r3, r2
 8007eaa:	1ac3      	subs	r3, r0, r3
 8007eac:	0c12      	lsrs	r2, r2, #16
 8007eae:	fa13 f38c 	uxtah	r3, r3, ip
 8007eb2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007eb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec0:	45c1      	cmp	r9, r8
 8007ec2:	f841 3b04 	str.w	r3, [r1], #4
 8007ec6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007eca:	d2e9      	bcs.n	8007ea0 <quorem+0xac>
 8007ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed4:	b922      	cbnz	r2, 8007ee0 <quorem+0xec>
 8007ed6:	3b04      	subs	r3, #4
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	d30a      	bcc.n	8007ef4 <quorem+0x100>
 8007ede:	613c      	str	r4, [r7, #16]
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	3b04      	subs	r3, #4
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	d1ce      	bne.n	8007e8e <quorem+0x9a>
 8007ef0:	3c01      	subs	r4, #1
 8007ef2:	e7c9      	b.n	8007e88 <quorem+0x94>
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	d1f0      	bne.n	8007ede <quorem+0xea>
 8007efc:	3c01      	subs	r4, #1
 8007efe:	e7eb      	b.n	8007ed8 <quorem+0xe4>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7ee      	b.n	8007ee2 <quorem+0xee>
 8007f04:	0000      	movs	r0, r0
	...

08007f08 <_dtoa_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ed2d 8b04 	vpush	{d8-d9}
 8007f10:	69c5      	ldr	r5, [r0, #28]
 8007f12:	b093      	sub	sp, #76	; 0x4c
 8007f14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f18:	ec57 6b10 	vmov	r6, r7, d0
 8007f1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f20:	9107      	str	r1, [sp, #28]
 8007f22:	4604      	mov	r4, r0
 8007f24:	920a      	str	r2, [sp, #40]	; 0x28
 8007f26:	930d      	str	r3, [sp, #52]	; 0x34
 8007f28:	b975      	cbnz	r5, 8007f48 <_dtoa_r+0x40>
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	f000 fe2a 	bl	8008b84 <malloc>
 8007f30:	4602      	mov	r2, r0
 8007f32:	61e0      	str	r0, [r4, #28]
 8007f34:	b920      	cbnz	r0, 8007f40 <_dtoa_r+0x38>
 8007f36:	4bae      	ldr	r3, [pc, #696]	; (80081f0 <_dtoa_r+0x2e8>)
 8007f38:	21ef      	movs	r1, #239	; 0xef
 8007f3a:	48ae      	ldr	r0, [pc, #696]	; (80081f4 <_dtoa_r+0x2ec>)
 8007f3c:	f001 fc90 	bl	8009860 <__assert_func>
 8007f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f44:	6005      	str	r5, [r0, #0]
 8007f46:	60c5      	str	r5, [r0, #12]
 8007f48:	69e3      	ldr	r3, [r4, #28]
 8007f4a:	6819      	ldr	r1, [r3, #0]
 8007f4c:	b151      	cbz	r1, 8007f64 <_dtoa_r+0x5c>
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	604a      	str	r2, [r1, #4]
 8007f52:	2301      	movs	r3, #1
 8007f54:	4093      	lsls	r3, r2
 8007f56:	608b      	str	r3, [r1, #8]
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 ff07 	bl	8008d6c <_Bfree>
 8007f5e:	69e3      	ldr	r3, [r4, #28]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	1e3b      	subs	r3, r7, #0
 8007f66:	bfbb      	ittet	lt
 8007f68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f6c:	9303      	strlt	r3, [sp, #12]
 8007f6e:	2300      	movge	r3, #0
 8007f70:	2201      	movlt	r2, #1
 8007f72:	bfac      	ite	ge
 8007f74:	f8c8 3000 	strge.w	r3, [r8]
 8007f78:	f8c8 2000 	strlt.w	r2, [r8]
 8007f7c:	4b9e      	ldr	r3, [pc, #632]	; (80081f8 <_dtoa_r+0x2f0>)
 8007f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f82:	ea33 0308 	bics.w	r3, r3, r8
 8007f86:	d11b      	bne.n	8007fc0 <_dtoa_r+0xb8>
 8007f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f94:	4333      	orrs	r3, r6
 8007f96:	f000 8593 	beq.w	8008ac0 <_dtoa_r+0xbb8>
 8007f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f9c:	b963      	cbnz	r3, 8007fb8 <_dtoa_r+0xb0>
 8007f9e:	4b97      	ldr	r3, [pc, #604]	; (80081fc <_dtoa_r+0x2f4>)
 8007fa0:	e027      	b.n	8007ff2 <_dtoa_r+0xea>
 8007fa2:	4b97      	ldr	r3, [pc, #604]	; (8008200 <_dtoa_r+0x2f8>)
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	9800      	ldr	r0, [sp, #0]
 8007fae:	b013      	add	sp, #76	; 0x4c
 8007fb0:	ecbd 8b04 	vpop	{d8-d9}
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	4b90      	ldr	r3, [pc, #576]	; (80081fc <_dtoa_r+0x2f4>)
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	3303      	adds	r3, #3
 8007fbe:	e7f3      	b.n	8007fa8 <_dtoa_r+0xa0>
 8007fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	ec51 0b17 	vmov	r0, r1, d7
 8007fca:	eeb0 8a47 	vmov.f32	s16, s14
 8007fce:	eef0 8a67 	vmov.f32	s17, s15
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fd8:	4681      	mov	r9, r0
 8007fda:	b160      	cbz	r0, 8007ff6 <_dtoa_r+0xee>
 8007fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8568 	beq.w	8008aba <_dtoa_r+0xbb2>
 8007fea:	4b86      	ldr	r3, [pc, #536]	; (8008204 <_dtoa_r+0x2fc>)
 8007fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	e7da      	b.n	8007fac <_dtoa_r+0xa4>
 8007ff6:	aa10      	add	r2, sp, #64	; 0x40
 8007ff8:	a911      	add	r1, sp, #68	; 0x44
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8008000:	eef0 0a68 	vmov.f32	s1, s17
 8008004:	f001 f994 	bl	8009330 <__d2b>
 8008008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800800c:	4682      	mov	sl, r0
 800800e:	2d00      	cmp	r5, #0
 8008010:	d07f      	beq.n	8008112 <_dtoa_r+0x20a>
 8008012:	ee18 3a90 	vmov	r3, s17
 8008016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800801e:	ec51 0b18 	vmov	r0, r1, d8
 8008022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800802a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800802e:	4619      	mov	r1, r3
 8008030:	2200      	movs	r2, #0
 8008032:	4b75      	ldr	r3, [pc, #468]	; (8008208 <_dtoa_r+0x300>)
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	a367      	add	r3, pc, #412	; (adr r3, 80081d8 <_dtoa_r+0x2d0>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fae3 	bl	8000608 <__aeabi_dmul>
 8008042:	a367      	add	r3, pc, #412	; (adr r3, 80081e0 <_dtoa_r+0x2d8>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 f928 	bl	800029c <__adddf3>
 800804c:	4606      	mov	r6, r0
 800804e:	4628      	mov	r0, r5
 8008050:	460f      	mov	r7, r1
 8008052:	f7f8 fa6f 	bl	8000534 <__aeabi_i2d>
 8008056:	a364      	add	r3, pc, #400	; (adr r3, 80081e8 <_dtoa_r+0x2e0>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 fad4 	bl	8000608 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 f918 	bl	800029c <__adddf3>
 800806c:	4606      	mov	r6, r0
 800806e:	460f      	mov	r7, r1
 8008070:	f7f8 fd7a 	bl	8000b68 <__aeabi_d2iz>
 8008074:	2200      	movs	r2, #0
 8008076:	4683      	mov	fp, r0
 8008078:	2300      	movs	r3, #0
 800807a:	4630      	mov	r0, r6
 800807c:	4639      	mov	r1, r7
 800807e:	f7f8 fd35 	bl	8000aec <__aeabi_dcmplt>
 8008082:	b148      	cbz	r0, 8008098 <_dtoa_r+0x190>
 8008084:	4658      	mov	r0, fp
 8008086:	f7f8 fa55 	bl	8000534 <__aeabi_i2d>
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	f7f8 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008092:	b908      	cbnz	r0, 8008098 <_dtoa_r+0x190>
 8008094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008098:	f1bb 0f16 	cmp.w	fp, #22
 800809c:	d857      	bhi.n	800814e <_dtoa_r+0x246>
 800809e:	4b5b      	ldr	r3, [pc, #364]	; (800820c <_dtoa_r+0x304>)
 80080a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	ec51 0b18 	vmov	r0, r1, d8
 80080ac:	f7f8 fd1e 	bl	8000aec <__aeabi_dcmplt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d04e      	beq.n	8008152 <_dtoa_r+0x24a>
 80080b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080b8:	2300      	movs	r3, #0
 80080ba:	930c      	str	r3, [sp, #48]	; 0x30
 80080bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080be:	1b5b      	subs	r3, r3, r5
 80080c0:	1e5a      	subs	r2, r3, #1
 80080c2:	bf45      	ittet	mi
 80080c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80080c8:	9305      	strmi	r3, [sp, #20]
 80080ca:	2300      	movpl	r3, #0
 80080cc:	2300      	movmi	r3, #0
 80080ce:	9206      	str	r2, [sp, #24]
 80080d0:	bf54      	ite	pl
 80080d2:	9305      	strpl	r3, [sp, #20]
 80080d4:	9306      	strmi	r3, [sp, #24]
 80080d6:	f1bb 0f00 	cmp.w	fp, #0
 80080da:	db3c      	blt.n	8008156 <_dtoa_r+0x24e>
 80080dc:	9b06      	ldr	r3, [sp, #24]
 80080de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80080e2:	445b      	add	r3, fp
 80080e4:	9306      	str	r3, [sp, #24]
 80080e6:	2300      	movs	r3, #0
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	2b09      	cmp	r3, #9
 80080ee:	d868      	bhi.n	80081c2 <_dtoa_r+0x2ba>
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	bfc4      	itt	gt
 80080f4:	3b04      	subgt	r3, #4
 80080f6:	9307      	strgt	r3, [sp, #28]
 80080f8:	9b07      	ldr	r3, [sp, #28]
 80080fa:	f1a3 0302 	sub.w	r3, r3, #2
 80080fe:	bfcc      	ite	gt
 8008100:	2500      	movgt	r5, #0
 8008102:	2501      	movle	r5, #1
 8008104:	2b03      	cmp	r3, #3
 8008106:	f200 8085 	bhi.w	8008214 <_dtoa_r+0x30c>
 800810a:	e8df f003 	tbb	[pc, r3]
 800810e:	3b2e      	.short	0x3b2e
 8008110:	5839      	.short	0x5839
 8008112:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008116:	441d      	add	r5, r3
 8008118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800811c:	2b20      	cmp	r3, #32
 800811e:	bfc1      	itttt	gt
 8008120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008124:	fa08 f803 	lslgt.w	r8, r8, r3
 8008128:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800812c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008130:	bfd6      	itet	le
 8008132:	f1c3 0320 	rsble	r3, r3, #32
 8008136:	ea48 0003 	orrgt.w	r0, r8, r3
 800813a:	fa06 f003 	lslle.w	r0, r6, r3
 800813e:	f7f8 f9e9 	bl	8000514 <__aeabi_ui2d>
 8008142:	2201      	movs	r2, #1
 8008144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008148:	3d01      	subs	r5, #1
 800814a:	920e      	str	r2, [sp, #56]	; 0x38
 800814c:	e76f      	b.n	800802e <_dtoa_r+0x126>
 800814e:	2301      	movs	r3, #1
 8008150:	e7b3      	b.n	80080ba <_dtoa_r+0x1b2>
 8008152:	900c      	str	r0, [sp, #48]	; 0x30
 8008154:	e7b2      	b.n	80080bc <_dtoa_r+0x1b4>
 8008156:	9b05      	ldr	r3, [sp, #20]
 8008158:	eba3 030b 	sub.w	r3, r3, fp
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f1cb 0300 	rsb	r3, fp, #0
 8008162:	9308      	str	r3, [sp, #32]
 8008164:	2300      	movs	r3, #0
 8008166:	930b      	str	r3, [sp, #44]	; 0x2c
 8008168:	e7bf      	b.n	80080ea <_dtoa_r+0x1e2>
 800816a:	2300      	movs	r3, #0
 800816c:	9309      	str	r3, [sp, #36]	; 0x24
 800816e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc52      	bgt.n	800821a <_dtoa_r+0x312>
 8008174:	2301      	movs	r3, #1
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	461a      	mov	r2, r3
 800817c:	920a      	str	r2, [sp, #40]	; 0x28
 800817e:	e00b      	b.n	8008198 <_dtoa_r+0x290>
 8008180:	2301      	movs	r3, #1
 8008182:	e7f3      	b.n	800816c <_dtoa_r+0x264>
 8008184:	2300      	movs	r3, #0
 8008186:	9309      	str	r3, [sp, #36]	; 0x24
 8008188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818a:	445b      	add	r3, fp
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	3301      	adds	r3, #1
 8008190:	2b01      	cmp	r3, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	bfb8      	it	lt
 8008196:	2301      	movlt	r3, #1
 8008198:	69e0      	ldr	r0, [r4, #28]
 800819a:	2100      	movs	r1, #0
 800819c:	2204      	movs	r2, #4
 800819e:	f102 0614 	add.w	r6, r2, #20
 80081a2:	429e      	cmp	r6, r3
 80081a4:	d93d      	bls.n	8008222 <_dtoa_r+0x31a>
 80081a6:	6041      	str	r1, [r0, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fd9f 	bl	8008cec <_Balloc>
 80081ae:	9000      	str	r0, [sp, #0]
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d139      	bne.n	8008228 <_dtoa_r+0x320>
 80081b4:	4b16      	ldr	r3, [pc, #88]	; (8008210 <_dtoa_r+0x308>)
 80081b6:	4602      	mov	r2, r0
 80081b8:	f240 11af 	movw	r1, #431	; 0x1af
 80081bc:	e6bd      	b.n	8007f3a <_dtoa_r+0x32>
 80081be:	2301      	movs	r3, #1
 80081c0:	e7e1      	b.n	8008186 <_dtoa_r+0x27e>
 80081c2:	2501      	movs	r5, #1
 80081c4:	2300      	movs	r3, #0
 80081c6:	9307      	str	r3, [sp, #28]
 80081c8:	9509      	str	r5, [sp, #36]	; 0x24
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	2200      	movs	r2, #0
 80081d4:	2312      	movs	r3, #18
 80081d6:	e7d1      	b.n	800817c <_dtoa_r+0x274>
 80081d8:	636f4361 	.word	0x636f4361
 80081dc:	3fd287a7 	.word	0x3fd287a7
 80081e0:	8b60c8b3 	.word	0x8b60c8b3
 80081e4:	3fc68a28 	.word	0x3fc68a28
 80081e8:	509f79fb 	.word	0x509f79fb
 80081ec:	3fd34413 	.word	0x3fd34413
 80081f0:	08009ff9 	.word	0x08009ff9
 80081f4:	0800a010 	.word	0x0800a010
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	08009ff5 	.word	0x08009ff5
 8008200:	08009fec 	.word	0x08009fec
 8008204:	08009fc9 	.word	0x08009fc9
 8008208:	3ff80000 	.word	0x3ff80000
 800820c:	0800a100 	.word	0x0800a100
 8008210:	0800a068 	.word	0x0800a068
 8008214:	2301      	movs	r3, #1
 8008216:	9309      	str	r3, [sp, #36]	; 0x24
 8008218:	e7d7      	b.n	80081ca <_dtoa_r+0x2c2>
 800821a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	e7ba      	b.n	8008198 <_dtoa_r+0x290>
 8008222:	3101      	adds	r1, #1
 8008224:	0052      	lsls	r2, r2, #1
 8008226:	e7ba      	b.n	800819e <_dtoa_r+0x296>
 8008228:	69e3      	ldr	r3, [r4, #28]
 800822a:	9a00      	ldr	r2, [sp, #0]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	2b0e      	cmp	r3, #14
 8008232:	f200 80a8 	bhi.w	8008386 <_dtoa_r+0x47e>
 8008236:	2d00      	cmp	r5, #0
 8008238:	f000 80a5 	beq.w	8008386 <_dtoa_r+0x47e>
 800823c:	f1bb 0f00 	cmp.w	fp, #0
 8008240:	dd38      	ble.n	80082b4 <_dtoa_r+0x3ac>
 8008242:	4bc0      	ldr	r3, [pc, #768]	; (8008544 <_dtoa_r+0x63c>)
 8008244:	f00b 020f 	and.w	r2, fp, #15
 8008248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800824c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008250:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008254:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008258:	d019      	beq.n	800828e <_dtoa_r+0x386>
 800825a:	4bbb      	ldr	r3, [pc, #748]	; (8008548 <_dtoa_r+0x640>)
 800825c:	ec51 0b18 	vmov	r0, r1, d8
 8008260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008264:	f7f8 fafa 	bl	800085c <__aeabi_ddiv>
 8008268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826c:	f008 080f 	and.w	r8, r8, #15
 8008270:	2503      	movs	r5, #3
 8008272:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008548 <_dtoa_r+0x640>
 8008276:	f1b8 0f00 	cmp.w	r8, #0
 800827a:	d10a      	bne.n	8008292 <_dtoa_r+0x38a>
 800827c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008280:	4632      	mov	r2, r6
 8008282:	463b      	mov	r3, r7
 8008284:	f7f8 faea 	bl	800085c <__aeabi_ddiv>
 8008288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828c:	e02b      	b.n	80082e6 <_dtoa_r+0x3de>
 800828e:	2502      	movs	r5, #2
 8008290:	e7ef      	b.n	8008272 <_dtoa_r+0x36a>
 8008292:	f018 0f01 	tst.w	r8, #1
 8008296:	d008      	beq.n	80082aa <_dtoa_r+0x3a2>
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082a0:	f7f8 f9b2 	bl	8000608 <__aeabi_dmul>
 80082a4:	3501      	adds	r5, #1
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082ae:	f109 0908 	add.w	r9, r9, #8
 80082b2:	e7e0      	b.n	8008276 <_dtoa_r+0x36e>
 80082b4:	f000 809f 	beq.w	80083f6 <_dtoa_r+0x4ee>
 80082b8:	f1cb 0600 	rsb	r6, fp, #0
 80082bc:	4ba1      	ldr	r3, [pc, #644]	; (8008544 <_dtoa_r+0x63c>)
 80082be:	4fa2      	ldr	r7, [pc, #648]	; (8008548 <_dtoa_r+0x640>)
 80082c0:	f006 020f 	and.w	r2, r6, #15
 80082c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	ec51 0b18 	vmov	r0, r1, d8
 80082d0:	f7f8 f99a 	bl	8000608 <__aeabi_dmul>
 80082d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d8:	1136      	asrs	r6, r6, #4
 80082da:	2300      	movs	r3, #0
 80082dc:	2502      	movs	r5, #2
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d17e      	bne.n	80083e0 <_dtoa_r+0x4d8>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d0      	bne.n	8008288 <_dtoa_r+0x380>
 80082e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8084 	beq.w	80083fa <_dtoa_r+0x4f2>
 80082f2:	4b96      	ldr	r3, [pc, #600]	; (800854c <_dtoa_r+0x644>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f8 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d07b      	beq.n	80083fa <_dtoa_r+0x4f2>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d078      	beq.n	80083fa <_dtoa_r+0x4f2>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dd39      	ble.n	8008382 <_dtoa_r+0x47a>
 800830e:	4b90      	ldr	r3, [pc, #576]	; (8008550 <_dtoa_r+0x648>)
 8008310:	2200      	movs	r2, #0
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800831e:	9e01      	ldr	r6, [sp, #4]
 8008320:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008324:	3501      	adds	r5, #1
 8008326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800832a:	4628      	mov	r0, r5
 800832c:	f7f8 f902 	bl	8000534 <__aeabi_i2d>
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	f7f8 f968 	bl	8000608 <__aeabi_dmul>
 8008338:	4b86      	ldr	r3, [pc, #536]	; (8008554 <_dtoa_r+0x64c>)
 800833a:	2200      	movs	r2, #0
 800833c:	f7f7 ffae 	bl	800029c <__adddf3>
 8008340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	2e00      	cmp	r6, #0
 800834c:	d158      	bne.n	8008400 <_dtoa_r+0x4f8>
 800834e:	4b82      	ldr	r3, [pc, #520]	; (8008558 <_dtoa_r+0x650>)
 8008350:	2200      	movs	r2, #0
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f7 ff9f 	bl	8000298 <__aeabi_dsub>
 800835a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800835e:	4680      	mov	r8, r0
 8008360:	4689      	mov	r9, r1
 8008362:	f7f8 fbe1 	bl	8000b28 <__aeabi_dcmpgt>
 8008366:	2800      	cmp	r0, #0
 8008368:	f040 8296 	bne.w	8008898 <_dtoa_r+0x990>
 800836c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008370:	4640      	mov	r0, r8
 8008372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	f040 8289 	bne.w	8008894 <_dtoa_r+0x98c>
 8008382:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008388:	2b00      	cmp	r3, #0
 800838a:	f2c0 814e 	blt.w	800862a <_dtoa_r+0x722>
 800838e:	f1bb 0f0e 	cmp.w	fp, #14
 8008392:	f300 814a 	bgt.w	800862a <_dtoa_r+0x722>
 8008396:	4b6b      	ldr	r3, [pc, #428]	; (8008544 <_dtoa_r+0x63c>)
 8008398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800839c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f280 80dc 	bge.w	8008560 <_dtoa_r+0x658>
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f300 80d8 	bgt.w	8008560 <_dtoa_r+0x658>
 80083b0:	f040 826f 	bne.w	8008892 <_dtoa_r+0x98a>
 80083b4:	4b68      	ldr	r3, [pc, #416]	; (8008558 <_dtoa_r+0x650>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f8 f924 	bl	8000608 <__aeabi_dmul>
 80083c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c4:	f7f8 fba6 	bl	8000b14 <__aeabi_dcmpge>
 80083c8:	9e04      	ldr	r6, [sp, #16]
 80083ca:	4637      	mov	r7, r6
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 8245 	bne.w	800885c <_dtoa_r+0x954>
 80083d2:	9d00      	ldr	r5, [sp, #0]
 80083d4:	2331      	movs	r3, #49	; 0x31
 80083d6:	f805 3b01 	strb.w	r3, [r5], #1
 80083da:	f10b 0b01 	add.w	fp, fp, #1
 80083de:	e241      	b.n	8008864 <_dtoa_r+0x95c>
 80083e0:	07f2      	lsls	r2, r6, #31
 80083e2:	d505      	bpl.n	80083f0 <_dtoa_r+0x4e8>
 80083e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e8:	f7f8 f90e 	bl	8000608 <__aeabi_dmul>
 80083ec:	3501      	adds	r5, #1
 80083ee:	2301      	movs	r3, #1
 80083f0:	1076      	asrs	r6, r6, #1
 80083f2:	3708      	adds	r7, #8
 80083f4:	e773      	b.n	80082de <_dtoa_r+0x3d6>
 80083f6:	2502      	movs	r5, #2
 80083f8:	e775      	b.n	80082e6 <_dtoa_r+0x3de>
 80083fa:	9e04      	ldr	r6, [sp, #16]
 80083fc:	465f      	mov	r7, fp
 80083fe:	e792      	b.n	8008326 <_dtoa_r+0x41e>
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	4b50      	ldr	r3, [pc, #320]	; (8008544 <_dtoa_r+0x63c>)
 8008404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008408:	4431      	add	r1, r6
 800840a:	9102      	str	r1, [sp, #8]
 800840c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800840e:	eeb0 9a47 	vmov.f32	s18, s14
 8008412:	eef0 9a67 	vmov.f32	s19, s15
 8008416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800841a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800841e:	2900      	cmp	r1, #0
 8008420:	d044      	beq.n	80084ac <_dtoa_r+0x5a4>
 8008422:	494e      	ldr	r1, [pc, #312]	; (800855c <_dtoa_r+0x654>)
 8008424:	2000      	movs	r0, #0
 8008426:	f7f8 fa19 	bl	800085c <__aeabi_ddiv>
 800842a:	ec53 2b19 	vmov	r2, r3, d9
 800842e:	f7f7 ff33 	bl	8000298 <__aeabi_dsub>
 8008432:	9d00      	ldr	r5, [sp, #0]
 8008434:	ec41 0b19 	vmov	d9, r0, r1
 8008438:	4649      	mov	r1, r9
 800843a:	4640      	mov	r0, r8
 800843c:	f7f8 fb94 	bl	8000b68 <__aeabi_d2iz>
 8008440:	4606      	mov	r6, r0
 8008442:	f7f8 f877 	bl	8000534 <__aeabi_i2d>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f7 ff23 	bl	8000298 <__aeabi_dsub>
 8008452:	3630      	adds	r6, #48	; 0x30
 8008454:	f805 6b01 	strb.w	r6, [r5], #1
 8008458:	ec53 2b19 	vmov	r2, r3, d9
 800845c:	4680      	mov	r8, r0
 800845e:	4689      	mov	r9, r1
 8008460:	f7f8 fb44 	bl	8000aec <__aeabi_dcmplt>
 8008464:	2800      	cmp	r0, #0
 8008466:	d164      	bne.n	8008532 <_dtoa_r+0x62a>
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	4937      	ldr	r1, [pc, #220]	; (800854c <_dtoa_r+0x644>)
 800846e:	2000      	movs	r0, #0
 8008470:	f7f7 ff12 	bl	8000298 <__aeabi_dsub>
 8008474:	ec53 2b19 	vmov	r2, r3, d9
 8008478:	f7f8 fb38 	bl	8000aec <__aeabi_dcmplt>
 800847c:	2800      	cmp	r0, #0
 800847e:	f040 80b6 	bne.w	80085ee <_dtoa_r+0x6e6>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	429d      	cmp	r5, r3
 8008486:	f43f af7c 	beq.w	8008382 <_dtoa_r+0x47a>
 800848a:	4b31      	ldr	r3, [pc, #196]	; (8008550 <_dtoa_r+0x648>)
 800848c:	ec51 0b19 	vmov	r0, r1, d9
 8008490:	2200      	movs	r2, #0
 8008492:	f7f8 f8b9 	bl	8000608 <__aeabi_dmul>
 8008496:	4b2e      	ldr	r3, [pc, #184]	; (8008550 <_dtoa_r+0x648>)
 8008498:	ec41 0b19 	vmov	d9, r0, r1
 800849c:	2200      	movs	r2, #0
 800849e:	4640      	mov	r0, r8
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7f8 f8b1 	bl	8000608 <__aeabi_dmul>
 80084a6:	4680      	mov	r8, r0
 80084a8:	4689      	mov	r9, r1
 80084aa:	e7c5      	b.n	8008438 <_dtoa_r+0x530>
 80084ac:	ec51 0b17 	vmov	r0, r1, d7
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	9d00      	ldr	r5, [sp, #0]
 80084b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80084ba:	ec41 0b19 	vmov	d9, r0, r1
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	f7f8 fb51 	bl	8000b68 <__aeabi_d2iz>
 80084c6:	4606      	mov	r6, r0
 80084c8:	f7f8 f834 	bl	8000534 <__aeabi_i2d>
 80084cc:	3630      	adds	r6, #48	; 0x30
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4640      	mov	r0, r8
 80084d4:	4649      	mov	r1, r9
 80084d6:	f7f7 fedf 	bl	8000298 <__aeabi_dsub>
 80084da:	f805 6b01 	strb.w	r6, [r5], #1
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	429d      	cmp	r5, r3
 80084e2:	4680      	mov	r8, r0
 80084e4:	4689      	mov	r9, r1
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	d124      	bne.n	8008536 <_dtoa_r+0x62e>
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <_dtoa_r+0x654>)
 80084ee:	ec51 0b19 	vmov	r0, r1, d9
 80084f2:	f7f7 fed3 	bl	800029c <__adddf3>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8008502:	2800      	cmp	r0, #0
 8008504:	d173      	bne.n	80085ee <_dtoa_r+0x6e6>
 8008506:	ec53 2b19 	vmov	r2, r3, d9
 800850a:	4914      	ldr	r1, [pc, #80]	; (800855c <_dtoa_r+0x654>)
 800850c:	2000      	movs	r0, #0
 800850e:	f7f7 fec3 	bl	8000298 <__aeabi_dsub>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f8 fae7 	bl	8000aec <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f af2f 	beq.w	8008382 <_dtoa_r+0x47a>
 8008524:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008526:	1e6b      	subs	r3, r5, #1
 8008528:	930f      	str	r3, [sp, #60]	; 0x3c
 800852a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800852e:	2b30      	cmp	r3, #48	; 0x30
 8008530:	d0f8      	beq.n	8008524 <_dtoa_r+0x61c>
 8008532:	46bb      	mov	fp, r7
 8008534:	e04a      	b.n	80085cc <_dtoa_r+0x6c4>
 8008536:	4b06      	ldr	r3, [pc, #24]	; (8008550 <_dtoa_r+0x648>)
 8008538:	f7f8 f866 	bl	8000608 <__aeabi_dmul>
 800853c:	4680      	mov	r8, r0
 800853e:	4689      	mov	r9, r1
 8008540:	e7bd      	b.n	80084be <_dtoa_r+0x5b6>
 8008542:	bf00      	nop
 8008544:	0800a100 	.word	0x0800a100
 8008548:	0800a0d8 	.word	0x0800a0d8
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	40240000 	.word	0x40240000
 8008554:	401c0000 	.word	0x401c0000
 8008558:	40140000 	.word	0x40140000
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008564:	9d00      	ldr	r5, [sp, #0]
 8008566:	4642      	mov	r2, r8
 8008568:	464b      	mov	r3, r9
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f8 f975 	bl	800085c <__aeabi_ddiv>
 8008572:	f7f8 faf9 	bl	8000b68 <__aeabi_d2iz>
 8008576:	9001      	str	r0, [sp, #4]
 8008578:	f7f7 ffdc 	bl	8000534 <__aeabi_i2d>
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	f7f8 f842 	bl	8000608 <__aeabi_dmul>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	9e01      	ldr	r6, [sp, #4]
 8008592:	9f04      	ldr	r7, [sp, #16]
 8008594:	3630      	adds	r6, #48	; 0x30
 8008596:	f805 6b01 	strb.w	r6, [r5], #1
 800859a:	9e00      	ldr	r6, [sp, #0]
 800859c:	1bae      	subs	r6, r5, r6
 800859e:	42b7      	cmp	r7, r6
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	d134      	bne.n	8008610 <_dtoa_r+0x708>
 80085a6:	f7f7 fe79 	bl	800029c <__adddf3>
 80085aa:	4642      	mov	r2, r8
 80085ac:	464b      	mov	r3, r9
 80085ae:	4606      	mov	r6, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	f7f8 fab9 	bl	8000b28 <__aeabi_dcmpgt>
 80085b6:	b9c8      	cbnz	r0, 80085ec <_dtoa_r+0x6e4>
 80085b8:	4642      	mov	r2, r8
 80085ba:	464b      	mov	r3, r9
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f8 fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80085c4:	b110      	cbz	r0, 80085cc <_dtoa_r+0x6c4>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	07db      	lsls	r3, r3, #31
 80085ca:	d40f      	bmi.n	80085ec <_dtoa_r+0x6e4>
 80085cc:	4651      	mov	r1, sl
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fbcc 	bl	8008d6c <_Bfree>
 80085d4:	2300      	movs	r3, #0
 80085d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085d8:	702b      	strb	r3, [r5, #0]
 80085da:	f10b 0301 	add.w	r3, fp, #1
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f43f ace2 	beq.w	8007fac <_dtoa_r+0xa4>
 80085e8:	601d      	str	r5, [r3, #0]
 80085ea:	e4df      	b.n	8007fac <_dtoa_r+0xa4>
 80085ec:	465f      	mov	r7, fp
 80085ee:	462b      	mov	r3, r5
 80085f0:	461d      	mov	r5, r3
 80085f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085f6:	2a39      	cmp	r2, #57	; 0x39
 80085f8:	d106      	bne.n	8008608 <_dtoa_r+0x700>
 80085fa:	9a00      	ldr	r2, [sp, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d1f7      	bne.n	80085f0 <_dtoa_r+0x6e8>
 8008600:	9900      	ldr	r1, [sp, #0]
 8008602:	2230      	movs	r2, #48	; 0x30
 8008604:	3701      	adds	r7, #1
 8008606:	700a      	strb	r2, [r1, #0]
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	3201      	adds	r2, #1
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e790      	b.n	8008532 <_dtoa_r+0x62a>
 8008610:	4ba3      	ldr	r3, [pc, #652]	; (80088a0 <_dtoa_r+0x998>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	4606      	mov	r6, r0
 800861e:	460f      	mov	r7, r1
 8008620:	f7f8 fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008624:	2800      	cmp	r0, #0
 8008626:	d09e      	beq.n	8008566 <_dtoa_r+0x65e>
 8008628:	e7d0      	b.n	80085cc <_dtoa_r+0x6c4>
 800862a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800862c:	2a00      	cmp	r2, #0
 800862e:	f000 80ca 	beq.w	80087c6 <_dtoa_r+0x8be>
 8008632:	9a07      	ldr	r2, [sp, #28]
 8008634:	2a01      	cmp	r2, #1
 8008636:	f300 80ad 	bgt.w	8008794 <_dtoa_r+0x88c>
 800863a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800863c:	2a00      	cmp	r2, #0
 800863e:	f000 80a5 	beq.w	800878c <_dtoa_r+0x884>
 8008642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008646:	9e08      	ldr	r6, [sp, #32]
 8008648:	9d05      	ldr	r5, [sp, #20]
 800864a:	9a05      	ldr	r2, [sp, #20]
 800864c:	441a      	add	r2, r3
 800864e:	9205      	str	r2, [sp, #20]
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	2101      	movs	r1, #1
 8008654:	441a      	add	r2, r3
 8008656:	4620      	mov	r0, r4
 8008658:	9206      	str	r2, [sp, #24]
 800865a:	f000 fc3d 	bl	8008ed8 <__i2b>
 800865e:	4607      	mov	r7, r0
 8008660:	b165      	cbz	r5, 800867c <_dtoa_r+0x774>
 8008662:	9b06      	ldr	r3, [sp, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	dd09      	ble.n	800867c <_dtoa_r+0x774>
 8008668:	42ab      	cmp	r3, r5
 800866a:	9a05      	ldr	r2, [sp, #20]
 800866c:	bfa8      	it	ge
 800866e:	462b      	movge	r3, r5
 8008670:	1ad2      	subs	r2, r2, r3
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	9a06      	ldr	r2, [sp, #24]
 8008676:	1aed      	subs	r5, r5, r3
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	9306      	str	r3, [sp, #24]
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	b1f3      	cbz	r3, 80086be <_dtoa_r+0x7b6>
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80a3 	beq.w	80087ce <_dtoa_r+0x8c6>
 8008688:	2e00      	cmp	r6, #0
 800868a:	dd10      	ble.n	80086ae <_dtoa_r+0x7a6>
 800868c:	4639      	mov	r1, r7
 800868e:	4632      	mov	r2, r6
 8008690:	4620      	mov	r0, r4
 8008692:	f000 fce1 	bl	8009058 <__pow5mult>
 8008696:	4652      	mov	r2, sl
 8008698:	4601      	mov	r1, r0
 800869a:	4607      	mov	r7, r0
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fc31 	bl	8008f04 <__multiply>
 80086a2:	4651      	mov	r1, sl
 80086a4:	4680      	mov	r8, r0
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 fb60 	bl	8008d6c <_Bfree>
 80086ac:	46c2      	mov	sl, r8
 80086ae:	9b08      	ldr	r3, [sp, #32]
 80086b0:	1b9a      	subs	r2, r3, r6
 80086b2:	d004      	beq.n	80086be <_dtoa_r+0x7b6>
 80086b4:	4651      	mov	r1, sl
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fcce 	bl	8009058 <__pow5mult>
 80086bc:	4682      	mov	sl, r0
 80086be:	2101      	movs	r1, #1
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 fc09 	bl	8008ed8 <__i2b>
 80086c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	4606      	mov	r6, r0
 80086cc:	f340 8081 	ble.w	80087d2 <_dtoa_r+0x8ca>
 80086d0:	461a      	mov	r2, r3
 80086d2:	4601      	mov	r1, r0
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 fcbf 	bl	8009058 <__pow5mult>
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	4606      	mov	r6, r0
 80086e0:	dd7a      	ble.n	80087d8 <_dtoa_r+0x8d0>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	6933      	ldr	r3, [r6, #16]
 80086e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086ec:	6918      	ldr	r0, [r3, #16]
 80086ee:	f000 fba5 	bl	8008e3c <__hi0bits>
 80086f2:	f1c0 0020 	rsb	r0, r0, #32
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	4418      	add	r0, r3
 80086fa:	f010 001f 	ands.w	r0, r0, #31
 80086fe:	f000 8094 	beq.w	800882a <_dtoa_r+0x922>
 8008702:	f1c0 0320 	rsb	r3, r0, #32
 8008706:	2b04      	cmp	r3, #4
 8008708:	f340 8085 	ble.w	8008816 <_dtoa_r+0x90e>
 800870c:	9b05      	ldr	r3, [sp, #20]
 800870e:	f1c0 001c 	rsb	r0, r0, #28
 8008712:	4403      	add	r3, r0
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	4403      	add	r3, r0
 800871a:	4405      	add	r5, r0
 800871c:	9306      	str	r3, [sp, #24]
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dd05      	ble.n	8008730 <_dtoa_r+0x828>
 8008724:	4651      	mov	r1, sl
 8008726:	461a      	mov	r2, r3
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fcef 	bl	800910c <__lshift>
 800872e:	4682      	mov	sl, r0
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x83a>
 8008736:	4631      	mov	r1, r6
 8008738:	461a      	mov	r2, r3
 800873a:	4620      	mov	r0, r4
 800873c:	f000 fce6 	bl	800910c <__lshift>
 8008740:	4606      	mov	r6, r0
 8008742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008744:	2b00      	cmp	r3, #0
 8008746:	d072      	beq.n	800882e <_dtoa_r+0x926>
 8008748:	4631      	mov	r1, r6
 800874a:	4650      	mov	r0, sl
 800874c:	f000 fd4a 	bl	80091e4 <__mcmp>
 8008750:	2800      	cmp	r0, #0
 8008752:	da6c      	bge.n	800882e <_dtoa_r+0x926>
 8008754:	2300      	movs	r3, #0
 8008756:	4651      	mov	r1, sl
 8008758:	220a      	movs	r2, #10
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fb28 	bl	8008db0 <__multadd>
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008766:	4682      	mov	sl, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 81b0 	beq.w	8008ace <_dtoa_r+0xbc6>
 800876e:	2300      	movs	r3, #0
 8008770:	4639      	mov	r1, r7
 8008772:	220a      	movs	r2, #10
 8008774:	4620      	mov	r0, r4
 8008776:	f000 fb1b 	bl	8008db0 <__multadd>
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	4607      	mov	r7, r0
 8008780:	f300 8096 	bgt.w	80088b0 <_dtoa_r+0x9a8>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	2b02      	cmp	r3, #2
 8008788:	dc59      	bgt.n	800883e <_dtoa_r+0x936>
 800878a:	e091      	b.n	80088b0 <_dtoa_r+0x9a8>
 800878c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800878e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008792:	e758      	b.n	8008646 <_dtoa_r+0x73e>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	1e5e      	subs	r6, r3, #1
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	42b3      	cmp	r3, r6
 800879c:	bfbf      	itttt	lt
 800879e:	9b08      	ldrlt	r3, [sp, #32]
 80087a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80087a2:	9608      	strlt	r6, [sp, #32]
 80087a4:	1af3      	sublt	r3, r6, r3
 80087a6:	bfb4      	ite	lt
 80087a8:	18d2      	addlt	r2, r2, r3
 80087aa:	1b9e      	subge	r6, r3, r6
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	bfbc      	itt	lt
 80087b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80087b2:	2600      	movlt	r6, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfb7      	itett	lt
 80087b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80087bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80087c0:	1a9d      	sublt	r5, r3, r2
 80087c2:	2300      	movlt	r3, #0
 80087c4:	e741      	b.n	800864a <_dtoa_r+0x742>
 80087c6:	9e08      	ldr	r6, [sp, #32]
 80087c8:	9d05      	ldr	r5, [sp, #20]
 80087ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80087cc:	e748      	b.n	8008660 <_dtoa_r+0x758>
 80087ce:	9a08      	ldr	r2, [sp, #32]
 80087d0:	e770      	b.n	80086b4 <_dtoa_r+0x7ac>
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	dc19      	bgt.n	800880c <_dtoa_r+0x904>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	b9bb      	cbnz	r3, 800880c <_dtoa_r+0x904>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e2:	b99b      	cbnz	r3, 800880c <_dtoa_r+0x904>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	0d1b      	lsrs	r3, r3, #20
 80087ec:	051b      	lsls	r3, r3, #20
 80087ee:	b183      	cbz	r3, 8008812 <_dtoa_r+0x90a>
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	3301      	adds	r3, #1
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	3301      	adds	r3, #1
 80087fa:	9306      	str	r3, [sp, #24]
 80087fc:	f04f 0801 	mov.w	r8, #1
 8008800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f af6f 	bne.w	80086e6 <_dtoa_r+0x7de>
 8008808:	2001      	movs	r0, #1
 800880a:	e774      	b.n	80086f6 <_dtoa_r+0x7ee>
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	e7f6      	b.n	8008800 <_dtoa_r+0x8f8>
 8008812:	4698      	mov	r8, r3
 8008814:	e7f4      	b.n	8008800 <_dtoa_r+0x8f8>
 8008816:	d082      	beq.n	800871e <_dtoa_r+0x816>
 8008818:	9a05      	ldr	r2, [sp, #20]
 800881a:	331c      	adds	r3, #28
 800881c:	441a      	add	r2, r3
 800881e:	9205      	str	r2, [sp, #20]
 8008820:	9a06      	ldr	r2, [sp, #24]
 8008822:	441a      	add	r2, r3
 8008824:	441d      	add	r5, r3
 8008826:	9206      	str	r2, [sp, #24]
 8008828:	e779      	b.n	800871e <_dtoa_r+0x816>
 800882a:	4603      	mov	r3, r0
 800882c:	e7f4      	b.n	8008818 <_dtoa_r+0x910>
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc37      	bgt.n	80088a4 <_dtoa_r+0x99c>
 8008834:	9b07      	ldr	r3, [sp, #28]
 8008836:	2b02      	cmp	r3, #2
 8008838:	dd34      	ble.n	80088a4 <_dtoa_r+0x99c>
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	b963      	cbnz	r3, 800885c <_dtoa_r+0x954>
 8008842:	4631      	mov	r1, r6
 8008844:	2205      	movs	r2, #5
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fab2 	bl	8008db0 <__multadd>
 800884c:	4601      	mov	r1, r0
 800884e:	4606      	mov	r6, r0
 8008850:	4650      	mov	r0, sl
 8008852:	f000 fcc7 	bl	80091e4 <__mcmp>
 8008856:	2800      	cmp	r0, #0
 8008858:	f73f adbb 	bgt.w	80083d2 <_dtoa_r+0x4ca>
 800885c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885e:	9d00      	ldr	r5, [sp, #0]
 8008860:	ea6f 0b03 	mvn.w	fp, r3
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	4631      	mov	r1, r6
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fa7e 	bl	8008d6c <_Bfree>
 8008870:	2f00      	cmp	r7, #0
 8008872:	f43f aeab 	beq.w	80085cc <_dtoa_r+0x6c4>
 8008876:	f1b8 0f00 	cmp.w	r8, #0
 800887a:	d005      	beq.n	8008888 <_dtoa_r+0x980>
 800887c:	45b8      	cmp	r8, r7
 800887e:	d003      	beq.n	8008888 <_dtoa_r+0x980>
 8008880:	4641      	mov	r1, r8
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fa72 	bl	8008d6c <_Bfree>
 8008888:	4639      	mov	r1, r7
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fa6e 	bl	8008d6c <_Bfree>
 8008890:	e69c      	b.n	80085cc <_dtoa_r+0x6c4>
 8008892:	2600      	movs	r6, #0
 8008894:	4637      	mov	r7, r6
 8008896:	e7e1      	b.n	800885c <_dtoa_r+0x954>
 8008898:	46bb      	mov	fp, r7
 800889a:	4637      	mov	r7, r6
 800889c:	e599      	b.n	80083d2 <_dtoa_r+0x4ca>
 800889e:	bf00      	nop
 80088a0:	40240000 	.word	0x40240000
 80088a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 80c8 	beq.w	8008a3c <_dtoa_r+0xb34>
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	dd05      	ble.n	80088c0 <_dtoa_r+0x9b8>
 80088b4:	4639      	mov	r1, r7
 80088b6:	462a      	mov	r2, r5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fc27 	bl	800910c <__lshift>
 80088be:	4607      	mov	r7, r0
 80088c0:	f1b8 0f00 	cmp.w	r8, #0
 80088c4:	d05b      	beq.n	800897e <_dtoa_r+0xa76>
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fa0f 	bl	8008cec <_Balloc>
 80088ce:	4605      	mov	r5, r0
 80088d0:	b928      	cbnz	r0, 80088de <_dtoa_r+0x9d6>
 80088d2:	4b83      	ldr	r3, [pc, #524]	; (8008ae0 <_dtoa_r+0xbd8>)
 80088d4:	4602      	mov	r2, r0
 80088d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80088da:	f7ff bb2e 	b.w	8007f3a <_dtoa_r+0x32>
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	3202      	adds	r2, #2
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	f107 010c 	add.w	r1, r7, #12
 80088e8:	300c      	adds	r0, #12
 80088ea:	f000 ffab 	bl	8009844 <memcpy>
 80088ee:	2201      	movs	r2, #1
 80088f0:	4629      	mov	r1, r5
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 fc0a 	bl	800910c <__lshift>
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	3301      	adds	r3, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008902:	4413      	add	r3, r2
 8008904:	9308      	str	r3, [sp, #32]
 8008906:	9b02      	ldr	r3, [sp, #8]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	46b8      	mov	r8, r7
 800890e:	9306      	str	r3, [sp, #24]
 8008910:	4607      	mov	r7, r0
 8008912:	9b04      	ldr	r3, [sp, #16]
 8008914:	4631      	mov	r1, r6
 8008916:	3b01      	subs	r3, #1
 8008918:	4650      	mov	r0, sl
 800891a:	9301      	str	r3, [sp, #4]
 800891c:	f7ff fa6a 	bl	8007df4 <quorem>
 8008920:	4641      	mov	r1, r8
 8008922:	9002      	str	r0, [sp, #8]
 8008924:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008928:	4650      	mov	r0, sl
 800892a:	f000 fc5b 	bl	80091e4 <__mcmp>
 800892e:	463a      	mov	r2, r7
 8008930:	9005      	str	r0, [sp, #20]
 8008932:	4631      	mov	r1, r6
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fc71 	bl	800921c <__mdiff>
 800893a:	68c2      	ldr	r2, [r0, #12]
 800893c:	4605      	mov	r5, r0
 800893e:	bb02      	cbnz	r2, 8008982 <_dtoa_r+0xa7a>
 8008940:	4601      	mov	r1, r0
 8008942:	4650      	mov	r0, sl
 8008944:	f000 fc4e 	bl	80091e4 <__mcmp>
 8008948:	4602      	mov	r2, r0
 800894a:	4629      	mov	r1, r5
 800894c:	4620      	mov	r0, r4
 800894e:	9209      	str	r2, [sp, #36]	; 0x24
 8008950:	f000 fa0c 	bl	8008d6c <_Bfree>
 8008954:	9b07      	ldr	r3, [sp, #28]
 8008956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008958:	9d04      	ldr	r5, [sp, #16]
 800895a:	ea43 0102 	orr.w	r1, r3, r2
 800895e:	9b06      	ldr	r3, [sp, #24]
 8008960:	4319      	orrs	r1, r3
 8008962:	d110      	bne.n	8008986 <_dtoa_r+0xa7e>
 8008964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008968:	d029      	beq.n	80089be <_dtoa_r+0xab6>
 800896a:	9b05      	ldr	r3, [sp, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	dd02      	ble.n	8008976 <_dtoa_r+0xa6e>
 8008970:	9b02      	ldr	r3, [sp, #8]
 8008972:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	f883 9000 	strb.w	r9, [r3]
 800897c:	e774      	b.n	8008868 <_dtoa_r+0x960>
 800897e:	4638      	mov	r0, r7
 8008980:	e7ba      	b.n	80088f8 <_dtoa_r+0x9f0>
 8008982:	2201      	movs	r2, #1
 8008984:	e7e1      	b.n	800894a <_dtoa_r+0xa42>
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	db04      	blt.n	8008996 <_dtoa_r+0xa8e>
 800898c:	9907      	ldr	r1, [sp, #28]
 800898e:	430b      	orrs	r3, r1
 8008990:	9906      	ldr	r1, [sp, #24]
 8008992:	430b      	orrs	r3, r1
 8008994:	d120      	bne.n	80089d8 <_dtoa_r+0xad0>
 8008996:	2a00      	cmp	r2, #0
 8008998:	dded      	ble.n	8008976 <_dtoa_r+0xa6e>
 800899a:	4651      	mov	r1, sl
 800899c:	2201      	movs	r2, #1
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fbb4 	bl	800910c <__lshift>
 80089a4:	4631      	mov	r1, r6
 80089a6:	4682      	mov	sl, r0
 80089a8:	f000 fc1c 	bl	80091e4 <__mcmp>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	dc03      	bgt.n	80089b8 <_dtoa_r+0xab0>
 80089b0:	d1e1      	bne.n	8008976 <_dtoa_r+0xa6e>
 80089b2:	f019 0f01 	tst.w	r9, #1
 80089b6:	d0de      	beq.n	8008976 <_dtoa_r+0xa6e>
 80089b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089bc:	d1d8      	bne.n	8008970 <_dtoa_r+0xa68>
 80089be:	9a01      	ldr	r2, [sp, #4]
 80089c0:	2339      	movs	r3, #57	; 0x39
 80089c2:	7013      	strb	r3, [r2, #0]
 80089c4:	462b      	mov	r3, r5
 80089c6:	461d      	mov	r5, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ce:	2a39      	cmp	r2, #57	; 0x39
 80089d0:	d06c      	beq.n	8008aac <_dtoa_r+0xba4>
 80089d2:	3201      	adds	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e747      	b.n	8008868 <_dtoa_r+0x960>
 80089d8:	2a00      	cmp	r2, #0
 80089da:	dd07      	ble.n	80089ec <_dtoa_r+0xae4>
 80089dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089e0:	d0ed      	beq.n	80089be <_dtoa_r+0xab6>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	f109 0301 	add.w	r3, r9, #1
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	e73d      	b.n	8008868 <_dtoa_r+0x960>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	9a08      	ldr	r2, [sp, #32]
 80089f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d043      	beq.n	8008a80 <_dtoa_r+0xb78>
 80089f8:	4651      	mov	r1, sl
 80089fa:	2300      	movs	r3, #0
 80089fc:	220a      	movs	r2, #10
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f9d6 	bl	8008db0 <__multadd>
 8008a04:	45b8      	cmp	r8, r7
 8008a06:	4682      	mov	sl, r0
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	f04f 020a 	mov.w	r2, #10
 8008a10:	4641      	mov	r1, r8
 8008a12:	4620      	mov	r0, r4
 8008a14:	d107      	bne.n	8008a26 <_dtoa_r+0xb1e>
 8008a16:	f000 f9cb 	bl	8008db0 <__multadd>
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	e775      	b.n	8008912 <_dtoa_r+0xa0a>
 8008a26:	f000 f9c3 	bl	8008db0 <__multadd>
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	220a      	movs	r2, #10
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 f9bc 	bl	8008db0 <__multadd>
 8008a38:	4607      	mov	r7, r0
 8008a3a:	e7f0      	b.n	8008a1e <_dtoa_r+0xb16>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	9d00      	ldr	r5, [sp, #0]
 8008a42:	4631      	mov	r1, r6
 8008a44:	4650      	mov	r0, sl
 8008a46:	f7ff f9d5 	bl	8007df4 <quorem>
 8008a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	f805 9b01 	strb.w	r9, [r5], #1
 8008a54:	1aea      	subs	r2, r5, r3
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	dd07      	ble.n	8008a6c <_dtoa_r+0xb64>
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 f9a4 	bl	8008db0 <__multadd>
 8008a68:	4682      	mov	sl, r0
 8008a6a:	e7ea      	b.n	8008a42 <_dtoa_r+0xb3a>
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfc8      	it	gt
 8008a72:	461d      	movgt	r5, r3
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	bfd8      	it	le
 8008a78:	2501      	movle	r5, #1
 8008a7a:	441d      	add	r5, r3
 8008a7c:	f04f 0800 	mov.w	r8, #0
 8008a80:	4651      	mov	r1, sl
 8008a82:	2201      	movs	r2, #1
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fb41 	bl	800910c <__lshift>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	f000 fba9 	bl	80091e4 <__mcmp>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	dc96      	bgt.n	80089c4 <_dtoa_r+0xabc>
 8008a96:	d102      	bne.n	8008a9e <_dtoa_r+0xb96>
 8008a98:	f019 0f01 	tst.w	r9, #1
 8008a9c:	d192      	bne.n	80089c4 <_dtoa_r+0xabc>
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	461d      	mov	r5, r3
 8008aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aa6:	2a30      	cmp	r2, #48	; 0x30
 8008aa8:	d0fa      	beq.n	8008aa0 <_dtoa_r+0xb98>
 8008aaa:	e6dd      	b.n	8008868 <_dtoa_r+0x960>
 8008aac:	9a00      	ldr	r2, [sp, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d189      	bne.n	80089c6 <_dtoa_r+0xabe>
 8008ab2:	f10b 0b01 	add.w	fp, fp, #1
 8008ab6:	2331      	movs	r3, #49	; 0x31
 8008ab8:	e796      	b.n	80089e8 <_dtoa_r+0xae0>
 8008aba:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <_dtoa_r+0xbdc>)
 8008abc:	f7ff ba99 	b.w	8007ff2 <_dtoa_r+0xea>
 8008ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f47f aa6d 	bne.w	8007fa2 <_dtoa_r+0x9a>
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <_dtoa_r+0xbe0>)
 8008aca:	f7ff ba92 	b.w	8007ff2 <_dtoa_r+0xea>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dcb5      	bgt.n	8008a40 <_dtoa_r+0xb38>
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	f73f aeb1 	bgt.w	800883e <_dtoa_r+0x936>
 8008adc:	e7b0      	b.n	8008a40 <_dtoa_r+0xb38>
 8008ade:	bf00      	nop
 8008ae0:	0800a068 	.word	0x0800a068
 8008ae4:	08009fc8 	.word	0x08009fc8
 8008ae8:	08009fec 	.word	0x08009fec

08008aec <_free_r>:
 8008aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d044      	beq.n	8008b7c <_free_r+0x90>
 8008af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af6:	9001      	str	r0, [sp, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f1a1 0404 	sub.w	r4, r1, #4
 8008afe:	bfb8      	it	lt
 8008b00:	18e4      	addlt	r4, r4, r3
 8008b02:	f000 f8e7 	bl	8008cd4 <__malloc_lock>
 8008b06:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <_free_r+0x94>)
 8008b08:	9801      	ldr	r0, [sp, #4]
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	b933      	cbnz	r3, 8008b1c <_free_r+0x30>
 8008b0e:	6063      	str	r3, [r4, #4]
 8008b10:	6014      	str	r4, [r2, #0]
 8008b12:	b003      	add	sp, #12
 8008b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b18:	f000 b8e2 	b.w	8008ce0 <__malloc_unlock>
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d908      	bls.n	8008b32 <_free_r+0x46>
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf01      	itttt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	1949      	addeq	r1, r1, r5
 8008b2e:	6021      	streq	r1, [r4, #0]
 8008b30:	e7ed      	b.n	8008b0e <_free_r+0x22>
 8008b32:	461a      	mov	r2, r3
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	b10b      	cbz	r3, 8008b3c <_free_r+0x50>
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d9fa      	bls.n	8008b32 <_free_r+0x46>
 8008b3c:	6811      	ldr	r1, [r2, #0]
 8008b3e:	1855      	adds	r5, r2, r1
 8008b40:	42a5      	cmp	r5, r4
 8008b42:	d10b      	bne.n	8008b5c <_free_r+0x70>
 8008b44:	6824      	ldr	r4, [r4, #0]
 8008b46:	4421      	add	r1, r4
 8008b48:	1854      	adds	r4, r2, r1
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	6011      	str	r1, [r2, #0]
 8008b4e:	d1e0      	bne.n	8008b12 <_free_r+0x26>
 8008b50:	681c      	ldr	r4, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	6053      	str	r3, [r2, #4]
 8008b56:	440c      	add	r4, r1
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	e7da      	b.n	8008b12 <_free_r+0x26>
 8008b5c:	d902      	bls.n	8008b64 <_free_r+0x78>
 8008b5e:	230c      	movs	r3, #12
 8008b60:	6003      	str	r3, [r0, #0]
 8008b62:	e7d6      	b.n	8008b12 <_free_r+0x26>
 8008b64:	6825      	ldr	r5, [r4, #0]
 8008b66:	1961      	adds	r1, r4, r5
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf04      	itt	eq
 8008b6c:	6819      	ldreq	r1, [r3, #0]
 8008b6e:	685b      	ldreq	r3, [r3, #4]
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	bf04      	itt	eq
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	6054      	str	r4, [r2, #4]
 8008b7a:	e7ca      	b.n	8008b12 <_free_r+0x26>
 8008b7c:	b003      	add	sp, #12
 8008b7e:	bd30      	pop	{r4, r5, pc}
 8008b80:	20000540 	.word	0x20000540

08008b84 <malloc>:
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <malloc+0xc>)
 8008b86:	4601      	mov	r1, r0
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f000 b823 	b.w	8008bd4 <_malloc_r>
 8008b8e:	bf00      	nop
 8008b90:	20000070 	.word	0x20000070

08008b94 <sbrk_aligned>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4e0e      	ldr	r6, [pc, #56]	; (8008bd0 <sbrk_aligned+0x3c>)
 8008b98:	460c      	mov	r4, r1
 8008b9a:	6831      	ldr	r1, [r6, #0]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b911      	cbnz	r1, 8008ba6 <sbrk_aligned+0x12>
 8008ba0:	f000 fe40 	bl	8009824 <_sbrk_r>
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fe3b 	bl	8009824 <_sbrk_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d00a      	beq.n	8008bc8 <sbrk_aligned+0x34>
 8008bb2:	1cc4      	adds	r4, r0, #3
 8008bb4:	f024 0403 	bic.w	r4, r4, #3
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d007      	beq.n	8008bcc <sbrk_aligned+0x38>
 8008bbc:	1a21      	subs	r1, r4, r0
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fe30 	bl	8009824 <_sbrk_r>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d101      	bne.n	8008bcc <sbrk_aligned+0x38>
 8008bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8008bcc:	4620      	mov	r0, r4
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	20000544 	.word	0x20000544

08008bd4 <_malloc_r>:
 8008bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	1ccd      	adds	r5, r1, #3
 8008bda:	f025 0503 	bic.w	r5, r5, #3
 8008bde:	3508      	adds	r5, #8
 8008be0:	2d0c      	cmp	r5, #12
 8008be2:	bf38      	it	cc
 8008be4:	250c      	movcc	r5, #12
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	4607      	mov	r7, r0
 8008bea:	db01      	blt.n	8008bf0 <_malloc_r+0x1c>
 8008bec:	42a9      	cmp	r1, r5
 8008bee:	d905      	bls.n	8008bfc <_malloc_r+0x28>
 8008bf0:	230c      	movs	r3, #12
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cd0 <_malloc_r+0xfc>
 8008c00:	f000 f868 	bl	8008cd4 <__malloc_lock>
 8008c04:	f8d8 3000 	ldr.w	r3, [r8]
 8008c08:	461c      	mov	r4, r3
 8008c0a:	bb5c      	cbnz	r4, 8008c64 <_malloc_r+0x90>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f7ff ffc0 	bl	8008b94 <sbrk_aligned>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	4604      	mov	r4, r0
 8008c18:	d155      	bne.n	8008cc6 <_malloc_r+0xf2>
 8008c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8008c1e:	4626      	mov	r6, r4
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	d145      	bne.n	8008cb0 <_malloc_r+0xdc>
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	d048      	beq.n	8008cba <_malloc_r+0xe6>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	eb04 0903 	add.w	r9, r4, r3
 8008c32:	f000 fdf7 	bl	8009824 <_sbrk_r>
 8008c36:	4581      	cmp	r9, r0
 8008c38:	d13f      	bne.n	8008cba <_malloc_r+0xe6>
 8008c3a:	6821      	ldr	r1, [r4, #0]
 8008c3c:	1a6d      	subs	r5, r5, r1
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4638      	mov	r0, r7
 8008c42:	f7ff ffa7 	bl	8008b94 <sbrk_aligned>
 8008c46:	3001      	adds	r0, #1
 8008c48:	d037      	beq.n	8008cba <_malloc_r+0xe6>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	442b      	add	r3, r5
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	f8d8 3000 	ldr.w	r3, [r8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d038      	beq.n	8008cca <_malloc_r+0xf6>
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	42a2      	cmp	r2, r4
 8008c5c:	d12b      	bne.n	8008cb6 <_malloc_r+0xe2>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	e00f      	b.n	8008c84 <_malloc_r+0xb0>
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	1b52      	subs	r2, r2, r5
 8008c68:	d41f      	bmi.n	8008caa <_malloc_r+0xd6>
 8008c6a:	2a0b      	cmp	r2, #11
 8008c6c:	d917      	bls.n	8008c9e <_malloc_r+0xca>
 8008c6e:	1961      	adds	r1, r4, r5
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	6025      	str	r5, [r4, #0]
 8008c74:	bf18      	it	ne
 8008c76:	6059      	strne	r1, [r3, #4]
 8008c78:	6863      	ldr	r3, [r4, #4]
 8008c7a:	bf08      	it	eq
 8008c7c:	f8c8 1000 	streq.w	r1, [r8]
 8008c80:	5162      	str	r2, [r4, r5]
 8008c82:	604b      	str	r3, [r1, #4]
 8008c84:	4638      	mov	r0, r7
 8008c86:	f104 060b 	add.w	r6, r4, #11
 8008c8a:	f000 f829 	bl	8008ce0 <__malloc_unlock>
 8008c8e:	f026 0607 	bic.w	r6, r6, #7
 8008c92:	1d23      	adds	r3, r4, #4
 8008c94:	1af2      	subs	r2, r6, r3
 8008c96:	d0ae      	beq.n	8008bf6 <_malloc_r+0x22>
 8008c98:	1b9b      	subs	r3, r3, r6
 8008c9a:	50a3      	str	r3, [r4, r2]
 8008c9c:	e7ab      	b.n	8008bf6 <_malloc_r+0x22>
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	6862      	ldr	r2, [r4, #4]
 8008ca2:	d1dd      	bne.n	8008c60 <_malloc_r+0x8c>
 8008ca4:	f8c8 2000 	str.w	r2, [r8]
 8008ca8:	e7ec      	b.n	8008c84 <_malloc_r+0xb0>
 8008caa:	4623      	mov	r3, r4
 8008cac:	6864      	ldr	r4, [r4, #4]
 8008cae:	e7ac      	b.n	8008c0a <_malloc_r+0x36>
 8008cb0:	4634      	mov	r4, r6
 8008cb2:	6876      	ldr	r6, [r6, #4]
 8008cb4:	e7b4      	b.n	8008c20 <_malloc_r+0x4c>
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	e7cc      	b.n	8008c54 <_malloc_r+0x80>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f000 f80e 	bl	8008ce0 <__malloc_unlock>
 8008cc4:	e797      	b.n	8008bf6 <_malloc_r+0x22>
 8008cc6:	6025      	str	r5, [r4, #0]
 8008cc8:	e7dc      	b.n	8008c84 <_malloc_r+0xb0>
 8008cca:	605b      	str	r3, [r3, #4]
 8008ccc:	deff      	udf	#255	; 0xff
 8008cce:	bf00      	nop
 8008cd0:	20000540 	.word	0x20000540

08008cd4 <__malloc_lock>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__malloc_lock+0x8>)
 8008cd6:	f7ff b88b 	b.w	8007df0 <__retarget_lock_acquire_recursive>
 8008cda:	bf00      	nop
 8008cdc:	2000053c 	.word	0x2000053c

08008ce0 <__malloc_unlock>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__malloc_unlock+0x8>)
 8008ce2:	f7ff b886 	b.w	8007df2 <__retarget_lock_release_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	2000053c 	.word	0x2000053c

08008cec <_Balloc>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	69c6      	ldr	r6, [r0, #28]
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	b976      	cbnz	r6, 8008d14 <_Balloc+0x28>
 8008cf6:	2010      	movs	r0, #16
 8008cf8:	f7ff ff44 	bl	8008b84 <malloc>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	61e0      	str	r0, [r4, #28]
 8008d00:	b920      	cbnz	r0, 8008d0c <_Balloc+0x20>
 8008d02:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <_Balloc+0x78>)
 8008d04:	4818      	ldr	r0, [pc, #96]	; (8008d68 <_Balloc+0x7c>)
 8008d06:	216b      	movs	r1, #107	; 0x6b
 8008d08:	f000 fdaa 	bl	8009860 <__assert_func>
 8008d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d10:	6006      	str	r6, [r0, #0]
 8008d12:	60c6      	str	r6, [r0, #12]
 8008d14:	69e6      	ldr	r6, [r4, #28]
 8008d16:	68f3      	ldr	r3, [r6, #12]
 8008d18:	b183      	cbz	r3, 8008d3c <_Balloc+0x50>
 8008d1a:	69e3      	ldr	r3, [r4, #28]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d22:	b9b8      	cbnz	r0, 8008d54 <_Balloc+0x68>
 8008d24:	2101      	movs	r1, #1
 8008d26:	fa01 f605 	lsl.w	r6, r1, r5
 8008d2a:	1d72      	adds	r2, r6, #5
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 fdb4 	bl	800989c <_calloc_r>
 8008d34:	b160      	cbz	r0, 8008d50 <_Balloc+0x64>
 8008d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d3a:	e00e      	b.n	8008d5a <_Balloc+0x6e>
 8008d3c:	2221      	movs	r2, #33	; 0x21
 8008d3e:	2104      	movs	r1, #4
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fdab 	bl	800989c <_calloc_r>
 8008d46:	69e3      	ldr	r3, [r4, #28]
 8008d48:	60f0      	str	r0, [r6, #12]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e4      	bne.n	8008d1a <_Balloc+0x2e>
 8008d50:	2000      	movs	r0, #0
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	6802      	ldr	r2, [r0, #0]
 8008d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d60:	e7f7      	b.n	8008d52 <_Balloc+0x66>
 8008d62:	bf00      	nop
 8008d64:	08009ff9 	.word	0x08009ff9
 8008d68:	0800a079 	.word	0x0800a079

08008d6c <_Bfree>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	69c6      	ldr	r6, [r0, #28]
 8008d70:	4605      	mov	r5, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	b976      	cbnz	r6, 8008d94 <_Bfree+0x28>
 8008d76:	2010      	movs	r0, #16
 8008d78:	f7ff ff04 	bl	8008b84 <malloc>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	61e8      	str	r0, [r5, #28]
 8008d80:	b920      	cbnz	r0, 8008d8c <_Bfree+0x20>
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <_Bfree+0x3c>)
 8008d84:	4809      	ldr	r0, [pc, #36]	; (8008dac <_Bfree+0x40>)
 8008d86:	218f      	movs	r1, #143	; 0x8f
 8008d88:	f000 fd6a 	bl	8009860 <__assert_func>
 8008d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d90:	6006      	str	r6, [r0, #0]
 8008d92:	60c6      	str	r6, [r0, #12]
 8008d94:	b13c      	cbz	r4, 8008da6 <_Bfree+0x3a>
 8008d96:	69eb      	ldr	r3, [r5, #28]
 8008d98:	6862      	ldr	r2, [r4, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008da0:	6021      	str	r1, [r4, #0]
 8008da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	08009ff9 	.word	0x08009ff9
 8008dac:	0800a079 	.word	0x0800a079

08008db0 <__multadd>:
 8008db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db4:	690d      	ldr	r5, [r1, #16]
 8008db6:	4607      	mov	r7, r0
 8008db8:	460c      	mov	r4, r1
 8008dba:	461e      	mov	r6, r3
 8008dbc:	f101 0c14 	add.w	ip, r1, #20
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8008dc6:	b299      	uxth	r1, r3
 8008dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8008dcc:	0c1e      	lsrs	r6, r3, #16
 8008dce:	0c0b      	lsrs	r3, r1, #16
 8008dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8008dd4:	b289      	uxth	r1, r1
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ddc:	4285      	cmp	r5, r0
 8008dde:	f84c 1b04 	str.w	r1, [ip], #4
 8008de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008de6:	dcec      	bgt.n	8008dc2 <__multadd+0x12>
 8008de8:	b30e      	cbz	r6, 8008e2e <__multadd+0x7e>
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc19      	bgt.n	8008e24 <__multadd+0x74>
 8008df0:	6861      	ldr	r1, [r4, #4]
 8008df2:	4638      	mov	r0, r7
 8008df4:	3101      	adds	r1, #1
 8008df6:	f7ff ff79 	bl	8008cec <_Balloc>
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	b928      	cbnz	r0, 8008e0a <__multadd+0x5a>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <__multadd+0x84>)
 8008e02:	480d      	ldr	r0, [pc, #52]	; (8008e38 <__multadd+0x88>)
 8008e04:	21ba      	movs	r1, #186	; 0xba
 8008e06:	f000 fd2b 	bl	8009860 <__assert_func>
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	3202      	adds	r2, #2
 8008e0e:	f104 010c 	add.w	r1, r4, #12
 8008e12:	0092      	lsls	r2, r2, #2
 8008e14:	300c      	adds	r0, #12
 8008e16:	f000 fd15 	bl	8009844 <memcpy>
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff ffa5 	bl	8008d6c <_Bfree>
 8008e22:	4644      	mov	r4, r8
 8008e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e28:	3501      	adds	r5, #1
 8008e2a:	615e      	str	r6, [r3, #20]
 8008e2c:	6125      	str	r5, [r4, #16]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e34:	0800a068 	.word	0x0800a068
 8008e38:	0800a079 	.word	0x0800a079

08008e3c <__hi0bits>:
 8008e3c:	0c03      	lsrs	r3, r0, #16
 8008e3e:	041b      	lsls	r3, r3, #16
 8008e40:	b9d3      	cbnz	r3, 8008e78 <__hi0bits+0x3c>
 8008e42:	0400      	lsls	r0, r0, #16
 8008e44:	2310      	movs	r3, #16
 8008e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e4a:	bf04      	itt	eq
 8008e4c:	0200      	lsleq	r0, r0, #8
 8008e4e:	3308      	addeq	r3, #8
 8008e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e54:	bf04      	itt	eq
 8008e56:	0100      	lsleq	r0, r0, #4
 8008e58:	3304      	addeq	r3, #4
 8008e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e5e:	bf04      	itt	eq
 8008e60:	0080      	lsleq	r0, r0, #2
 8008e62:	3302      	addeq	r3, #2
 8008e64:	2800      	cmp	r0, #0
 8008e66:	db05      	blt.n	8008e74 <__hi0bits+0x38>
 8008e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e6c:	f103 0301 	add.w	r3, r3, #1
 8008e70:	bf08      	it	eq
 8008e72:	2320      	moveq	r3, #32
 8008e74:	4618      	mov	r0, r3
 8008e76:	4770      	bx	lr
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e7e4      	b.n	8008e46 <__hi0bits+0xa>

08008e7c <__lo0bits>:
 8008e7c:	6803      	ldr	r3, [r0, #0]
 8008e7e:	f013 0207 	ands.w	r2, r3, #7
 8008e82:	d00c      	beq.n	8008e9e <__lo0bits+0x22>
 8008e84:	07d9      	lsls	r1, r3, #31
 8008e86:	d422      	bmi.n	8008ece <__lo0bits+0x52>
 8008e88:	079a      	lsls	r2, r3, #30
 8008e8a:	bf49      	itett	mi
 8008e8c:	085b      	lsrmi	r3, r3, #1
 8008e8e:	089b      	lsrpl	r3, r3, #2
 8008e90:	6003      	strmi	r3, [r0, #0]
 8008e92:	2201      	movmi	r2, #1
 8008e94:	bf5c      	itt	pl
 8008e96:	6003      	strpl	r3, [r0, #0]
 8008e98:	2202      	movpl	r2, #2
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	4770      	bx	lr
 8008e9e:	b299      	uxth	r1, r3
 8008ea0:	b909      	cbnz	r1, 8008ea6 <__lo0bits+0x2a>
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	2210      	movs	r2, #16
 8008ea6:	b2d9      	uxtb	r1, r3
 8008ea8:	b909      	cbnz	r1, 8008eae <__lo0bits+0x32>
 8008eaa:	3208      	adds	r2, #8
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	0719      	lsls	r1, r3, #28
 8008eb0:	bf04      	itt	eq
 8008eb2:	091b      	lsreq	r3, r3, #4
 8008eb4:	3204      	addeq	r2, #4
 8008eb6:	0799      	lsls	r1, r3, #30
 8008eb8:	bf04      	itt	eq
 8008eba:	089b      	lsreq	r3, r3, #2
 8008ebc:	3202      	addeq	r2, #2
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d403      	bmi.n	8008eca <__lo0bits+0x4e>
 8008ec2:	085b      	lsrs	r3, r3, #1
 8008ec4:	f102 0201 	add.w	r2, r2, #1
 8008ec8:	d003      	beq.n	8008ed2 <__lo0bits+0x56>
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	e7e5      	b.n	8008e9a <__lo0bits+0x1e>
 8008ece:	2200      	movs	r2, #0
 8008ed0:	e7e3      	b.n	8008e9a <__lo0bits+0x1e>
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	e7e1      	b.n	8008e9a <__lo0bits+0x1e>
	...

08008ed8 <__i2b>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	460c      	mov	r4, r1
 8008edc:	2101      	movs	r1, #1
 8008ede:	f7ff ff05 	bl	8008cec <_Balloc>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	b928      	cbnz	r0, 8008ef2 <__i2b+0x1a>
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <__i2b+0x24>)
 8008ee8:	4805      	ldr	r0, [pc, #20]	; (8008f00 <__i2b+0x28>)
 8008eea:	f240 1145 	movw	r1, #325	; 0x145
 8008eee:	f000 fcb7 	bl	8009860 <__assert_func>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6144      	str	r4, [r0, #20]
 8008ef6:	6103      	str	r3, [r0, #16]
 8008ef8:	bd10      	pop	{r4, pc}
 8008efa:	bf00      	nop
 8008efc:	0800a068 	.word	0x0800a068
 8008f00:	0800a079 	.word	0x0800a079

08008f04 <__multiply>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4691      	mov	r9, r2
 8008f0a:	690a      	ldr	r2, [r1, #16]
 8008f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	bfb8      	it	lt
 8008f14:	460b      	movlt	r3, r1
 8008f16:	460c      	mov	r4, r1
 8008f18:	bfbc      	itt	lt
 8008f1a:	464c      	movlt	r4, r9
 8008f1c:	4699      	movlt	r9, r3
 8008f1e:	6927      	ldr	r7, [r4, #16]
 8008f20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	6861      	ldr	r1, [r4, #4]
 8008f28:	eb07 060a 	add.w	r6, r7, sl
 8008f2c:	42b3      	cmp	r3, r6
 8008f2e:	b085      	sub	sp, #20
 8008f30:	bfb8      	it	lt
 8008f32:	3101      	addlt	r1, #1
 8008f34:	f7ff feda 	bl	8008cec <_Balloc>
 8008f38:	b930      	cbnz	r0, 8008f48 <__multiply+0x44>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b44      	ldr	r3, [pc, #272]	; (8009050 <__multiply+0x14c>)
 8008f3e:	4845      	ldr	r0, [pc, #276]	; (8009054 <__multiply+0x150>)
 8008f40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f44:	f000 fc8c 	bl	8009860 <__assert_func>
 8008f48:	f100 0514 	add.w	r5, r0, #20
 8008f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f50:	462b      	mov	r3, r5
 8008f52:	2200      	movs	r2, #0
 8008f54:	4543      	cmp	r3, r8
 8008f56:	d321      	bcc.n	8008f9c <__multiply+0x98>
 8008f58:	f104 0314 	add.w	r3, r4, #20
 8008f5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f60:	f109 0314 	add.w	r3, r9, #20
 8008f64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f68:	9202      	str	r2, [sp, #8]
 8008f6a:	1b3a      	subs	r2, r7, r4
 8008f6c:	3a15      	subs	r2, #21
 8008f6e:	f022 0203 	bic.w	r2, r2, #3
 8008f72:	3204      	adds	r2, #4
 8008f74:	f104 0115 	add.w	r1, r4, #21
 8008f78:	428f      	cmp	r7, r1
 8008f7a:	bf38      	it	cc
 8008f7c:	2204      	movcc	r2, #4
 8008f7e:	9201      	str	r2, [sp, #4]
 8008f80:	9a02      	ldr	r2, [sp, #8]
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d80c      	bhi.n	8008fa2 <__multiply+0x9e>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	dd03      	ble.n	8008f94 <__multiply+0x90>
 8008f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d05b      	beq.n	800904c <__multiply+0x148>
 8008f94:	6106      	str	r6, [r0, #16]
 8008f96:	b005      	add	sp, #20
 8008f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	f843 2b04 	str.w	r2, [r3], #4
 8008fa0:	e7d8      	b.n	8008f54 <__multiply+0x50>
 8008fa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fa6:	f1ba 0f00 	cmp.w	sl, #0
 8008faa:	d024      	beq.n	8008ff6 <__multiply+0xf2>
 8008fac:	f104 0e14 	add.w	lr, r4, #20
 8008fb0:	46a9      	mov	r9, r5
 8008fb2:	f04f 0c00 	mov.w	ip, #0
 8008fb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fba:	f8d9 1000 	ldr.w	r1, [r9]
 8008fbe:	fa1f fb82 	uxth.w	fp, r2
 8008fc2:	b289      	uxth	r1, r1
 8008fc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fd0:	4461      	add	r1, ip
 8008fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fde:	b289      	uxth	r1, r1
 8008fe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fe4:	4577      	cmp	r7, lr
 8008fe6:	f849 1b04 	str.w	r1, [r9], #4
 8008fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fee:	d8e2      	bhi.n	8008fb6 <__multiply+0xb2>
 8008ff0:	9a01      	ldr	r2, [sp, #4]
 8008ff2:	f845 c002 	str.w	ip, [r5, r2]
 8008ff6:	9a03      	ldr	r2, [sp, #12]
 8008ff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	f1b9 0f00 	cmp.w	r9, #0
 8009002:	d021      	beq.n	8009048 <__multiply+0x144>
 8009004:	6829      	ldr	r1, [r5, #0]
 8009006:	f104 0c14 	add.w	ip, r4, #20
 800900a:	46ae      	mov	lr, r5
 800900c:	f04f 0a00 	mov.w	sl, #0
 8009010:	f8bc b000 	ldrh.w	fp, [ip]
 8009014:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009018:	fb09 220b 	mla	r2, r9, fp, r2
 800901c:	4452      	add	r2, sl
 800901e:	b289      	uxth	r1, r1
 8009020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009024:	f84e 1b04 	str.w	r1, [lr], #4
 8009028:	f85c 1b04 	ldr.w	r1, [ip], #4
 800902c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009030:	f8be 1000 	ldrh.w	r1, [lr]
 8009034:	fb09 110a 	mla	r1, r9, sl, r1
 8009038:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800903c:	4567      	cmp	r7, ip
 800903e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009042:	d8e5      	bhi.n	8009010 <__multiply+0x10c>
 8009044:	9a01      	ldr	r2, [sp, #4]
 8009046:	50a9      	str	r1, [r5, r2]
 8009048:	3504      	adds	r5, #4
 800904a:	e799      	b.n	8008f80 <__multiply+0x7c>
 800904c:	3e01      	subs	r6, #1
 800904e:	e79b      	b.n	8008f88 <__multiply+0x84>
 8009050:	0800a068 	.word	0x0800a068
 8009054:	0800a079 	.word	0x0800a079

08009058 <__pow5mult>:
 8009058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800905c:	4615      	mov	r5, r2
 800905e:	f012 0203 	ands.w	r2, r2, #3
 8009062:	4606      	mov	r6, r0
 8009064:	460f      	mov	r7, r1
 8009066:	d007      	beq.n	8009078 <__pow5mult+0x20>
 8009068:	4c25      	ldr	r4, [pc, #148]	; (8009100 <__pow5mult+0xa8>)
 800906a:	3a01      	subs	r2, #1
 800906c:	2300      	movs	r3, #0
 800906e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009072:	f7ff fe9d 	bl	8008db0 <__multadd>
 8009076:	4607      	mov	r7, r0
 8009078:	10ad      	asrs	r5, r5, #2
 800907a:	d03d      	beq.n	80090f8 <__pow5mult+0xa0>
 800907c:	69f4      	ldr	r4, [r6, #28]
 800907e:	b97c      	cbnz	r4, 80090a0 <__pow5mult+0x48>
 8009080:	2010      	movs	r0, #16
 8009082:	f7ff fd7f 	bl	8008b84 <malloc>
 8009086:	4602      	mov	r2, r0
 8009088:	61f0      	str	r0, [r6, #28]
 800908a:	b928      	cbnz	r0, 8009098 <__pow5mult+0x40>
 800908c:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <__pow5mult+0xac>)
 800908e:	481e      	ldr	r0, [pc, #120]	; (8009108 <__pow5mult+0xb0>)
 8009090:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009094:	f000 fbe4 	bl	8009860 <__assert_func>
 8009098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800909c:	6004      	str	r4, [r0, #0]
 800909e:	60c4      	str	r4, [r0, #12]
 80090a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80090a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090a8:	b94c      	cbnz	r4, 80090be <__pow5mult+0x66>
 80090aa:	f240 2171 	movw	r1, #625	; 0x271
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ff12 	bl	8008ed8 <__i2b>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ba:	4604      	mov	r4, r0
 80090bc:	6003      	str	r3, [r0, #0]
 80090be:	f04f 0900 	mov.w	r9, #0
 80090c2:	07eb      	lsls	r3, r5, #31
 80090c4:	d50a      	bpl.n	80090dc <__pow5mult+0x84>
 80090c6:	4639      	mov	r1, r7
 80090c8:	4622      	mov	r2, r4
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ff1a 	bl	8008f04 <__multiply>
 80090d0:	4639      	mov	r1, r7
 80090d2:	4680      	mov	r8, r0
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7ff fe49 	bl	8008d6c <_Bfree>
 80090da:	4647      	mov	r7, r8
 80090dc:	106d      	asrs	r5, r5, #1
 80090de:	d00b      	beq.n	80090f8 <__pow5mult+0xa0>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	b938      	cbnz	r0, 80090f4 <__pow5mult+0x9c>
 80090e4:	4622      	mov	r2, r4
 80090e6:	4621      	mov	r1, r4
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff ff0b 	bl	8008f04 <__multiply>
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	f8c0 9000 	str.w	r9, [r0]
 80090f4:	4604      	mov	r4, r0
 80090f6:	e7e4      	b.n	80090c2 <__pow5mult+0x6a>
 80090f8:	4638      	mov	r0, r7
 80090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090fe:	bf00      	nop
 8009100:	0800a1c8 	.word	0x0800a1c8
 8009104:	08009ff9 	.word	0x08009ff9
 8009108:	0800a079 	.word	0x0800a079

0800910c <__lshift>:
 800910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009110:	460c      	mov	r4, r1
 8009112:	6849      	ldr	r1, [r1, #4]
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800911a:	68a3      	ldr	r3, [r4, #8]
 800911c:	4607      	mov	r7, r0
 800911e:	4691      	mov	r9, r2
 8009120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009124:	f108 0601 	add.w	r6, r8, #1
 8009128:	42b3      	cmp	r3, r6
 800912a:	db0b      	blt.n	8009144 <__lshift+0x38>
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff fddd 	bl	8008cec <_Balloc>
 8009132:	4605      	mov	r5, r0
 8009134:	b948      	cbnz	r0, 800914a <__lshift+0x3e>
 8009136:	4602      	mov	r2, r0
 8009138:	4b28      	ldr	r3, [pc, #160]	; (80091dc <__lshift+0xd0>)
 800913a:	4829      	ldr	r0, [pc, #164]	; (80091e0 <__lshift+0xd4>)
 800913c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009140:	f000 fb8e 	bl	8009860 <__assert_func>
 8009144:	3101      	adds	r1, #1
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	e7ee      	b.n	8009128 <__lshift+0x1c>
 800914a:	2300      	movs	r3, #0
 800914c:	f100 0114 	add.w	r1, r0, #20
 8009150:	f100 0210 	add.w	r2, r0, #16
 8009154:	4618      	mov	r0, r3
 8009156:	4553      	cmp	r3, sl
 8009158:	db33      	blt.n	80091c2 <__lshift+0xb6>
 800915a:	6920      	ldr	r0, [r4, #16]
 800915c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009160:	f104 0314 	add.w	r3, r4, #20
 8009164:	f019 091f 	ands.w	r9, r9, #31
 8009168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800916c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009170:	d02b      	beq.n	80091ca <__lshift+0xbe>
 8009172:	f1c9 0e20 	rsb	lr, r9, #32
 8009176:	468a      	mov	sl, r1
 8009178:	2200      	movs	r2, #0
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	fa00 f009 	lsl.w	r0, r0, r9
 8009180:	4310      	orrs	r0, r2
 8009182:	f84a 0b04 	str.w	r0, [sl], #4
 8009186:	f853 2b04 	ldr.w	r2, [r3], #4
 800918a:	459c      	cmp	ip, r3
 800918c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009190:	d8f3      	bhi.n	800917a <__lshift+0x6e>
 8009192:	ebac 0304 	sub.w	r3, ip, r4
 8009196:	3b15      	subs	r3, #21
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	3304      	adds	r3, #4
 800919e:	f104 0015 	add.w	r0, r4, #21
 80091a2:	4584      	cmp	ip, r0
 80091a4:	bf38      	it	cc
 80091a6:	2304      	movcc	r3, #4
 80091a8:	50ca      	str	r2, [r1, r3]
 80091aa:	b10a      	cbz	r2, 80091b0 <__lshift+0xa4>
 80091ac:	f108 0602 	add.w	r6, r8, #2
 80091b0:	3e01      	subs	r6, #1
 80091b2:	4638      	mov	r0, r7
 80091b4:	612e      	str	r6, [r5, #16]
 80091b6:	4621      	mov	r1, r4
 80091b8:	f7ff fdd8 	bl	8008d6c <_Bfree>
 80091bc:	4628      	mov	r0, r5
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091c6:	3301      	adds	r3, #1
 80091c8:	e7c5      	b.n	8009156 <__lshift+0x4a>
 80091ca:	3904      	subs	r1, #4
 80091cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091d4:	459c      	cmp	ip, r3
 80091d6:	d8f9      	bhi.n	80091cc <__lshift+0xc0>
 80091d8:	e7ea      	b.n	80091b0 <__lshift+0xa4>
 80091da:	bf00      	nop
 80091dc:	0800a068 	.word	0x0800a068
 80091e0:	0800a079 	.word	0x0800a079

080091e4 <__mcmp>:
 80091e4:	b530      	push	{r4, r5, lr}
 80091e6:	6902      	ldr	r2, [r0, #16]
 80091e8:	690c      	ldr	r4, [r1, #16]
 80091ea:	1b12      	subs	r2, r2, r4
 80091ec:	d10e      	bne.n	800920c <__mcmp+0x28>
 80091ee:	f100 0314 	add.w	r3, r0, #20
 80091f2:	3114      	adds	r1, #20
 80091f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009204:	42a5      	cmp	r5, r4
 8009206:	d003      	beq.n	8009210 <__mcmp+0x2c>
 8009208:	d305      	bcc.n	8009216 <__mcmp+0x32>
 800920a:	2201      	movs	r2, #1
 800920c:	4610      	mov	r0, r2
 800920e:	bd30      	pop	{r4, r5, pc}
 8009210:	4283      	cmp	r3, r0
 8009212:	d3f3      	bcc.n	80091fc <__mcmp+0x18>
 8009214:	e7fa      	b.n	800920c <__mcmp+0x28>
 8009216:	f04f 32ff 	mov.w	r2, #4294967295
 800921a:	e7f7      	b.n	800920c <__mcmp+0x28>

0800921c <__mdiff>:
 800921c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	460c      	mov	r4, r1
 8009222:	4606      	mov	r6, r0
 8009224:	4611      	mov	r1, r2
 8009226:	4620      	mov	r0, r4
 8009228:	4690      	mov	r8, r2
 800922a:	f7ff ffdb 	bl	80091e4 <__mcmp>
 800922e:	1e05      	subs	r5, r0, #0
 8009230:	d110      	bne.n	8009254 <__mdiff+0x38>
 8009232:	4629      	mov	r1, r5
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fd59 	bl	8008cec <_Balloc>
 800923a:	b930      	cbnz	r0, 800924a <__mdiff+0x2e>
 800923c:	4b3a      	ldr	r3, [pc, #232]	; (8009328 <__mdiff+0x10c>)
 800923e:	4602      	mov	r2, r0
 8009240:	f240 2137 	movw	r1, #567	; 0x237
 8009244:	4839      	ldr	r0, [pc, #228]	; (800932c <__mdiff+0x110>)
 8009246:	f000 fb0b 	bl	8009860 <__assert_func>
 800924a:	2301      	movs	r3, #1
 800924c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	bfa4      	itt	ge
 8009256:	4643      	movge	r3, r8
 8009258:	46a0      	movge	r8, r4
 800925a:	4630      	mov	r0, r6
 800925c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009260:	bfa6      	itte	ge
 8009262:	461c      	movge	r4, r3
 8009264:	2500      	movge	r5, #0
 8009266:	2501      	movlt	r5, #1
 8009268:	f7ff fd40 	bl	8008cec <_Balloc>
 800926c:	b920      	cbnz	r0, 8009278 <__mdiff+0x5c>
 800926e:	4b2e      	ldr	r3, [pc, #184]	; (8009328 <__mdiff+0x10c>)
 8009270:	4602      	mov	r2, r0
 8009272:	f240 2145 	movw	r1, #581	; 0x245
 8009276:	e7e5      	b.n	8009244 <__mdiff+0x28>
 8009278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800927c:	6926      	ldr	r6, [r4, #16]
 800927e:	60c5      	str	r5, [r0, #12]
 8009280:	f104 0914 	add.w	r9, r4, #20
 8009284:	f108 0514 	add.w	r5, r8, #20
 8009288:	f100 0e14 	add.w	lr, r0, #20
 800928c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009294:	f108 0210 	add.w	r2, r8, #16
 8009298:	46f2      	mov	sl, lr
 800929a:	2100      	movs	r1, #0
 800929c:	f859 3b04 	ldr.w	r3, [r9], #4
 80092a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092a4:	fa11 f88b 	uxtah	r8, r1, fp
 80092a8:	b299      	uxth	r1, r3
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	eba8 0801 	sub.w	r8, r8, r1
 80092b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092b8:	fa1f f888 	uxth.w	r8, r8
 80092bc:	1419      	asrs	r1, r3, #16
 80092be:	454e      	cmp	r6, r9
 80092c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092c4:	f84a 3b04 	str.w	r3, [sl], #4
 80092c8:	d8e8      	bhi.n	800929c <__mdiff+0x80>
 80092ca:	1b33      	subs	r3, r6, r4
 80092cc:	3b15      	subs	r3, #21
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	3304      	adds	r3, #4
 80092d4:	3415      	adds	r4, #21
 80092d6:	42a6      	cmp	r6, r4
 80092d8:	bf38      	it	cc
 80092da:	2304      	movcc	r3, #4
 80092dc:	441d      	add	r5, r3
 80092de:	4473      	add	r3, lr
 80092e0:	469e      	mov	lr, r3
 80092e2:	462e      	mov	r6, r5
 80092e4:	4566      	cmp	r6, ip
 80092e6:	d30e      	bcc.n	8009306 <__mdiff+0xea>
 80092e8:	f10c 0203 	add.w	r2, ip, #3
 80092ec:	1b52      	subs	r2, r2, r5
 80092ee:	f022 0203 	bic.w	r2, r2, #3
 80092f2:	3d03      	subs	r5, #3
 80092f4:	45ac      	cmp	ip, r5
 80092f6:	bf38      	it	cc
 80092f8:	2200      	movcc	r2, #0
 80092fa:	4413      	add	r3, r2
 80092fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009300:	b17a      	cbz	r2, 8009322 <__mdiff+0x106>
 8009302:	6107      	str	r7, [r0, #16]
 8009304:	e7a4      	b.n	8009250 <__mdiff+0x34>
 8009306:	f856 8b04 	ldr.w	r8, [r6], #4
 800930a:	fa11 f288 	uxtah	r2, r1, r8
 800930e:	1414      	asrs	r4, r2, #16
 8009310:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009314:	b292      	uxth	r2, r2
 8009316:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800931a:	f84e 2b04 	str.w	r2, [lr], #4
 800931e:	1421      	asrs	r1, r4, #16
 8009320:	e7e0      	b.n	80092e4 <__mdiff+0xc8>
 8009322:	3f01      	subs	r7, #1
 8009324:	e7ea      	b.n	80092fc <__mdiff+0xe0>
 8009326:	bf00      	nop
 8009328:	0800a068 	.word	0x0800a068
 800932c:	0800a079 	.word	0x0800a079

08009330 <__d2b>:
 8009330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009334:	460f      	mov	r7, r1
 8009336:	2101      	movs	r1, #1
 8009338:	ec59 8b10 	vmov	r8, r9, d0
 800933c:	4616      	mov	r6, r2
 800933e:	f7ff fcd5 	bl	8008cec <_Balloc>
 8009342:	4604      	mov	r4, r0
 8009344:	b930      	cbnz	r0, 8009354 <__d2b+0x24>
 8009346:	4602      	mov	r2, r0
 8009348:	4b24      	ldr	r3, [pc, #144]	; (80093dc <__d2b+0xac>)
 800934a:	4825      	ldr	r0, [pc, #148]	; (80093e0 <__d2b+0xb0>)
 800934c:	f240 310f 	movw	r1, #783	; 0x30f
 8009350:	f000 fa86 	bl	8009860 <__assert_func>
 8009354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800935c:	bb2d      	cbnz	r5, 80093aa <__d2b+0x7a>
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	f1b8 0300 	subs.w	r3, r8, #0
 8009364:	d026      	beq.n	80093b4 <__d2b+0x84>
 8009366:	4668      	mov	r0, sp
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	f7ff fd87 	bl	8008e7c <__lo0bits>
 800936e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009372:	b1e8      	cbz	r0, 80093b0 <__d2b+0x80>
 8009374:	f1c0 0320 	rsb	r3, r0, #32
 8009378:	fa02 f303 	lsl.w	r3, r2, r3
 800937c:	430b      	orrs	r3, r1
 800937e:	40c2      	lsrs	r2, r0
 8009380:	6163      	str	r3, [r4, #20]
 8009382:	9201      	str	r2, [sp, #4]
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	61a3      	str	r3, [r4, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	bf14      	ite	ne
 800938c:	2202      	movne	r2, #2
 800938e:	2201      	moveq	r2, #1
 8009390:	6122      	str	r2, [r4, #16]
 8009392:	b1bd      	cbz	r5, 80093c4 <__d2b+0x94>
 8009394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009398:	4405      	add	r5, r0
 800939a:	603d      	str	r5, [r7, #0]
 800939c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	4620      	mov	r0, r4
 80093a4:	b003      	add	sp, #12
 80093a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ae:	e7d6      	b.n	800935e <__d2b+0x2e>
 80093b0:	6161      	str	r1, [r4, #20]
 80093b2:	e7e7      	b.n	8009384 <__d2b+0x54>
 80093b4:	a801      	add	r0, sp, #4
 80093b6:	f7ff fd61 	bl	8008e7c <__lo0bits>
 80093ba:	9b01      	ldr	r3, [sp, #4]
 80093bc:	6163      	str	r3, [r4, #20]
 80093be:	3020      	adds	r0, #32
 80093c0:	2201      	movs	r2, #1
 80093c2:	e7e5      	b.n	8009390 <__d2b+0x60>
 80093c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093cc:	6038      	str	r0, [r7, #0]
 80093ce:	6918      	ldr	r0, [r3, #16]
 80093d0:	f7ff fd34 	bl	8008e3c <__hi0bits>
 80093d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093d8:	e7e2      	b.n	80093a0 <__d2b+0x70>
 80093da:	bf00      	nop
 80093dc:	0800a068 	.word	0x0800a068
 80093e0:	0800a079 	.word	0x0800a079

080093e4 <__ssputs_r>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	688e      	ldr	r6, [r1, #8]
 80093ea:	461f      	mov	r7, r3
 80093ec:	42be      	cmp	r6, r7
 80093ee:	680b      	ldr	r3, [r1, #0]
 80093f0:	4682      	mov	sl, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	4690      	mov	r8, r2
 80093f6:	d82c      	bhi.n	8009452 <__ssputs_r+0x6e>
 80093f8:	898a      	ldrh	r2, [r1, #12]
 80093fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093fe:	d026      	beq.n	800944e <__ssputs_r+0x6a>
 8009400:	6965      	ldr	r5, [r4, #20]
 8009402:	6909      	ldr	r1, [r1, #16]
 8009404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009408:	eba3 0901 	sub.w	r9, r3, r1
 800940c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009410:	1c7b      	adds	r3, r7, #1
 8009412:	444b      	add	r3, r9
 8009414:	106d      	asrs	r5, r5, #1
 8009416:	429d      	cmp	r5, r3
 8009418:	bf38      	it	cc
 800941a:	461d      	movcc	r5, r3
 800941c:	0553      	lsls	r3, r2, #21
 800941e:	d527      	bpl.n	8009470 <__ssputs_r+0x8c>
 8009420:	4629      	mov	r1, r5
 8009422:	f7ff fbd7 	bl	8008bd4 <_malloc_r>
 8009426:	4606      	mov	r6, r0
 8009428:	b360      	cbz	r0, 8009484 <__ssputs_r+0xa0>
 800942a:	6921      	ldr	r1, [r4, #16]
 800942c:	464a      	mov	r2, r9
 800942e:	f000 fa09 	bl	8009844 <memcpy>
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	6126      	str	r6, [r4, #16]
 8009440:	6165      	str	r5, [r4, #20]
 8009442:	444e      	add	r6, r9
 8009444:	eba5 0509 	sub.w	r5, r5, r9
 8009448:	6026      	str	r6, [r4, #0]
 800944a:	60a5      	str	r5, [r4, #8]
 800944c:	463e      	mov	r6, r7
 800944e:	42be      	cmp	r6, r7
 8009450:	d900      	bls.n	8009454 <__ssputs_r+0x70>
 8009452:	463e      	mov	r6, r7
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	4632      	mov	r2, r6
 8009458:	4641      	mov	r1, r8
 800945a:	f000 f9c9 	bl	80097f0 <memmove>
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	60a3      	str	r3, [r4, #8]
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	4433      	add	r3, r6
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	2000      	movs	r0, #0
 800946c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009470:	462a      	mov	r2, r5
 8009472:	f000 fa3b 	bl	80098ec <_realloc_r>
 8009476:	4606      	mov	r6, r0
 8009478:	2800      	cmp	r0, #0
 800947a:	d1e0      	bne.n	800943e <__ssputs_r+0x5a>
 800947c:	6921      	ldr	r1, [r4, #16]
 800947e:	4650      	mov	r0, sl
 8009480:	f7ff fb34 	bl	8008aec <_free_r>
 8009484:	230c      	movs	r3, #12
 8009486:	f8ca 3000 	str.w	r3, [sl]
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	f04f 30ff 	mov.w	r0, #4294967295
 8009496:	e7e9      	b.n	800946c <__ssputs_r+0x88>

08009498 <_svfiprintf_r>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	4698      	mov	r8, r3
 800949e:	898b      	ldrh	r3, [r1, #12]
 80094a0:	061b      	lsls	r3, r3, #24
 80094a2:	b09d      	sub	sp, #116	; 0x74
 80094a4:	4607      	mov	r7, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	d50e      	bpl.n	80094ca <_svfiprintf_r+0x32>
 80094ac:	690b      	ldr	r3, [r1, #16]
 80094ae:	b963      	cbnz	r3, 80094ca <_svfiprintf_r+0x32>
 80094b0:	2140      	movs	r1, #64	; 0x40
 80094b2:	f7ff fb8f 	bl	8008bd4 <_malloc_r>
 80094b6:	6028      	str	r0, [r5, #0]
 80094b8:	6128      	str	r0, [r5, #16]
 80094ba:	b920      	cbnz	r0, 80094c6 <_svfiprintf_r+0x2e>
 80094bc:	230c      	movs	r3, #12
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e0d0      	b.n	8009668 <_svfiprintf_r+0x1d0>
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	616b      	str	r3, [r5, #20]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9309      	str	r3, [sp, #36]	; 0x24
 80094ce:	2320      	movs	r3, #32
 80094d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d8:	2330      	movs	r3, #48	; 0x30
 80094da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009680 <_svfiprintf_r+0x1e8>
 80094de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094e2:	f04f 0901 	mov.w	r9, #1
 80094e6:	4623      	mov	r3, r4
 80094e8:	469a      	mov	sl, r3
 80094ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ee:	b10a      	cbz	r2, 80094f4 <_svfiprintf_r+0x5c>
 80094f0:	2a25      	cmp	r2, #37	; 0x25
 80094f2:	d1f9      	bne.n	80094e8 <_svfiprintf_r+0x50>
 80094f4:	ebba 0b04 	subs.w	fp, sl, r4
 80094f8:	d00b      	beq.n	8009512 <_svfiprintf_r+0x7a>
 80094fa:	465b      	mov	r3, fp
 80094fc:	4622      	mov	r2, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ff6f 	bl	80093e4 <__ssputs_r>
 8009506:	3001      	adds	r0, #1
 8009508:	f000 80a9 	beq.w	800965e <_svfiprintf_r+0x1c6>
 800950c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800950e:	445a      	add	r2, fp
 8009510:	9209      	str	r2, [sp, #36]	; 0x24
 8009512:	f89a 3000 	ldrb.w	r3, [sl]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 80a1 	beq.w	800965e <_svfiprintf_r+0x1c6>
 800951c:	2300      	movs	r3, #0
 800951e:	f04f 32ff 	mov.w	r2, #4294967295
 8009522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009526:	f10a 0a01 	add.w	sl, sl, #1
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	9307      	str	r3, [sp, #28]
 800952e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009532:	931a      	str	r3, [sp, #104]	; 0x68
 8009534:	4654      	mov	r4, sl
 8009536:	2205      	movs	r2, #5
 8009538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953c:	4850      	ldr	r0, [pc, #320]	; (8009680 <_svfiprintf_r+0x1e8>)
 800953e:	f7f6 fe4f 	bl	80001e0 <memchr>
 8009542:	9a04      	ldr	r2, [sp, #16]
 8009544:	b9d8      	cbnz	r0, 800957e <_svfiprintf_r+0xe6>
 8009546:	06d0      	lsls	r0, r2, #27
 8009548:	bf44      	itt	mi
 800954a:	2320      	movmi	r3, #32
 800954c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009550:	0711      	lsls	r1, r2, #28
 8009552:	bf44      	itt	mi
 8009554:	232b      	movmi	r3, #43	; 0x2b
 8009556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955a:	f89a 3000 	ldrb.w	r3, [sl]
 800955e:	2b2a      	cmp	r3, #42	; 0x2a
 8009560:	d015      	beq.n	800958e <_svfiprintf_r+0xf6>
 8009562:	9a07      	ldr	r2, [sp, #28]
 8009564:	4654      	mov	r4, sl
 8009566:	2000      	movs	r0, #0
 8009568:	f04f 0c0a 	mov.w	ip, #10
 800956c:	4621      	mov	r1, r4
 800956e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009572:	3b30      	subs	r3, #48	; 0x30
 8009574:	2b09      	cmp	r3, #9
 8009576:	d94d      	bls.n	8009614 <_svfiprintf_r+0x17c>
 8009578:	b1b0      	cbz	r0, 80095a8 <_svfiprintf_r+0x110>
 800957a:	9207      	str	r2, [sp, #28]
 800957c:	e014      	b.n	80095a8 <_svfiprintf_r+0x110>
 800957e:	eba0 0308 	sub.w	r3, r0, r8
 8009582:	fa09 f303 	lsl.w	r3, r9, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	9304      	str	r3, [sp, #16]
 800958a:	46a2      	mov	sl, r4
 800958c:	e7d2      	b.n	8009534 <_svfiprintf_r+0x9c>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	1d19      	adds	r1, r3, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	9103      	str	r1, [sp, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfbb      	ittet	lt
 800959a:	425b      	neglt	r3, r3
 800959c:	f042 0202 	orrlt.w	r2, r2, #2
 80095a0:	9307      	strge	r3, [sp, #28]
 80095a2:	9307      	strlt	r3, [sp, #28]
 80095a4:	bfb8      	it	lt
 80095a6:	9204      	strlt	r2, [sp, #16]
 80095a8:	7823      	ldrb	r3, [r4, #0]
 80095aa:	2b2e      	cmp	r3, #46	; 0x2e
 80095ac:	d10c      	bne.n	80095c8 <_svfiprintf_r+0x130>
 80095ae:	7863      	ldrb	r3, [r4, #1]
 80095b0:	2b2a      	cmp	r3, #42	; 0x2a
 80095b2:	d134      	bne.n	800961e <_svfiprintf_r+0x186>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	9203      	str	r2, [sp, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfb8      	it	lt
 80095c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80095c4:	3402      	adds	r4, #2
 80095c6:	9305      	str	r3, [sp, #20]
 80095c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009690 <_svfiprintf_r+0x1f8>
 80095cc:	7821      	ldrb	r1, [r4, #0]
 80095ce:	2203      	movs	r2, #3
 80095d0:	4650      	mov	r0, sl
 80095d2:	f7f6 fe05 	bl	80001e0 <memchr>
 80095d6:	b138      	cbz	r0, 80095e8 <_svfiprintf_r+0x150>
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	eba0 000a 	sub.w	r0, r0, sl
 80095de:	2240      	movs	r2, #64	; 0x40
 80095e0:	4082      	lsls	r2, r0
 80095e2:	4313      	orrs	r3, r2
 80095e4:	3401      	adds	r4, #1
 80095e6:	9304      	str	r3, [sp, #16]
 80095e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ec:	4825      	ldr	r0, [pc, #148]	; (8009684 <_svfiprintf_r+0x1ec>)
 80095ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095f2:	2206      	movs	r2, #6
 80095f4:	f7f6 fdf4 	bl	80001e0 <memchr>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d038      	beq.n	800966e <_svfiprintf_r+0x1d6>
 80095fc:	4b22      	ldr	r3, [pc, #136]	; (8009688 <_svfiprintf_r+0x1f0>)
 80095fe:	bb1b      	cbnz	r3, 8009648 <_svfiprintf_r+0x1b0>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	3307      	adds	r3, #7
 8009604:	f023 0307 	bic.w	r3, r3, #7
 8009608:	3308      	adds	r3, #8
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	4433      	add	r3, r6
 8009610:	9309      	str	r3, [sp, #36]	; 0x24
 8009612:	e768      	b.n	80094e6 <_svfiprintf_r+0x4e>
 8009614:	fb0c 3202 	mla	r2, ip, r2, r3
 8009618:	460c      	mov	r4, r1
 800961a:	2001      	movs	r0, #1
 800961c:	e7a6      	b.n	800956c <_svfiprintf_r+0xd4>
 800961e:	2300      	movs	r3, #0
 8009620:	3401      	adds	r4, #1
 8009622:	9305      	str	r3, [sp, #20]
 8009624:	4619      	mov	r1, r3
 8009626:	f04f 0c0a 	mov.w	ip, #10
 800962a:	4620      	mov	r0, r4
 800962c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009630:	3a30      	subs	r2, #48	; 0x30
 8009632:	2a09      	cmp	r2, #9
 8009634:	d903      	bls.n	800963e <_svfiprintf_r+0x1a6>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0c6      	beq.n	80095c8 <_svfiprintf_r+0x130>
 800963a:	9105      	str	r1, [sp, #20]
 800963c:	e7c4      	b.n	80095c8 <_svfiprintf_r+0x130>
 800963e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009642:	4604      	mov	r4, r0
 8009644:	2301      	movs	r3, #1
 8009646:	e7f0      	b.n	800962a <_svfiprintf_r+0x192>
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	462a      	mov	r2, r5
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <_svfiprintf_r+0x1f4>)
 8009650:	a904      	add	r1, sp, #16
 8009652:	4638      	mov	r0, r7
 8009654:	f7fd fe62 	bl	800731c <_printf_float>
 8009658:	1c42      	adds	r2, r0, #1
 800965a:	4606      	mov	r6, r0
 800965c:	d1d6      	bne.n	800960c <_svfiprintf_r+0x174>
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	065b      	lsls	r3, r3, #25
 8009662:	f53f af2d 	bmi.w	80094c0 <_svfiprintf_r+0x28>
 8009666:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009668:	b01d      	add	sp, #116	; 0x74
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	ab03      	add	r3, sp, #12
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	462a      	mov	r2, r5
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <_svfiprintf_r+0x1f4>)
 8009676:	a904      	add	r1, sp, #16
 8009678:	4638      	mov	r0, r7
 800967a:	f7fe f8f3 	bl	8007864 <_printf_i>
 800967e:	e7eb      	b.n	8009658 <_svfiprintf_r+0x1c0>
 8009680:	0800a1d4 	.word	0x0800a1d4
 8009684:	0800a1de 	.word	0x0800a1de
 8009688:	0800731d 	.word	0x0800731d
 800968c:	080093e5 	.word	0x080093e5
 8009690:	0800a1da 	.word	0x0800a1da

08009694 <__sflush_r>:
 8009694:	898a      	ldrh	r2, [r1, #12]
 8009696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	0710      	lsls	r0, r2, #28
 800969e:	460c      	mov	r4, r1
 80096a0:	d458      	bmi.n	8009754 <__sflush_r+0xc0>
 80096a2:	684b      	ldr	r3, [r1, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc05      	bgt.n	80096b4 <__sflush_r+0x20>
 80096a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dc02      	bgt.n	80096b4 <__sflush_r+0x20>
 80096ae:	2000      	movs	r0, #0
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	d0f9      	beq.n	80096ae <__sflush_r+0x1a>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096c0:	682f      	ldr	r7, [r5, #0]
 80096c2:	6a21      	ldr	r1, [r4, #32]
 80096c4:	602b      	str	r3, [r5, #0]
 80096c6:	d032      	beq.n	800972e <__sflush_r+0x9a>
 80096c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	075a      	lsls	r2, r3, #29
 80096ce:	d505      	bpl.n	80096dc <__sflush_r+0x48>
 80096d0:	6863      	ldr	r3, [r4, #4]
 80096d2:	1ac0      	subs	r0, r0, r3
 80096d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d6:	b10b      	cbz	r3, 80096dc <__sflush_r+0x48>
 80096d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096da:	1ac0      	subs	r0, r0, r3
 80096dc:	2300      	movs	r3, #0
 80096de:	4602      	mov	r2, r0
 80096e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e2:	6a21      	ldr	r1, [r4, #32]
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b0      	blx	r6
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	d106      	bne.n	80096fc <__sflush_r+0x68>
 80096ee:	6829      	ldr	r1, [r5, #0]
 80096f0:	291d      	cmp	r1, #29
 80096f2:	d82b      	bhi.n	800974c <__sflush_r+0xb8>
 80096f4:	4a29      	ldr	r2, [pc, #164]	; (800979c <__sflush_r+0x108>)
 80096f6:	410a      	asrs	r2, r1
 80096f8:	07d6      	lsls	r6, r2, #31
 80096fa:	d427      	bmi.n	800974c <__sflush_r+0xb8>
 80096fc:	2200      	movs	r2, #0
 80096fe:	6062      	str	r2, [r4, #4]
 8009700:	04d9      	lsls	r1, r3, #19
 8009702:	6922      	ldr	r2, [r4, #16]
 8009704:	6022      	str	r2, [r4, #0]
 8009706:	d504      	bpl.n	8009712 <__sflush_r+0x7e>
 8009708:	1c42      	adds	r2, r0, #1
 800970a:	d101      	bne.n	8009710 <__sflush_r+0x7c>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b903      	cbnz	r3, 8009712 <__sflush_r+0x7e>
 8009710:	6560      	str	r0, [r4, #84]	; 0x54
 8009712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009714:	602f      	str	r7, [r5, #0]
 8009716:	2900      	cmp	r1, #0
 8009718:	d0c9      	beq.n	80096ae <__sflush_r+0x1a>
 800971a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800971e:	4299      	cmp	r1, r3
 8009720:	d002      	beq.n	8009728 <__sflush_r+0x94>
 8009722:	4628      	mov	r0, r5
 8009724:	f7ff f9e2 	bl	8008aec <_free_r>
 8009728:	2000      	movs	r0, #0
 800972a:	6360      	str	r0, [r4, #52]	; 0x34
 800972c:	e7c0      	b.n	80096b0 <__sflush_r+0x1c>
 800972e:	2301      	movs	r3, #1
 8009730:	4628      	mov	r0, r5
 8009732:	47b0      	blx	r6
 8009734:	1c41      	adds	r1, r0, #1
 8009736:	d1c8      	bne.n	80096ca <__sflush_r+0x36>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0c5      	beq.n	80096ca <__sflush_r+0x36>
 800973e:	2b1d      	cmp	r3, #29
 8009740:	d001      	beq.n	8009746 <__sflush_r+0xb2>
 8009742:	2b16      	cmp	r3, #22
 8009744:	d101      	bne.n	800974a <__sflush_r+0xb6>
 8009746:	602f      	str	r7, [r5, #0]
 8009748:	e7b1      	b.n	80096ae <__sflush_r+0x1a>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	e7ad      	b.n	80096b0 <__sflush_r+0x1c>
 8009754:	690f      	ldr	r7, [r1, #16]
 8009756:	2f00      	cmp	r7, #0
 8009758:	d0a9      	beq.n	80096ae <__sflush_r+0x1a>
 800975a:	0793      	lsls	r3, r2, #30
 800975c:	680e      	ldr	r6, [r1, #0]
 800975e:	bf08      	it	eq
 8009760:	694b      	ldreq	r3, [r1, #20]
 8009762:	600f      	str	r7, [r1, #0]
 8009764:	bf18      	it	ne
 8009766:	2300      	movne	r3, #0
 8009768:	eba6 0807 	sub.w	r8, r6, r7
 800976c:	608b      	str	r3, [r1, #8]
 800976e:	f1b8 0f00 	cmp.w	r8, #0
 8009772:	dd9c      	ble.n	80096ae <__sflush_r+0x1a>
 8009774:	6a21      	ldr	r1, [r4, #32]
 8009776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009778:	4643      	mov	r3, r8
 800977a:	463a      	mov	r2, r7
 800977c:	4628      	mov	r0, r5
 800977e:	47b0      	blx	r6
 8009780:	2800      	cmp	r0, #0
 8009782:	dc06      	bgt.n	8009792 <__sflush_r+0xfe>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e78e      	b.n	80096b0 <__sflush_r+0x1c>
 8009792:	4407      	add	r7, r0
 8009794:	eba8 0800 	sub.w	r8, r8, r0
 8009798:	e7e9      	b.n	800976e <__sflush_r+0xda>
 800979a:	bf00      	nop
 800979c:	dfbffffe 	.word	0xdfbffffe

080097a0 <_fflush_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	690b      	ldr	r3, [r1, #16]
 80097a4:	4605      	mov	r5, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	b913      	cbnz	r3, 80097b0 <_fflush_r+0x10>
 80097aa:	2500      	movs	r5, #0
 80097ac:	4628      	mov	r0, r5
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	b118      	cbz	r0, 80097ba <_fflush_r+0x1a>
 80097b2:	6a03      	ldr	r3, [r0, #32]
 80097b4:	b90b      	cbnz	r3, 80097ba <_fflush_r+0x1a>
 80097b6:	f7fe f9f1 	bl	8007b9c <__sinit>
 80097ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0f3      	beq.n	80097aa <_fflush_r+0xa>
 80097c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c4:	07d0      	lsls	r0, r2, #31
 80097c6:	d404      	bmi.n	80097d2 <_fflush_r+0x32>
 80097c8:	0599      	lsls	r1, r3, #22
 80097ca:	d402      	bmi.n	80097d2 <_fflush_r+0x32>
 80097cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ce:	f7fe fb0f 	bl	8007df0 <__retarget_lock_acquire_recursive>
 80097d2:	4628      	mov	r0, r5
 80097d4:	4621      	mov	r1, r4
 80097d6:	f7ff ff5d 	bl	8009694 <__sflush_r>
 80097da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097dc:	07da      	lsls	r2, r3, #31
 80097de:	4605      	mov	r5, r0
 80097e0:	d4e4      	bmi.n	80097ac <_fflush_r+0xc>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	059b      	lsls	r3, r3, #22
 80097e6:	d4e1      	bmi.n	80097ac <_fflush_r+0xc>
 80097e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ea:	f7fe fb02 	bl	8007df2 <__retarget_lock_release_recursive>
 80097ee:	e7dd      	b.n	80097ac <_fflush_r+0xc>

080097f0 <memmove>:
 80097f0:	4288      	cmp	r0, r1
 80097f2:	b510      	push	{r4, lr}
 80097f4:	eb01 0402 	add.w	r4, r1, r2
 80097f8:	d902      	bls.n	8009800 <memmove+0x10>
 80097fa:	4284      	cmp	r4, r0
 80097fc:	4623      	mov	r3, r4
 80097fe:	d807      	bhi.n	8009810 <memmove+0x20>
 8009800:	1e43      	subs	r3, r0, #1
 8009802:	42a1      	cmp	r1, r4
 8009804:	d008      	beq.n	8009818 <memmove+0x28>
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800980e:	e7f8      	b.n	8009802 <memmove+0x12>
 8009810:	4402      	add	r2, r0
 8009812:	4601      	mov	r1, r0
 8009814:	428a      	cmp	r2, r1
 8009816:	d100      	bne.n	800981a <memmove+0x2a>
 8009818:	bd10      	pop	{r4, pc}
 800981a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800981e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009822:	e7f7      	b.n	8009814 <memmove+0x24>

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 f8b4 	bl	800199c <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000538 	.word	0x20000538

08009844 <memcpy>:
 8009844:	440a      	add	r2, r1
 8009846:	4291      	cmp	r1, r2
 8009848:	f100 33ff 	add.w	r3, r0, #4294967295
 800984c:	d100      	bne.n	8009850 <memcpy+0xc>
 800984e:	4770      	bx	lr
 8009850:	b510      	push	{r4, lr}
 8009852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800985a:	4291      	cmp	r1, r2
 800985c:	d1f9      	bne.n	8009852 <memcpy+0xe>
 800985e:	bd10      	pop	{r4, pc}

08009860 <__assert_func>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4614      	mov	r4, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <__assert_func+0x2c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4605      	mov	r5, r0
 800986c:	68d8      	ldr	r0, [r3, #12]
 800986e:	b14c      	cbz	r4, 8009884 <__assert_func+0x24>
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <__assert_func+0x30>)
 8009872:	9100      	str	r1, [sp, #0]
 8009874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009878:	4906      	ldr	r1, [pc, #24]	; (8009894 <__assert_func+0x34>)
 800987a:	462b      	mov	r3, r5
 800987c:	f000 f872 	bl	8009964 <fiprintf>
 8009880:	f000 f882 	bl	8009988 <abort>
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <__assert_func+0x38>)
 8009886:	461c      	mov	r4, r3
 8009888:	e7f3      	b.n	8009872 <__assert_func+0x12>
 800988a:	bf00      	nop
 800988c:	20000070 	.word	0x20000070
 8009890:	0800a1ef 	.word	0x0800a1ef
 8009894:	0800a1fc 	.word	0x0800a1fc
 8009898:	0800a22a 	.word	0x0800a22a

0800989c <_calloc_r>:
 800989c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989e:	fba1 2402 	umull	r2, r4, r1, r2
 80098a2:	b94c      	cbnz	r4, 80098b8 <_calloc_r+0x1c>
 80098a4:	4611      	mov	r1, r2
 80098a6:	9201      	str	r2, [sp, #4]
 80098a8:	f7ff f994 	bl	8008bd4 <_malloc_r>
 80098ac:	9a01      	ldr	r2, [sp, #4]
 80098ae:	4605      	mov	r5, r0
 80098b0:	b930      	cbnz	r0, 80098c0 <_calloc_r+0x24>
 80098b2:	4628      	mov	r0, r5
 80098b4:	b003      	add	sp, #12
 80098b6:	bd30      	pop	{r4, r5, pc}
 80098b8:	220c      	movs	r2, #12
 80098ba:	6002      	str	r2, [r0, #0]
 80098bc:	2500      	movs	r5, #0
 80098be:	e7f8      	b.n	80098b2 <_calloc_r+0x16>
 80098c0:	4621      	mov	r1, r4
 80098c2:	f7fe fa18 	bl	8007cf6 <memset>
 80098c6:	e7f4      	b.n	80098b2 <_calloc_r+0x16>

080098c8 <__ascii_mbtowc>:
 80098c8:	b082      	sub	sp, #8
 80098ca:	b901      	cbnz	r1, 80098ce <__ascii_mbtowc+0x6>
 80098cc:	a901      	add	r1, sp, #4
 80098ce:	b142      	cbz	r2, 80098e2 <__ascii_mbtowc+0x1a>
 80098d0:	b14b      	cbz	r3, 80098e6 <__ascii_mbtowc+0x1e>
 80098d2:	7813      	ldrb	r3, [r2, #0]
 80098d4:	600b      	str	r3, [r1, #0]
 80098d6:	7812      	ldrb	r2, [r2, #0]
 80098d8:	1e10      	subs	r0, r2, #0
 80098da:	bf18      	it	ne
 80098dc:	2001      	movne	r0, #1
 80098de:	b002      	add	sp, #8
 80098e0:	4770      	bx	lr
 80098e2:	4610      	mov	r0, r2
 80098e4:	e7fb      	b.n	80098de <__ascii_mbtowc+0x16>
 80098e6:	f06f 0001 	mvn.w	r0, #1
 80098ea:	e7f8      	b.n	80098de <__ascii_mbtowc+0x16>

080098ec <_realloc_r>:
 80098ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f0:	4680      	mov	r8, r0
 80098f2:	4614      	mov	r4, r2
 80098f4:	460e      	mov	r6, r1
 80098f6:	b921      	cbnz	r1, 8009902 <_realloc_r+0x16>
 80098f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	4611      	mov	r1, r2
 80098fe:	f7ff b969 	b.w	8008bd4 <_malloc_r>
 8009902:	b92a      	cbnz	r2, 8009910 <_realloc_r+0x24>
 8009904:	f7ff f8f2 	bl	8008aec <_free_r>
 8009908:	4625      	mov	r5, r4
 800990a:	4628      	mov	r0, r5
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	f000 f841 	bl	8009996 <_malloc_usable_size_r>
 8009914:	4284      	cmp	r4, r0
 8009916:	4607      	mov	r7, r0
 8009918:	d802      	bhi.n	8009920 <_realloc_r+0x34>
 800991a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800991e:	d812      	bhi.n	8009946 <_realloc_r+0x5a>
 8009920:	4621      	mov	r1, r4
 8009922:	4640      	mov	r0, r8
 8009924:	f7ff f956 	bl	8008bd4 <_malloc_r>
 8009928:	4605      	mov	r5, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	d0ed      	beq.n	800990a <_realloc_r+0x1e>
 800992e:	42bc      	cmp	r4, r7
 8009930:	4622      	mov	r2, r4
 8009932:	4631      	mov	r1, r6
 8009934:	bf28      	it	cs
 8009936:	463a      	movcs	r2, r7
 8009938:	f7ff ff84 	bl	8009844 <memcpy>
 800993c:	4631      	mov	r1, r6
 800993e:	4640      	mov	r0, r8
 8009940:	f7ff f8d4 	bl	8008aec <_free_r>
 8009944:	e7e1      	b.n	800990a <_realloc_r+0x1e>
 8009946:	4635      	mov	r5, r6
 8009948:	e7df      	b.n	800990a <_realloc_r+0x1e>

0800994a <__ascii_wctomb>:
 800994a:	b149      	cbz	r1, 8009960 <__ascii_wctomb+0x16>
 800994c:	2aff      	cmp	r2, #255	; 0xff
 800994e:	bf85      	ittet	hi
 8009950:	238a      	movhi	r3, #138	; 0x8a
 8009952:	6003      	strhi	r3, [r0, #0]
 8009954:	700a      	strbls	r2, [r1, #0]
 8009956:	f04f 30ff 	movhi.w	r0, #4294967295
 800995a:	bf98      	it	ls
 800995c:	2001      	movls	r0, #1
 800995e:	4770      	bx	lr
 8009960:	4608      	mov	r0, r1
 8009962:	4770      	bx	lr

08009964 <fiprintf>:
 8009964:	b40e      	push	{r1, r2, r3}
 8009966:	b503      	push	{r0, r1, lr}
 8009968:	4601      	mov	r1, r0
 800996a:	ab03      	add	r3, sp, #12
 800996c:	4805      	ldr	r0, [pc, #20]	; (8009984 <fiprintf+0x20>)
 800996e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009972:	6800      	ldr	r0, [r0, #0]
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	f000 f83f 	bl	80099f8 <_vfiprintf_r>
 800997a:	b002      	add	sp, #8
 800997c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009980:	b003      	add	sp, #12
 8009982:	4770      	bx	lr
 8009984:	20000070 	.word	0x20000070

08009988 <abort>:
 8009988:	b508      	push	{r3, lr}
 800998a:	2006      	movs	r0, #6
 800998c:	f000 fa0c 	bl	8009da8 <raise>
 8009990:	2001      	movs	r0, #1
 8009992:	f7f7 ff8b 	bl	80018ac <_exit>

08009996 <_malloc_usable_size_r>:
 8009996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999a:	1f18      	subs	r0, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	bfbc      	itt	lt
 80099a0:	580b      	ldrlt	r3, [r1, r0]
 80099a2:	18c0      	addlt	r0, r0, r3
 80099a4:	4770      	bx	lr

080099a6 <__sfputc_r>:
 80099a6:	6893      	ldr	r3, [r2, #8]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	b410      	push	{r4}
 80099ae:	6093      	str	r3, [r2, #8]
 80099b0:	da08      	bge.n	80099c4 <__sfputc_r+0x1e>
 80099b2:	6994      	ldr	r4, [r2, #24]
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	db01      	blt.n	80099bc <__sfputc_r+0x16>
 80099b8:	290a      	cmp	r1, #10
 80099ba:	d103      	bne.n	80099c4 <__sfputc_r+0x1e>
 80099bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c0:	f000 b934 	b.w	8009c2c <__swbuf_r>
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	1c58      	adds	r0, r3, #1
 80099c8:	6010      	str	r0, [r2, #0]
 80099ca:	7019      	strb	r1, [r3, #0]
 80099cc:	4608      	mov	r0, r1
 80099ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <__sfputs_r>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	4614      	mov	r4, r2
 80099dc:	18d5      	adds	r5, r2, r3
 80099de:	42ac      	cmp	r4, r5
 80099e0:	d101      	bne.n	80099e6 <__sfputs_r+0x12>
 80099e2:	2000      	movs	r0, #0
 80099e4:	e007      	b.n	80099f6 <__sfputs_r+0x22>
 80099e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ea:	463a      	mov	r2, r7
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7ff ffda 	bl	80099a6 <__sfputc_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d1f3      	bne.n	80099de <__sfputs_r+0xa>
 80099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099f8 <_vfiprintf_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	460d      	mov	r5, r1
 80099fe:	b09d      	sub	sp, #116	; 0x74
 8009a00:	4614      	mov	r4, r2
 8009a02:	4698      	mov	r8, r3
 8009a04:	4606      	mov	r6, r0
 8009a06:	b118      	cbz	r0, 8009a10 <_vfiprintf_r+0x18>
 8009a08:	6a03      	ldr	r3, [r0, #32]
 8009a0a:	b90b      	cbnz	r3, 8009a10 <_vfiprintf_r+0x18>
 8009a0c:	f7fe f8c6 	bl	8007b9c <__sinit>
 8009a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a12:	07d9      	lsls	r1, r3, #31
 8009a14:	d405      	bmi.n	8009a22 <_vfiprintf_r+0x2a>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	059a      	lsls	r2, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_vfiprintf_r+0x2a>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1e:	f7fe f9e7 	bl	8007df0 <__retarget_lock_acquire_recursive>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	071b      	lsls	r3, r3, #28
 8009a26:	d501      	bpl.n	8009a2c <_vfiprintf_r+0x34>
 8009a28:	692b      	ldr	r3, [r5, #16]
 8009a2a:	b99b      	cbnz	r3, 8009a54 <_vfiprintf_r+0x5c>
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f000 f93a 	bl	8009ca8 <__swsetup_r>
 8009a34:	b170      	cbz	r0, 8009a54 <_vfiprintf_r+0x5c>
 8009a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a38:	07dc      	lsls	r4, r3, #31
 8009a3a:	d504      	bpl.n	8009a46 <_vfiprintf_r+0x4e>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	b01d      	add	sp, #116	; 0x74
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	0598      	lsls	r0, r3, #22
 8009a4a:	d4f7      	bmi.n	8009a3c <_vfiprintf_r+0x44>
 8009a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a4e:	f7fe f9d0 	bl	8007df2 <__retarget_lock_release_recursive>
 8009a52:	e7f3      	b.n	8009a3c <_vfiprintf_r+0x44>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9309      	str	r3, [sp, #36]	; 0x24
 8009a58:	2320      	movs	r3, #32
 8009a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a62:	2330      	movs	r3, #48	; 0x30
 8009a64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c18 <_vfiprintf_r+0x220>
 8009a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6c:	f04f 0901 	mov.w	r9, #1
 8009a70:	4623      	mov	r3, r4
 8009a72:	469a      	mov	sl, r3
 8009a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a78:	b10a      	cbz	r2, 8009a7e <_vfiprintf_r+0x86>
 8009a7a:	2a25      	cmp	r2, #37	; 0x25
 8009a7c:	d1f9      	bne.n	8009a72 <_vfiprintf_r+0x7a>
 8009a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a82:	d00b      	beq.n	8009a9c <_vfiprintf_r+0xa4>
 8009a84:	465b      	mov	r3, fp
 8009a86:	4622      	mov	r2, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f7ff ffa2 	bl	80099d4 <__sfputs_r>
 8009a90:	3001      	adds	r0, #1
 8009a92:	f000 80a9 	beq.w	8009be8 <_vfiprintf_r+0x1f0>
 8009a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a98:	445a      	add	r2, fp
 8009a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80a1 	beq.w	8009be8 <_vfiprintf_r+0x1f0>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab0:	f10a 0a01 	add.w	sl, sl, #1
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009abc:	931a      	str	r3, [sp, #104]	; 0x68
 8009abe:	4654      	mov	r4, sl
 8009ac0:	2205      	movs	r2, #5
 8009ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac6:	4854      	ldr	r0, [pc, #336]	; (8009c18 <_vfiprintf_r+0x220>)
 8009ac8:	f7f6 fb8a 	bl	80001e0 <memchr>
 8009acc:	9a04      	ldr	r2, [sp, #16]
 8009ace:	b9d8      	cbnz	r0, 8009b08 <_vfiprintf_r+0x110>
 8009ad0:	06d1      	lsls	r1, r2, #27
 8009ad2:	bf44      	itt	mi
 8009ad4:	2320      	movmi	r3, #32
 8009ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ada:	0713      	lsls	r3, r2, #28
 8009adc:	bf44      	itt	mi
 8009ade:	232b      	movmi	r3, #43	; 0x2b
 8009ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aea:	d015      	beq.n	8009b18 <_vfiprintf_r+0x120>
 8009aec:	9a07      	ldr	r2, [sp, #28]
 8009aee:	4654      	mov	r4, sl
 8009af0:	2000      	movs	r0, #0
 8009af2:	f04f 0c0a 	mov.w	ip, #10
 8009af6:	4621      	mov	r1, r4
 8009af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afc:	3b30      	subs	r3, #48	; 0x30
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	d94d      	bls.n	8009b9e <_vfiprintf_r+0x1a6>
 8009b02:	b1b0      	cbz	r0, 8009b32 <_vfiprintf_r+0x13a>
 8009b04:	9207      	str	r2, [sp, #28]
 8009b06:	e014      	b.n	8009b32 <_vfiprintf_r+0x13a>
 8009b08:	eba0 0308 	sub.w	r3, r0, r8
 8009b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b10:	4313      	orrs	r3, r2
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	46a2      	mov	sl, r4
 8009b16:	e7d2      	b.n	8009abe <_vfiprintf_r+0xc6>
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	1d19      	adds	r1, r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	9103      	str	r1, [sp, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bfbb      	ittet	lt
 8009b24:	425b      	neglt	r3, r3
 8009b26:	f042 0202 	orrlt.w	r2, r2, #2
 8009b2a:	9307      	strge	r3, [sp, #28]
 8009b2c:	9307      	strlt	r3, [sp, #28]
 8009b2e:	bfb8      	it	lt
 8009b30:	9204      	strlt	r2, [sp, #16]
 8009b32:	7823      	ldrb	r3, [r4, #0]
 8009b34:	2b2e      	cmp	r3, #46	; 0x2e
 8009b36:	d10c      	bne.n	8009b52 <_vfiprintf_r+0x15a>
 8009b38:	7863      	ldrb	r3, [r4, #1]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d134      	bne.n	8009ba8 <_vfiprintf_r+0x1b0>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d1a      	adds	r2, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9203      	str	r2, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfb8      	it	lt
 8009b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b4e:	3402      	adds	r4, #2
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c28 <_vfiprintf_r+0x230>
 8009b56:	7821      	ldrb	r1, [r4, #0]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	f7f6 fb40 	bl	80001e0 <memchr>
 8009b60:	b138      	cbz	r0, 8009b72 <_vfiprintf_r+0x17a>
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	eba0 000a 	sub.w	r0, r0, sl
 8009b68:	2240      	movs	r2, #64	; 0x40
 8009b6a:	4082      	lsls	r2, r0
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4829      	ldr	r0, [pc, #164]	; (8009c1c <_vfiprintf_r+0x224>)
 8009b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	f7f6 fb2f 	bl	80001e0 <memchr>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d03f      	beq.n	8009c06 <_vfiprintf_r+0x20e>
 8009b86:	4b26      	ldr	r3, [pc, #152]	; (8009c20 <_vfiprintf_r+0x228>)
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <_vfiprintf_r+0x1da>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	3308      	adds	r3, #8
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	443b      	add	r3, r7
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	e768      	b.n	8009a70 <_vfiprintf_r+0x78>
 8009b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e7a6      	b.n	8009af6 <_vfiprintf_r+0xfe>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	3401      	adds	r4, #1
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bba:	3a30      	subs	r2, #48	; 0x30
 8009bbc:	2a09      	cmp	r2, #9
 8009bbe:	d903      	bls.n	8009bc8 <_vfiprintf_r+0x1d0>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0c6      	beq.n	8009b52 <_vfiprintf_r+0x15a>
 8009bc4:	9105      	str	r1, [sp, #20]
 8009bc6:	e7c4      	b.n	8009b52 <_vfiprintf_r+0x15a>
 8009bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7f0      	b.n	8009bb4 <_vfiprintf_r+0x1bc>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <_vfiprintf_r+0x22c>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7fd fb9d 	bl	800731c <_printf_float>
 8009be2:	4607      	mov	r7, r0
 8009be4:	1c78      	adds	r0, r7, #1
 8009be6:	d1d6      	bne.n	8009b96 <_vfiprintf_r+0x19e>
 8009be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x202>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x202>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf6:	f7fe f8fc 	bl	8007df2 <__retarget_lock_release_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	065b      	lsls	r3, r3, #25
 8009bfe:	f53f af1d 	bmi.w	8009a3c <_vfiprintf_r+0x44>
 8009c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c04:	e71c      	b.n	8009a40 <_vfiprintf_r+0x48>
 8009c06:	ab03      	add	r3, sp, #12
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <_vfiprintf_r+0x22c>)
 8009c0e:	a904      	add	r1, sp, #16
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7fd fe27 	bl	8007864 <_printf_i>
 8009c16:	e7e4      	b.n	8009be2 <_vfiprintf_r+0x1ea>
 8009c18:	0800a1d4 	.word	0x0800a1d4
 8009c1c:	0800a1de 	.word	0x0800a1de
 8009c20:	0800731d 	.word	0x0800731d
 8009c24:	080099d5 	.word	0x080099d5
 8009c28:	0800a1da 	.word	0x0800a1da

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6a03      	ldr	r3, [r0, #32]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f7fd ffaf 	bl	8007b9c <__sinit>
 8009c3e:	69a3      	ldr	r3, [r4, #24]
 8009c40:	60a3      	str	r3, [r4, #8]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	071a      	lsls	r2, r3, #28
 8009c46:	d525      	bpl.n	8009c94 <__swbuf_r+0x68>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	b31b      	cbz	r3, 8009c94 <__swbuf_r+0x68>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	1a98      	subs	r0, r3, r2
 8009c52:	6963      	ldr	r3, [r4, #20]
 8009c54:	b2f6      	uxtb	r6, r6
 8009c56:	4283      	cmp	r3, r0
 8009c58:	4637      	mov	r7, r6
 8009c5a:	dc04      	bgt.n	8009c66 <__swbuf_r+0x3a>
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7ff fd9e 	bl	80097a0 <_fflush_r>
 8009c64:	b9e0      	cbnz	r0, 8009ca0 <__swbuf_r+0x74>
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	60a3      	str	r3, [r4, #8]
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	701e      	strb	r6, [r3, #0]
 8009c74:	6962      	ldr	r2, [r4, #20]
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d004      	beq.n	8009c86 <__swbuf_r+0x5a>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	07db      	lsls	r3, r3, #31
 8009c80:	d506      	bpl.n	8009c90 <__swbuf_r+0x64>
 8009c82:	2e0a      	cmp	r6, #10
 8009c84:	d104      	bne.n	8009c90 <__swbuf_r+0x64>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f7ff fd89 	bl	80097a0 <_fflush_r>
 8009c8e:	b938      	cbnz	r0, 8009ca0 <__swbuf_r+0x74>
 8009c90:	4638      	mov	r0, r7
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c94:	4621      	mov	r1, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 f806 	bl	8009ca8 <__swsetup_r>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d0d5      	beq.n	8009c4c <__swbuf_r+0x20>
 8009ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ca4:	e7f4      	b.n	8009c90 <__swbuf_r+0x64>
	...

08009ca8 <__swsetup_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <__swsetup_r+0xac>)
 8009cac:	4605      	mov	r5, r0
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	b118      	cbz	r0, 8009cbc <__swsetup_r+0x14>
 8009cb4:	6a03      	ldr	r3, [r0, #32]
 8009cb6:	b90b      	cbnz	r3, 8009cbc <__swsetup_r+0x14>
 8009cb8:	f7fd ff70 	bl	8007b9c <__sinit>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc2:	0718      	lsls	r0, r3, #28
 8009cc4:	d422      	bmi.n	8009d0c <__swsetup_r+0x64>
 8009cc6:	06d9      	lsls	r1, r3, #27
 8009cc8:	d407      	bmi.n	8009cda <__swsetup_r+0x32>
 8009cca:	2309      	movs	r3, #9
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	e034      	b.n	8009d44 <__swsetup_r+0x9c>
 8009cda:	0758      	lsls	r0, r3, #29
 8009cdc:	d512      	bpl.n	8009d04 <__swsetup_r+0x5c>
 8009cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce0:	b141      	cbz	r1, 8009cf4 <__swsetup_r+0x4c>
 8009ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	d002      	beq.n	8009cf0 <__swsetup_r+0x48>
 8009cea:	4628      	mov	r0, r5
 8009cec:	f7fe fefe 	bl	8008aec <_free_r>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f043 0308 	orr.w	r3, r3, #8
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	b94b      	cbnz	r3, 8009d24 <__swsetup_r+0x7c>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d1a:	d003      	beq.n	8009d24 <__swsetup_r+0x7c>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f884 	bl	8009e2c <__smakebuf_r>
 8009d24:	89a0      	ldrh	r0, [r4, #12]
 8009d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d2a:	f010 0301 	ands.w	r3, r0, #1
 8009d2e:	d00a      	beq.n	8009d46 <__swsetup_r+0x9e>
 8009d30:	2300      	movs	r3, #0
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	6963      	ldr	r3, [r4, #20]
 8009d36:	425b      	negs	r3, r3
 8009d38:	61a3      	str	r3, [r4, #24]
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	b943      	cbnz	r3, 8009d50 <__swsetup_r+0xa8>
 8009d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d42:	d1c4      	bne.n	8009cce <__swsetup_r+0x26>
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	0781      	lsls	r1, r0, #30
 8009d48:	bf58      	it	pl
 8009d4a:	6963      	ldrpl	r3, [r4, #20]
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	e7f4      	b.n	8009d3a <__swsetup_r+0x92>
 8009d50:	2000      	movs	r0, #0
 8009d52:	e7f7      	b.n	8009d44 <__swsetup_r+0x9c>
 8009d54:	20000070 	.word	0x20000070

08009d58 <_raise_r>:
 8009d58:	291f      	cmp	r1, #31
 8009d5a:	b538      	push	{r3, r4, r5, lr}
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	d904      	bls.n	8009d6c <_raise_r+0x14>
 8009d62:	2316      	movs	r3, #22
 8009d64:	6003      	str	r3, [r0, #0]
 8009d66:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d6e:	b112      	cbz	r2, 8009d76 <_raise_r+0x1e>
 8009d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d74:	b94b      	cbnz	r3, 8009d8a <_raise_r+0x32>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f830 	bl	8009ddc <_getpid_r>
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4620      	mov	r0, r4
 8009d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d86:	f000 b817 	b.w	8009db8 <_kill_r>
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d00a      	beq.n	8009da4 <_raise_r+0x4c>
 8009d8e:	1c59      	adds	r1, r3, #1
 8009d90:	d103      	bne.n	8009d9a <_raise_r+0x42>
 8009d92:	2316      	movs	r3, #22
 8009d94:	6003      	str	r3, [r0, #0]
 8009d96:	2001      	movs	r0, #1
 8009d98:	e7e7      	b.n	8009d6a <_raise_r+0x12>
 8009d9a:	2400      	movs	r4, #0
 8009d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009da0:	4628      	mov	r0, r5
 8009da2:	4798      	blx	r3
 8009da4:	2000      	movs	r0, #0
 8009da6:	e7e0      	b.n	8009d6a <_raise_r+0x12>

08009da8 <raise>:
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <raise+0xc>)
 8009daa:	4601      	mov	r1, r0
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	f7ff bfd3 	b.w	8009d58 <_raise_r>
 8009db2:	bf00      	nop
 8009db4:	20000070 	.word	0x20000070

08009db8 <_kill_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	; (8009dd8 <_kill_r+0x20>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	f7f7 fd61 	bl	800188c <_kill>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d102      	bne.n	8009dd4 <_kill_r+0x1c>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <_kill_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000538 	.word	0x20000538

08009ddc <_getpid_r>:
 8009ddc:	f7f7 bd4e 	b.w	800187c <_getpid>

08009de0 <__swhatbuf_r>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	460c      	mov	r4, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2900      	cmp	r1, #0
 8009dea:	b096      	sub	sp, #88	; 0x58
 8009dec:	4615      	mov	r5, r2
 8009dee:	461e      	mov	r6, r3
 8009df0:	da0d      	bge.n	8009e0e <__swhatbuf_r+0x2e>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009df8:	f04f 0100 	mov.w	r1, #0
 8009dfc:	bf0c      	ite	eq
 8009dfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e02:	2340      	movne	r3, #64	; 0x40
 8009e04:	2000      	movs	r0, #0
 8009e06:	6031      	str	r1, [r6, #0]
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	b016      	add	sp, #88	; 0x58
 8009e0c:	bd70      	pop	{r4, r5, r6, pc}
 8009e0e:	466a      	mov	r2, sp
 8009e10:	f000 f848 	bl	8009ea4 <_fstat_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dbec      	blt.n	8009df2 <__swhatbuf_r+0x12>
 8009e18:	9901      	ldr	r1, [sp, #4]
 8009e1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e22:	4259      	negs	r1, r3
 8009e24:	4159      	adcs	r1, r3
 8009e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2a:	e7eb      	b.n	8009e04 <__swhatbuf_r+0x24>

08009e2c <__smakebuf_r>:
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e30:	079d      	lsls	r5, r3, #30
 8009e32:	4606      	mov	r6, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	d507      	bpl.n	8009e48 <__smakebuf_r+0x1c>
 8009e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	2301      	movs	r3, #1
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	b002      	add	sp, #8
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	ab01      	add	r3, sp, #4
 8009e4a:	466a      	mov	r2, sp
 8009e4c:	f7ff ffc8 	bl	8009de0 <__swhatbuf_r>
 8009e50:	9900      	ldr	r1, [sp, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7fe febd 	bl	8008bd4 <_malloc_r>
 8009e5a:	b948      	cbnz	r0, 8009e70 <__smakebuf_r+0x44>
 8009e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d4ef      	bmi.n	8009e44 <__smakebuf_r+0x18>
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	e7e3      	b.n	8009e38 <__smakebuf_r+0xc>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	9b00      	ldr	r3, [sp, #0]
 8009e7c:	6163      	str	r3, [r4, #20]
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	6120      	str	r0, [r4, #16]
 8009e82:	b15b      	cbz	r3, 8009e9c <__smakebuf_r+0x70>
 8009e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f81d 	bl	8009ec8 <_isatty_r>
 8009e8e:	b128      	cbz	r0, 8009e9c <__smakebuf_r+0x70>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	431d      	orrs	r5, r3
 8009ea0:	81a5      	strh	r5, [r4, #12]
 8009ea2:	e7cf      	b.n	8009e44 <__smakebuf_r+0x18>

08009ea4 <_fstat_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	; (8009ec4 <_fstat_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7f7 fd4a 	bl	800194a <_fstat>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_fstat_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_fstat_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000538 	.word	0x20000538

08009ec8 <_isatty_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	; (8009ee4 <_isatty_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f7 fd49 	bl	800196a <_isatty>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_isatty_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_isatty_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20000538 	.word	0x20000538

08009ee8 <_init>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	bf00      	nop
 8009eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eee:	bc08      	pop	{r3}
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	4770      	bx	lr

08009ef4 <_fini>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr
